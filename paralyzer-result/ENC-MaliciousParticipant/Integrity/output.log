Linear part:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Completing equations...
Completed equations:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{7}let sn: GUID_t = GUIDA in
{8}let Pk: PK_t = pk(PrivKA) in
{9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{13}let sn_1: GUID_t = GUIDA in
{14}let DG: DomainGovernance_t = DGA in
{15}let PP: ParticipantPermission_t = PPA in
{16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
{17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{20}let sn_2: GUID_t = GUIDB in
{21}let Pk_1: PK_t = pk(PrivKB) in
{22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{26}let sn_3: GUID_t = GUIDB in
{27}let DG_1: DomainGovernance_t = DGB in
{28}let PP_1: ParticipantPermission_t = PPB in
{29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
{30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
{31}new Topic_bd: TopicID_t;
(
    {32}new GUID: GUID_t;
    {33}new PrivK: SK_t;
    {34}let sn_4: GUID_t = GUID in
    {35}let Pk_2: PK_t = pk(PrivK) in
    {36}let Cert: Cert_t = sign_cert(sn_4,Pk_2,SN_CI,SK_CI) in
    {37}new DG_2: DomainGovernance_t;
    {38}new PP_2: ParticipantPermission_t;
    {39}new Qos: Qos_t;
    {40}let sn_5: GUID_t = GUID in
    {41}let DG_3: DomainGovernance_t = DG_2 in
    {42}let PP_3: ParticipantPermission_t = PP_2 in
    {43}let Perm: PermDoc_t = sign_perm(sn_5,DG_3,PP_3,SK_Perm) in
    {44}let DHAlgo: Algo_t = make_algo(ID_G,DH_RSA) in
    {45}out(RTPS_Ch, (GUID,PrivK,Cert,Perm,DHAlgo))
) | (
    {46}!
    {47}let GUIDA_1: GUID_t = GUIDA in
    {48}let PrivK_A: SK_t = PrivKA in
    {49}let HashAlgoA: Hash_alg_t = SHA256 in
    {50}let QoSA_1: Qos_t = QoSA in
    {51}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {52}let Topic_bd_1: TopicID_t = Topic_bd in
    {53}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {54}out(Discovery_ch, (GUIDA_1,PdataA));
    {55}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {56}event A_discover(PdataB);
    {57}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {58}new ChallengeA: bitstring;
    {59}new s[]: Seed_t;
    {60}let gx: element_t = dh_pub(g,dh_k(s)) in
    {61}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {62}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {63}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {64}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {65}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {66}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {67}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {68}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {69}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {70}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {71}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {72}let SharedSecret: bitstring = gxy_SharedSecret in
    {73}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {74}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {75}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {76}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {77}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {78}if (PermB_x = PermB_1) then
    {79}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {80}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {81}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {82}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {83}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {84}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {85}out(RTPS_Ch, CryptoToken);
    {86}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,encryptedApplicationData: bitstring));
    {87}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {88}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {89}let (applicationData: bitstring,=secretData) = aead_dec(AeadAlgoA,sessionKey,IV,cryptoHeader,encryptedApplicationData) in
    {90}event A_3(GUIDB_1,GUIDA_1,applicationData,cryptoHeader,sessionKey);
    {91}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {92}new sessionID_new: bitstring;
    {93}new IV_new: bitstring;
    {94}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {95}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {96}new applicationData_new: bitstring;
    {97}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {98}out(RTPS_Ch, (cryptoHeader_new,aead_enc(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {99}out(RTPS_Ch, finishA)
) | (
    {100}!
    {101}let GUIDB_2: GUID_t = GUIDB in
    {102}let PrivK_B: SK_t = PrivKB in
    {103}let HashAlgoB: Hash_alg_t = SHA256 in
    {104}let QosB_1: Qos_t = QosB in
    {105}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {106}let Topic_bd_2: TopicID_t = Topic_bd in
    {107}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {108}event B_discover(PdataB_1);
    {109}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {110}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {111}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {112}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {113}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {114}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {115}new ChallengeB_1: bitstring;
    {116}new s_1[]: Seed_t;
    {117}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {118}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {119}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {120}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {121}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {122}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {123}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {124}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {125}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {126}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {127}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {128}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {129}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {130}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
    {131}new Topic_1: TopicID_t;
    {132}event TOPIC_CRT_REQ(GUIDB_2,PermB,Topic_1);
    {133}out(Discovery_ch, (PermB,TopicCreateReq,Topic_1,PdataB_1));
    {134}in(RTPS_Ch, (=GUIDA_2,=PermissionChecked,=GUIDB_2,=Topic_1));
    {135}let KeyMaterial_1: KeyMaterial_t = KDF(SharedSecret_1,ChallengeA_1,ChallengeB_1) in
    {136}in(RTPS_Ch, CryptoToken_1: CryptoToken_t);
    {137}if decCryptoToken(CryptoToken_1,KeyMaterial_1,DHAlgoB,HashAlgoB,AeadAlgoB) then
    {138}new sessionID_1: bitstring;
    {139}new IV_1: bitstring;
    {140}let cryptoHeader_1: CryptoHeader_t = makeCryptoHeader(sessionID_1,IV_1) in
    {141}let sessionKey_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_1,KeyMaterial_1)) in
    {142}event B_2(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1,KeyMaterial_1,cryptoHeader_1,sessionKey_1);
    {143}new applicationData_1: bitstring;
    {144}event B_3(GUIDB_2,GUIDA_2,applicationData_1,cryptoHeader_1,sessionKey_1);
    {145}out(RTPS_Ch, (cryptoHeader_1,aead_enc(AeadAlgoB,sessionKey_1,IV_1,cryptoHeader_1,(applicationData_1,secretData))));
    {146}in(RTPS_Ch, (cryptoHeader_n: CryptoHeader_t,encryptedApplicationData_1: bitstring));
    {147}let makeCryptoHeader(sessionID_new_1: bitstring,IV_new_1: bitstring) = cryptoHeader_n in
    {148}if (sessionID_new_1 â‰  sessionID_1) then
    {149}let sessionKey_new_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_new_1,KeyMaterial_1)) in
    {150}let applicationData_new_1: bitstring = aead_dec(AeadAlgoB,sessionKey_new_1,IV_1,cryptoHeader_n,encryptedApplicationData_1) in
        {151}event KEY_UPDATE_end(GUIDA_2,GUIDB_2,cryptoHeader_n,sessionKey_new_1,applicationData_new_1);
        {152}out(RTPS_Ch, finishB)
    else
        {153}out(RTPS_Ch, finishB)
) | (
    {154}!
    {155}let Topic_bd_3: TopicID_t = Topic_bd in
    {156}in(Discovery_ch, (GUIDB_3: GUID_t,PdataB_2: Pdata_t));
    {157}let participant_data(=GUIDB_3,=Topic_bd_3,QosB_2: Qos_t,=discoveryRegister) = PdataB_2 in
    {158}in(Discovery_ch, (GUIDA_3: GUID_t,PdataA_2: Pdata_t));
    {159}let participant_data(=GUIDA_3,=Topic_bd_3,QosA: Qos_t,=discoveryRegister) = PdataA_2 in
    {160}event DISCOVERY(GUIDB_3,PdataB_2,GUIDA_3,PdataA_2);
    {161}out(Discovery_ch, (PdataB_2,discoveredParticipant,PdataA_2));
    {162}in(Discovery_ch, (PermB_2: PermDoc_t,=TopicCreateReq,Topic_2: TopicID_t,=PdataB_2));
    {163}event TOPIC_DISCOVERED(GUIDB_3,PermB_2,Topic_2);
    {164}out(Discovery_ch, (PermB_2,TopicDiscovered,Topic_2,PdataB_2));
    {165}out(RTPS_Ch, finishDiscovery)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{31}new Topic_bd: TopicID_t;
(
    {32}new GUID: GUID_t;
    {33}new PrivK: SK_t;
    {37}new DG_2: DomainGovernance_t;
    {38}new PP_2: ParticipantPermission_t;
    {39}new Qos: Qos_t;
    {44}let DHAlgo: Algo_t = make_algo(ID_G,DH_RSA) in
    {42}let PP_3: ParticipantPermission_t = PP_2 in
    {41}let DG_3: DomainGovernance_t = DG_2 in
    {40}let sn_5: GUID_t = GUID in
    {43}let Perm: PermDoc_t = sign_perm(sn_5,DG_3,PP_3,SK_Perm) in
    {35}let Pk_2: PK_t = pk(PrivK) in
    {34}let sn_4: GUID_t = GUID in
    {36}let Cert: Cert_t = sign_cert(sn_4,Pk_2,SN_CI,SK_CI) in
    {45}out(RTPS_Ch, (GUID,PrivK,Cert,Perm,DHAlgo))
) | (
    {46}!
    {52}let Topic_bd_1: TopicID_t = Topic_bd in
    {50}let QoSA_1: Qos_t = QoSA in
    {47}let GUIDA_1: GUID_t = GUIDA in
    {53}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {54}out(Discovery_ch, (GUIDA_1,PdataA));
    {55}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {56}event A_discover(PdataB);
    {17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
    {57}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {58}new ChallengeA: bitstring;
    {59}new s[]: Seed_t;
    {60}let gx: element_t = dh_pub(g,dh_k(s)) in
    {61}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {49}let HashAlgoA: Hash_alg_t = SHA256 in
    {15}let PP: ParticipantPermission_t = PPA in
    {14}let DG: DomainGovernance_t = DGA in
    {13}let sn_1: GUID_t = GUIDA in
    {16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
    {8}let Pk: PK_t = pk(PrivKA) in
    {7}let sn: GUID_t = GUIDA in
    {9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
    {62}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {64}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {63}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {65}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {66}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {67}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {68}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {69}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {70}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {74}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {71}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {72}let SharedSecret: bitstring = gxy_SharedSecret in
    {75}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {48}let PrivK_A: SK_t = PrivKA in
    {73}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {76}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {77}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {78}if (PermB_x = PermB_1) then
    {79}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {80}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {81}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {82}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {84}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {51}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {83}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {85}out(RTPS_Ch, CryptoToken);
    {86}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,encryptedApplicationData: bitstring));
    {87}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {88}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {89}let (applicationData: bitstring,=secretData) = aead_dec(AeadAlgoA,sessionKey,IV,cryptoHeader,encryptedApplicationData) in
    {90}event A_3(GUIDB_1,GUIDA_1,applicationData,cryptoHeader,sessionKey);
    {91}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {92}new sessionID_new: bitstring;
    {93}new IV_new: bitstring;
    {96}new applicationData_new: bitstring;
    {95}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {94}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {97}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {98}out(RTPS_Ch, (cryptoHeader_new,aead_enc(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {99}out(RTPS_Ch, finishA)
) | (
    {100}!
    {106}let Topic_bd_2: TopicID_t = Topic_bd in
    {104}let QosB_1: Qos_t = QosB in
    {101}let GUIDB_2: GUID_t = GUIDB in
    {107}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {108}event B_discover(PdataB_1);
    {109}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {110}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {103}let HashAlgoB: Hash_alg_t = SHA256 in
    {30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
    {111}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {112}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {113}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {114}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {115}new ChallengeB_1: bitstring;
    {116}new s_1[]: Seed_t;
    {117}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {118}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {21}let Pk_1: PK_t = pk(PrivKB) in
    {20}let sn_2: GUID_t = GUIDB in
    {22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
    {122}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {28}let PP_1: ParticipantPermission_t = PPB in
    {27}let DG_1: DomainGovernance_t = DGB in
    {26}let sn_3: GUID_t = GUIDB in
    {29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
    {119}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {123}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {120}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {102}let PrivK_B: SK_t = PrivKB in
    {121}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {124}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {125}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {126}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {127}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {128}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {129}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {130}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
    {131}new Topic_1: TopicID_t;
    {132}event TOPIC_CRT_REQ(GUIDB_2,PermB,Topic_1);
    {133}out(Discovery_ch, (PermB,TopicCreateReq,Topic_1,PdataB_1));
    {134}in(RTPS_Ch, (=GUIDA_2,=PermissionChecked,=GUIDB_2,=Topic_1));
    {136}in(RTPS_Ch, CryptoToken_1: CryptoToken_t);
    {135}let KeyMaterial_1: KeyMaterial_t = KDF(SharedSecret_1,ChallengeA_1,ChallengeB_1) in
    {105}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {137}if decCryptoToken(CryptoToken_1,KeyMaterial_1,DHAlgoB,HashAlgoB,AeadAlgoB) then
    {138}new sessionID_1: bitstring;
    {139}new IV_1: bitstring;
    {141}let sessionKey_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_1,KeyMaterial_1)) in
    {140}let cryptoHeader_1: CryptoHeader_t = makeCryptoHeader(sessionID_1,IV_1) in
    {142}event B_2(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1,KeyMaterial_1,cryptoHeader_1,sessionKey_1);
    {143}new applicationData_1: bitstring;
    {144}event B_3(GUIDB_2,GUIDA_2,applicationData_1,cryptoHeader_1,sessionKey_1);
    {145}out(RTPS_Ch, (cryptoHeader_1,aead_enc(AeadAlgoB,sessionKey_1,IV_1,cryptoHeader_1,(applicationData_1,secretData))));
    {146}in(RTPS_Ch, (cryptoHeader_n: CryptoHeader_t,encryptedApplicationData_1: bitstring));
    {147}let makeCryptoHeader(sessionID_new_1: bitstring,IV_new_1: bitstring) = cryptoHeader_n in
    {148}if (sessionID_new_1 â‰  sessionID_1) then
    {149}let sessionKey_new_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_new_1,KeyMaterial_1)) in
    {150}let applicationData_new_1: bitstring = aead_dec(AeadAlgoB,sessionKey_new_1,IV_1,cryptoHeader_n,encryptedApplicationData_1) in
        {151}event KEY_UPDATE_end(GUIDA_2,GUIDB_2,cryptoHeader_n,sessionKey_new_1,applicationData_new_1);
        {152}out(RTPS_Ch, finishB)
    else
        {153}out(RTPS_Ch, finishB)
) | (
    {154}!
    {156}in(Discovery_ch, (GUIDB_3: GUID_t,PdataB_2: Pdata_t));
    {155}let Topic_bd_3: TopicID_t = Topic_bd in
    {157}let participant_data(=GUIDB_3,=Topic_bd_3,QosB_2: Qos_t,=discoveryRegister) = PdataB_2 in
    {158}in(Discovery_ch, (GUIDA_3: GUID_t,PdataA_2: Pdata_t));
    {159}let participant_data(=GUIDA_3,=Topic_bd_3,QosA: Qos_t,=discoveryRegister) = PdataA_2 in
    {160}event DISCOVERY(GUIDB_3,PdataB_2,GUIDA_3,PdataA_2);
    {161}out(Discovery_ch, (PdataB_2,discoveredParticipant,PdataA_2));
    {162}in(Discovery_ch, (PermB_2: PermDoc_t,=TopicCreateReq,Topic_2: TopicID_t,=PdataB_2));
    {163}event TOPIC_DISCOVERED(GUIDB_3,PermB_2,Topic_2);
    {164}out(Discovery_ch, (PermB_2,TopicDiscovered,Topic_2,PdataB_2));
    {165}out(RTPS_Ch, finishDiscovery)
)

-- Query event(A_3(GUIDB_4,GUIDA_4,aD,cryptoHeader_2,sessionKey_2)) ==> event(B_3(GUIDB_4,GUIDA_4,aD,cryptoHeader_2,sessionKey_2)) in process 1.
Translating the process into Horn clauses...
Completing...
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect PkA_1:PK_t, GUIDA_4:GUID_t; attacker(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI)).
200 rules inserted. Base: 167 rules (60 with conclusion selected). Queue: 28 rules.
400 rules inserted. Base: 244 rules (81 with conclusion selected). Queue: 43 rules.
600 rules inserted. Base: 309 rules (81 with conclusion selected). Queue: 124 rules.
800 rules inserted. Base: 414 rules (82 with conclusion selected). Queue: 194 rules.
1000 rules inserted. Base: 519 rules (84 with conclusion selected). Queue: 95 rules.
1200 rules inserted. Base: 626 rules (87 with conclusion selected). Queue: 53 rules.
1400 rules inserted. Base: 665 rules (87 with conclusion selected). Queue: 39 rules.
1600 rules inserted. Base: 724 rules (87 with conclusion selected). Queue: 17 rules.
1800 rules inserted. Base: 761 rules (104 with conclusion selected). Queue: 26 rules.
2000 rules inserted. Base: 802 rules (106 with conclusion selected). Queue: 152 rules.
2200 rules inserted. Base: 864 rules (106 with conclusion selected). Queue: 104 rules.
2400 rules inserted. Base: 956 rules (108 with conclusion selected). Queue: 135 rules.
2600 rules inserted. Base: 1050 rules (108 with conclusion selected). Queue: 63 rules.
2800 rules inserted. Base: 1125 rules (144 with conclusion selected). Queue: 30 rules.
3000 rules inserted. Base: 1151 rules (147 with conclusion selected). Queue: 62 rules.
3200 rules inserted. Base: 1213 rules (148 with conclusion selected). Queue: 77 rules.
3400 rules inserted. Base: 1300 rules (166 with conclusion selected). Queue: 5 rules.
Starting query event(A_3(GUIDB_4,GUIDA_4,aD,cryptoHeader_2,sessionKey_2)) ==> event(B_3(GUIDB_4,GUIDA_4,aD,cryptoHeader_2,sessionKey_2))
goal reachable: attacker(sessionID_2) && attacker(iv) && attacker(aD) && b-event(B_3(GUIDB[],GUID[],applicationData_2,makeCryptoHeader(sessionID_3,IV_2),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_2)),x_1),ChallengeA_2,ChallengeB_2),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,dh_k(s_2)),x_1),ChallengeA_2,ChallengeB_2))))) && attacker(PermA_2) && attacker(PdataA_3) && attacker(ChallengeA_2) && attacker(x_1) && attacker(ChallengeB_3) && attacker(y_1) && attacker(PdataB_3) -> event(A_3(GUID[],GUIDA[],aD,makeCryptoHeader(sessionID_2,iv),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_3)),ChallengeA_3,ChallengeB_3),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_3)),ChallengeA_3,ChallengeB_3)))))
Abbreviations:
s_3 = s[!1 = @sid]
ChallengeA_3 = ChallengeA[PdataB = PdataB_3,!1 = @sid]
s_2 = s_1[!1 = @sid_1]
ChallengeB_2 = ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]
applicationData_2 = applicationData_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_2)),x_1),ChallengeA_2,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]
sessionID_3 = sessionID_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_2)),x_1),ChallengeA_2,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]
IV_2 = IV_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_2)),x_1),ChallengeA_2,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]

Derivation:
Abbreviations:
s_2 = s[!1 = @sid]
ChallengeA_2 = ChallengeA[PdataB = PdataB_3,!1 = @sid]
s_3 = s_1[!1 = @sid_1]
ChallengeB_2 = ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]
applicationData_2 = applicationData_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]
sessionID_2 = sessionID_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]
IV_2 = IV_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]
Topic_3 = Topic_1[sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]
ChallengeB_3 = ChallengeB_1[gx_DHA_1 = gx_DHA_2,ChallengeA_1 = ChallengeA_4,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]
ChallengeB_4 = ChallengeB_1[gx_DHA_1 = gx_DHA_3,ChallengeA_1 = ChallengeA_5,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_2]
s_4 = s_1[!1 = @sid_2]
ChallengeA_6 = ChallengeA[PdataB = PdataB_4,!1 = @sid]
ChallengeA_7 = ChallengeA[PdataB = PdataB_5,!1 = @sid_3]
s_5 = s[!1 = @sid_3]

1. Using the function discoveryRegister the attacker may obtain discoveryRegister.
attacker(discoveryRegister).

2. The message (GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)) may be sent to the attacker at output {54}.
attacker((GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister))).

3. By 2, the attacker may know (GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).
Using the function 2-proj-2-tuple the attacker may obtain participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
attacker(participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).

4. By 3, the attacker may know participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
Using the function 3-proj-participant_data the attacker may obtain QoSA[].
attacker(QoSA[]).

5. By 3, the attacker may know participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
Using the function 2-proj-participant_data the attacker may obtain Topic_bd[].
attacker(Topic_bd[]).

6. By 2, the attacker may know (GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).
Using the function 1-proj-2-tuple the attacker may obtain GUIDA[].
attacker(GUIDA[]).

7. By 6, the attacker may know GUIDA[].
By 5, the attacker may know Topic_bd[].
By 4, the attacker may know QoSA[].
By 1, the attacker may know discoveryRegister.
Using the function participant_data the attacker may obtain participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
attacker(participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).

8. Using the function discoveredParticipant the attacker may obtain discoveredParticipant.
attacker(discoveredParticipant).

9. We assume as hypothesis that
attacker(PdataB_3).

10. By 9, the attacker may know PdataB_3.
By 8, the attacker may know discoveredParticipant.
By 7, the attacker may know participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
Using the function 3-tuple the attacker may obtain (PdataB_3,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).
attacker((PdataB_3,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister))).

11. Using the function SHA256 the attacker may obtain SHA256.
attacker(SHA256).

12. Using the function DH_RSA the attacker may obtain DH_RSA.
attacker(DH_RSA).

13. Using the function ID_G the attacker may obtain ID_G.
attacker(ID_G).

14. By 13, the attacker may know ID_G.
By 12, the attacker may know DH_RSA.
Using the function make_algo the attacker may obtain make_algo(ID_G,DH_RSA).
attacker(make_algo(ID_G,DH_RSA)).

15. The attacker has some term PdataB_5.
attacker(PdataB_5).

16. By 15, the attacker may know PdataB_5.
By 8, the attacker may know discoveredParticipant.
By 7, the attacker may know participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
Using the function 3-tuple the attacker may obtain (PdataB_5,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).
attacker((PdataB_5,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister))).

17. The message (PdataB_5,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)) that the attacker may have by 16 may be received at input {55}.
So the message (make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_7,dh_pub(ID_G,dh_k(s_5))) may be sent to the attacker at output {65}.
attacker((make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_7,dh_pub(ID_G,dh_k(s_5)))).

18. By 17, the attacker may know (make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_7,dh_pub(ID_G,dh_k(s_5))).
Using the function 1-proj-4-tuple the attacker may obtain make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).

19. By 18, the attacker may know make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
Using the function 2-proj-make_C_list the attacker may obtain sign_perm(GUIDA[],DGA[],PPA[],SK_Perm).
attacker(sign_perm(GUIDA[],DGA[],PPA[],SK_Perm)).

20. By 18, the attacker may know make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
Using the function 1-proj-make_C_list the attacker may obtain sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI).
attacker(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI)).

21. By 20, the attacker may know sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI).
By 19, the attacker may know sign_perm(GUIDA[],DGA[],PPA[],SK_Perm).
By 7, the attacker may know participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
By 14, the attacker may know make_algo(ID_G,DH_RSA).
By 11, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).

22. By 11, the attacker may know SHA256.
By 21, the attacker may know make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).

23. The attacker has some term PdataB_4.
attacker(PdataB_4).

24. By 23, the attacker may know PdataB_4.
By 8, the attacker may know discoveredParticipant.
By 7, the attacker may know participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
Using the function 3-tuple the attacker may obtain (PdataB_4,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).
attacker((PdataB_4,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister))).

25. The message (PdataB_4,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)) that the attacker may have by 24 may be received at input {55}.
So the message (make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_6,dh_pub(ID_G,dh_k(s_2))) may be sent to the attacker at output {65}.
attacker((make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_6,dh_pub(ID_G,dh_k(s_2)))).

26. By 25, the attacker may know (make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_6,dh_pub(ID_G,dh_k(s_2))).
Using the function 4-proj-4-tuple the attacker may obtain dh_pub(ID_G,dh_k(s_2)).
attacker(dh_pub(ID_G,dh_k(s_2))).

27. The message (PdataB_3,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)) that the attacker may have by 10 may be received at input {55}.
So the message (make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,dh_k(s_2))) may be sent to the attacker at output {65}.
attacker((make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)))).

28. By 27, the attacker may know (make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,dh_k(s_2))).
Using the function 3-proj-4-tuple the attacker may obtain ChallengeA_2.
attacker(ChallengeA_2).

29. We assume as hypothesis that
attacker(y_1).

30. By 13, the attacker may know ID_G.
By 29, the attacker may know y_1.
Using the function dh_pub the attacker may obtain dh_pub(ID_G,y_1).
attacker(dh_pub(ID_G,y_1)).

31. We assume as hypothesis that
attacker(ChallengeB_5).

32. The message (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)) may be sent to the attacker at output {45}.
attacker((GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA))).

33. By 32, the attacker may know (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)).
Using the function 4-proj-5-tuple the attacker may obtain sign_perm(GUID[],DG_2[],PP_2[],SK_Perm).
attacker(sign_perm(GUID[],DG_2[],PP_2[],SK_Perm)).

34. By 32, the attacker may know (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)).
Using the function 3-proj-5-tuple the attacker may obtain sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
attacker(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI)).

35. By 34, the attacker may know sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
By 33, the attacker may know sign_perm(GUID[],DG_2[],PP_2[],SK_Perm).
By 9, the attacker may know PdataB_3.
By 14, the attacker may know make_algo(ID_G,DH_RSA).
By 11, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256)).

36. By 11, the attacker may know SHA256.
By 35, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256))).

37. By 36, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256)).
By 31, the attacker may know ChallengeB_5.
By 30, the attacker may know dh_pub(ID_G,y_1).
By 28, the attacker may know ChallengeA_2.
By 26, the attacker may know dh_pub(ID_G,dh_k(s_2)).
By 22, the attacker may know hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
Using the function 6-tuple the attacker may obtain (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_5,dh_pub(ID_G,y_1),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).
attacker((hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_5,dh_pub(ID_G,y_1),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).

38. By 32, the attacker may know (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)).
Using the function 2-proj-5-tuple the attacker may obtain PrivK[].
attacker(PrivK[]).

39. By 38, the attacker may know PrivK[].
By 37, the attacker may know (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_5,dh_pub(ID_G,y_1),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).
Using the function sign the attacker may obtain sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_5,dh_pub(ID_G,y_1),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).
attacker(sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_5,dh_pub(ID_G,y_1),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))).

40. The attacker has some term hash_CB_2.
attacker(hash_CB_2).

41. By 35, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256).
By 40, the attacker may know hash_CB_2.
By 28, the attacker may know ChallengeA_2.
By 31, the attacker may know ChallengeB_5.
By 30, the attacker may know dh_pub(ID_G,y_1).
By 22, the attacker may know hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
By 26, the attacker may know dh_pub(ID_G,dh_k(s_2)).
By 39, the attacker may know sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_5,dh_pub(ID_G,y_1),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).
Using the function 8-tuple the attacker may obtain (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256),hash_CB_2,ChallengeA_2,ChallengeB_5,dh_pub(ID_G,y_1),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,dh_k(s_2)),sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_5,dh_pub(ID_G,y_1),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))).
attacker((make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256),hash_CB_2,ChallengeA_2,ChallengeB_5,dh_pub(ID_G,y_1),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,dh_k(s_2)),sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_5,dh_pub(ID_G,y_1),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))))).

42. The attacker has some term Topic_4.
attacker(Topic_4).

43. Using the function TopicDiscovered the attacker may obtain TopicDiscovered.
attacker(TopicDiscovered).

44. By 33, the attacker may know sign_perm(GUID[],DG_2[],PP_2[],SK_Perm).
By 43, the attacker may know TopicDiscovered.
By 42, the attacker may know Topic_4.
By 9, the attacker may know PdataB_3.
Using the function 4-tuple the attacker may obtain (sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),TopicDiscovered,Topic_4,PdataB_3).
attacker((sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),TopicDiscovered,Topic_4,PdataB_3)).

45. We assume as hypothesis that
attacker(x_1).

46. By 13, the attacker may know ID_G.
By 45, the attacker may know x_1.
Using the function dh_pub the attacker may obtain dh_pub(ID_G,x_1).
attacker(dh_pub(ID_G,x_1)).

47. We assume as hypothesis that
attacker(ChallengeA_3).

48. We assume as hypothesis that
attacker(PdataA_3).

49. We assume as hypothesis that
attacker(PermA_2).

50. By 34, the attacker may know sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
By 49, the attacker may know PermA_2.
By 48, the attacker may know PdataA_3.
By 14, the attacker may know make_algo(ID_G,DH_RSA).
By 11, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).

51. By 11, the attacker may know SHA256.
By 50, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))).

52. By 50, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256).
By 51, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
By 47, the attacker may know ChallengeA_3.
By 46, the attacker may know dh_pub(ID_G,x_1).
Using the function 4-tuple the attacker may obtain (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1)).
attacker((make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1))).

53. The message (GUIDB[],participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)) may be sent to the attacker at output {109}.
attacker((GUIDB[],participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister))).

54. By 53, the attacker may know (GUIDB[],participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)).
Using the function 2-proj-2-tuple the attacker may obtain participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister).
attacker(participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)).

55. By 54, the attacker may know participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister).
Using the function 3-proj-participant_data the attacker may obtain QosB[].
attacker(QosB[]).

56. By 53, the attacker may know (GUIDB[],participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)).
Using the function 1-proj-2-tuple the attacker may obtain GUIDB[].
attacker(GUIDB[]).

57. By 56, the attacker may know GUIDB[].
By 5, the attacker may know Topic_bd[].
By 55, the attacker may know QosB[].
By 1, the attacker may know discoveryRegister.
Using the function participant_data the attacker may obtain participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister).
attacker(participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)).

58. The attacker has some term gx_DHA_3.
attacker(gx_DHA_3).

59. The attacker has some term ChallengeA_5.
attacker(ChallengeA_5).

60. The attacker has some term PdataA_5.
attacker(PdataA_5).

61. The attacker has some term PermA_4.
attacker(PermA_4).

62. By 34, the attacker may know sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
By 61, the attacker may know PermA_4.
By 60, the attacker may know PdataA_5.
By 14, the attacker may know make_algo(ID_G,DH_RSA).
By 11, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)).

63. By 11, the attacker may know SHA256.
By 62, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256))).

64. By 62, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256).
By 63, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)).
By 59, the attacker may know ChallengeA_5.
By 58, the attacker may know gx_DHA_3.
Using the function 4-tuple the attacker may obtain (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_5,gx_DHA_3).
attacker((make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_5,gx_DHA_3)).

65. The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_5,gx_DHA_3) that the attacker may have by 64 may be received at input {110}.
So the message (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_5,ChallengeB_4,dh_pub(ID_G,dh_k(s_4)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_3,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_4,dh_pub(ID_G,dh_k(s_4)),ChallengeA_5,gx_DHA_3,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256))))) may be sent to the attacker at output {124}.
attacker((make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_5,ChallengeB_4,dh_pub(ID_G,dh_k(s_4)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_3,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_4,dh_pub(ID_G,dh_k(s_4)),ChallengeA_5,gx_DHA_3,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)))))).

66. By 65, the attacker may know (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_5,ChallengeB_4,dh_pub(ID_G,dh_k(s_4)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_3,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_4,dh_pub(ID_G,dh_k(s_4)),ChallengeA_5,gx_DHA_3,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256))))).
Using the function 1-proj-8-tuple the attacker may obtain make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).

67. By 66, the attacker may know make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
Using the function 2-proj-make_C_list the attacker may obtain sign_perm(GUIDB[],DGB[],PPB[],SK_Perm).
attacker(sign_perm(GUIDB[],DGB[],PPB[],SK_Perm)).

68. By 66, the attacker may know make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
Using the function 1-proj-make_C_list the attacker may obtain sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI).
attacker(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI)).

69. By 68, the attacker may know sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI).
By 67, the attacker may know sign_perm(GUIDB[],DGB[],PPB[],SK_Perm).
By 57, the attacker may know participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister).
By 14, the attacker may know make_algo(ID_G,DH_RSA).
By 11, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).

70. By 11, the attacker may know SHA256.
By 69, the attacker may know make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).

71. The attacker has some term gx_DHA_2.
attacker(gx_DHA_2).

72. The attacker has some term ChallengeA_4.
attacker(ChallengeA_4).

73. The attacker has some term PdataA_4.
attacker(PdataA_4).

74. The attacker has some term PermA_3.
attacker(PermA_3).

75. By 34, the attacker may know sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
By 74, the attacker may know PermA_3.
By 73, the attacker may know PdataA_4.
By 14, the attacker may know make_algo(ID_G,DH_RSA).
By 11, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)).

76. By 11, the attacker may know SHA256.
By 75, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256))).

77. By 75, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256).
By 76, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)).
By 72, the attacker may know ChallengeA_4.
By 71, the attacker may know gx_DHA_2.
Using the function 4-tuple the attacker may obtain (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_4,gx_DHA_2).
attacker((make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_4,gx_DHA_2)).

78. The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_4,gx_DHA_2) that the attacker may have by 77 may be received at input {110}.
So the message (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_4,ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),ChallengeA_4,gx_DHA_2,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256))))) may be sent to the attacker at output {124}.
attacker((make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_4,ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),ChallengeA_4,gx_DHA_2,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)))))).

79. By 78, the attacker may know (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_4,ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),ChallengeA_4,gx_DHA_2,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256))))).
Using the function 5-proj-8-tuple the attacker may obtain dh_pub(ID_G,dh_k(s_3)).
attacker(dh_pub(ID_G,dh_k(s_3))).

80. The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1)) that the attacker may have by 52 may be received at input {110}.
So the message (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,x_1),sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),ChallengeA_3,dh_pub(ID_G,x_1),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))))) may be sent to the attacker at output {124}.
attacker((make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,x_1),sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),ChallengeA_3,dh_pub(ID_G,x_1),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)))))).

81. By 80, the attacker may know (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,x_1),sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),ChallengeA_3,dh_pub(ID_G,x_1),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))))).
Using the function 4-proj-8-tuple the attacker may obtain ChallengeB_2.
attacker(ChallengeB_2).

82. By 51, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
By 47, the attacker may know ChallengeA_3.
By 46, the attacker may know dh_pub(ID_G,x_1).
By 81, the attacker may know ChallengeB_2.
By 79, the attacker may know dh_pub(ID_G,dh_k(s_3)).
By 70, the attacker may know hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
Using the function 6-tuple the attacker may obtain (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).
attacker((hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).

83. By 38, the attacker may know PrivK[].
By 82, the attacker may know (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).
Using the function sign the attacker may obtain sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).
attacker(sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))).

84. By 51, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
By 70, the attacker may know hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
By 46, the attacker may know dh_pub(ID_G,x_1).
By 79, the attacker may know dh_pub(ID_G,dh_k(s_3)).
By 47, the attacker may know ChallengeA_3.
By 81, the attacker may know ChallengeB_2.
By 83, the attacker may know sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).
Using the function 7-tuple the attacker may obtain (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,x_1),dh_pub(ID_G,dh_k(s_3)),ChallengeA_3,ChallengeB_2,sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))).
attacker((hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,x_1),dh_pub(ID_G,dh_k(s_3)),ChallengeA_3,ChallengeB_2,sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))))).

85. The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1)) that the attacker may have by 52 may be received at input {110}.
The message (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,x_1),dh_pub(ID_G,dh_k(s_3)),ChallengeA_3,ChallengeB_2,sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))) that the attacker may have by 84 may be received at input {125}.
So the message (sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),TopicCreateReq,Topic_3,participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)) may be sent to the attacker at output {133}.
attacker((sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),TopicCreateReq,Topic_3,participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister))).

86. By 85, the attacker may know (sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),TopicCreateReq,Topic_3,participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)).
Using the function 3-proj-4-tuple the attacker may obtain Topic_3.
attacker(Topic_3).

87. Using the function PermissionChecked the attacker may obtain PermissionChecked.
attacker(PermissionChecked).

88. By 32, the attacker may know (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)).
Using the function 1-proj-5-tuple the attacker may obtain GUID[].
attacker(GUID[]).

89. By 88, the attacker may know GUID[].
By 87, the attacker may know PermissionChecked.
By 56, the attacker may know GUIDB[].
By 86, the attacker may know Topic_3.
Using the function 4-tuple the attacker may obtain (GUID[],PermissionChecked,GUIDB[],Topic_3).
attacker((GUID[],PermissionChecked,GUIDB[],Topic_3)).

90. Using the function AES_GCM_128 the attacker may obtain AES_GCM_128.
attacker(AES_GCM_128).

91. By 79, the attacker may know dh_pub(ID_G,dh_k(s_3)).
By 45, the attacker may know x_1.
Using the function dh_exp the attacker may obtain dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1).
attacker(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1)).

92. By 91, the attacker may know dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1).
By 47, the attacker may know ChallengeA_3.
By 81, the attacker may know ChallengeB_2.
Using the function KDF the attacker may obtain KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2).
attacker(KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2)).

93. By 92, the attacker may know KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2).
By 14, the attacker may know make_algo(ID_G,DH_RSA).
By 11, the attacker may know SHA256.
By 90, the attacker may know AES_GCM_128.
Using the function encCryptoToken the attacker may obtain encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128).
attacker(encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128)).

94. The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1)) that the attacker may have by 52 may be received at input {110}.
The message (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,x_1),dh_pub(ID_G,dh_k(s_3)),ChallengeA_3,ChallengeB_2,sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))) that the attacker may have by 84 may be received at input {125}.
The message (GUID[],PermissionChecked,GUIDB[],Topic_3) that the attacker may have by 89 may be received at input {134}.
The message encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128) that the attacker may have by 93 may be received at input {136}.
The event B_3(GUIDB[],GUID[],applicationData_2,makeCryptoHeader(sessionID_2,IV_2),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2)))) may be executed at {144}.
So the message (makeCryptoHeader(sessionID_2,IV_2),aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[]))) may be sent to the attacker at output {145}.
attacker((makeCryptoHeader(sessionID_2,IV_2),aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[])))).

95. By 94, the attacker may know (makeCryptoHeader(sessionID_2,IV_2),aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[]))).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[])).
attacker(aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[]))).

96. By 94, the attacker may know (makeCryptoHeader(sessionID_2,IV_2),aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[]))).
Using the function 1-proj-2-tuple the attacker may obtain makeCryptoHeader(sessionID_2,IV_2).
attacker(makeCryptoHeader(sessionID_2,IV_2)).

97. By 96, the attacker may know makeCryptoHeader(sessionID_2,IV_2).
Using the function 2-proj-makeCryptoHeader the attacker may obtain IV_2.
attacker(IV_2).

98. By 96, the attacker may know makeCryptoHeader(sessionID_2,IV_2).
Using the function 1-proj-makeCryptoHeader the attacker may obtain sessionID_2.
attacker(sessionID_2).

99. By 98, the attacker may know sessionID_2.
By 97, the attacker may know IV_2.
Using the function makeCryptoHeader the attacker may obtain makeCryptoHeader(sessionID_2,IV_2).
attacker(makeCryptoHeader(sessionID_2,IV_2)).

100. By 98, the attacker may know sessionID_2.
By 92, the attacker may know KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2).
Using the function 2-tuple the attacker may obtain (sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2)).
attacker((sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2))).

101. By 11, the attacker may know SHA256.
By 92, the attacker may know KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2).
By 100, the attacker may know (sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2)).
Using the function hmac the attacker may obtain hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2))).
attacker(hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2)))).

102. By 90, the attacker may know AES_GCM_128.
By 101, the attacker may know hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2))).
By 97, the attacker may know IV_2.
By 99, the attacker may know makeCryptoHeader(sessionID_2,IV_2).
By 95, the attacker may know aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,dh_k(s_3)),x_1),ChallengeA_3,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[])).
Using the function aead_dec the attacker may obtain (applicationData_2,secretData[]).
attacker((applicationData_2,secretData[])).

103. By 102, the attacker may know (applicationData_2,secretData[]).
Using the function 2-proj-2-tuple the attacker may obtain secretData[].
attacker(secretData[]).

104. We assume as hypothesis that
attacker(aD).

105. By 104, the attacker may know aD.
By 103, the attacker may know secretData[].
Using the function 2-tuple the attacker may obtain (aD,secretData[]).
attacker((aD,secretData[])).

106. We assume as hypothesis that
attacker(iv).

107. We assume as hypothesis that
attacker(sessionID_3).

108. By 107, the attacker may know sessionID_3.
By 106, the attacker may know iv.
Using the function makeCryptoHeader the attacker may obtain makeCryptoHeader(sessionID_3,iv).
attacker(makeCryptoHeader(sessionID_3,iv)).

109. By 26, the attacker may know dh_pub(ID_G,dh_k(s_2)).
By 29, the attacker may know y_1.
Using the function dh_exp the attacker may obtain dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)).
attacker(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2))).

110. By 109, the attacker may know dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)).
By 28, the attacker may know ChallengeA_2.
By 31, the attacker may know ChallengeB_5.
Using the function KDF the attacker may obtain KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5).
attacker(KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5)).

111. By 107, the attacker may know sessionID_3.
By 110, the attacker may know KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5).
Using the function 2-tuple the attacker may obtain (sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5)).
attacker((sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5))).

112. By 11, the attacker may know SHA256.
By 110, the attacker may know KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5).
By 111, the attacker may know (sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5)).
Using the function hmac the attacker may obtain hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5))).
attacker(hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5)))).

113. By 90, the attacker may know AES_GCM_128.
By 112, the attacker may know hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5))).
By 106, the attacker may know iv.
By 108, the attacker may know makeCryptoHeader(sessionID_3,iv).
By 105, the attacker may know (aD,secretData[]).
Using the function aead_enc the attacker may obtain aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5))),iv,makeCryptoHeader(sessionID_3,iv),(aD,secretData[])).
attacker(aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5))),iv,makeCryptoHeader(sessionID_3,iv),(aD,secretData[]))).

114. By 108, the attacker may know makeCryptoHeader(sessionID_3,iv).
By 113, the attacker may know aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5))),iv,makeCryptoHeader(sessionID_3,iv),(aD,secretData[])).
Using the function 2-tuple the attacker may obtain (makeCryptoHeader(sessionID_3,iv),aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5))),iv,makeCryptoHeader(sessionID_3,iv),(aD,secretData[]))).
attacker((makeCryptoHeader(sessionID_3,iv),aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5))),iv,makeCryptoHeader(sessionID_3,iv),(aD,secretData[])))).

115. The message (PdataB_3,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)) that the attacker may have by 10 may be received at input {55}.
The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256),hash_CB_2,ChallengeA_2,ChallengeB_5,dh_pub(ID_G,y_1),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,dh_k(s_2)),sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_5,dh_pub(ID_G,y_1),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))) that the attacker may have by 41 may be received at input {66}.
The message (sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),TopicDiscovered,Topic_4,PdataB_3) that the attacker may have by 44 may be received at input {77}.
The message (makeCryptoHeader(sessionID_3,iv),aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5))),iv,makeCryptoHeader(sessionID_3,iv),(aD,secretData[]))) that the attacker may have by 114 may be received at input {86}.
So event A_3(GUID[],GUIDA[],aD,makeCryptoHeader(sessionID_3,iv),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5)))) may be executed at {90}.
event(A_3(GUID[],GUIDA[],aD,makeCryptoHeader(sessionID_3,iv),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5))))).

116. By 115, event(A_3(GUID[],GUIDA[],aD,makeCryptoHeader(sessionID_3,iv),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5))))).
The goal is reached, represented in the following fact:
event(A_3(GUID[],GUIDA[],aD,makeCryptoHeader(sessionID_3,iv),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_5))))).


Unified PdataB_4 with PdataB_3
Unified gx_DHA_2 with dh_pub(ID_G,x_1)
Unified ChallengeA_4 with ChallengeA_3
Unified PdataA_4 with PdataA_3
Unified PermA_3 with PermA_2
The clause after UnifyDerivationPrecise is
attacker(PdataB_3) && attacker(y_1) && attacker(ChallengeB_5) && attacker(ChallengeA_3) && attacker(PdataA_3) && attacker(PermA_2) && attacker(x_1) && b-event(B_3(GUIDB[],GUID[],applicationData_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_1[!1 = @sid_1])),x_1),ChallengeA_3,ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1],dh_pub(ID_G,dh_k(s_1[!1 = @sid_1])),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1],makeCryptoHeader(sessionID_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_1[!1 = @sid_1])),x_1),ChallengeA_3,ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1],dh_pub(ID_G,dh_k(s_1[!1 = @sid_1])),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1],IV_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_1[!1 = @sid_1])),x_1),ChallengeA_3,ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1],dh_pub(ID_G,dh_k(s_1[!1 = @sid_1])),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,dh_k(s_1[!1 = @sid_1])),x_1),ChallengeA_3,ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]),(sessionID_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_1[!1 = @sid_1])),x_1),ChallengeA_3,ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,dh_pub(ID_G,x_1),ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1],dh_pub(ID_G,dh_k(s_1[!1 = @sid_1])),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1],KDF(dh_exp(dh_pub(ID_G,dh_k(s_1[!1 = @sid_1])),x_1),ChallengeA_3,ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,x_1),ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]))))) && attacker(aD) && attacker(iv) && attacker(sessionID_3) -> event(A_3(GUID[],GUIDA[],aD,makeCryptoHeader(sessionID_3,iv),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s[!1 = @sid])),ChallengeA[PdataB = PdataB_3,!1 = @sid],ChallengeB_5),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s[!1 = @sid])),ChallengeA[PdataB = PdataB_3,!1 = @sid],ChallengeB_5)))))
This clause still contradicts the query.
A more detailed output of the traces is available with
  set traceDisplay = long.

out(RTPS_Ch, ~M) with ~M = pk(SK_CI) at {2}

out(RTPS_Ch, ~M_1) with ~M_1 = pk(SK_Perm) at {4}

new GUIDA: GUID_t creating GUIDA_4 at {5}

new PrivKA: SK_t creating PrivKA_1 at {6}

new DGA: DomainGovernance_t creating DGA_1 at {10}

new PPA: ParticipantPermission_t creating PPA_1 at {11}

new QoSA: Qos_t creating QoSA_2 at {12}

new GUIDB: GUID_t creating GUIDB_4 at {18}

new PrivKB: SK_t creating PrivKB_1 at {19}

new DGB: DomainGovernance_t creating DGB_2 at {23}

new PPB: ParticipantPermission_t creating PPB_2 at {24}

new QosB: Qos_t creating QosB_3 at {25}

new Topic_bd: TopicID_t creating Topic_bd_4 at {31}

event B_discover(participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister)) at {108} in copy a

out(Discovery_ch, (~M_2,participant_data(~M_3,~M_4,~M_5,~M_6))) with ~M_2 = GUIDB_4, ~M_3 = GUIDB_4, ~M_4 = Topic_bd_4, ~M_5 = QosB_3, ~M_6 = discoveryRegister at {109} in copy a

event B_discover(participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister)) at {108} in copy a_1

out(Discovery_ch, (~M_7,participant_data(~M_8,~M_9,~M_10,~M_11))) with ~M_7 = GUIDB_4, ~M_8 = GUIDB_4, ~M_9 = Topic_bd_4, ~M_10 = QosB_3, ~M_11 = discoveryRegister at {109} in copy a_1

event B_discover(participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister)) at {108} in copy a_2

out(Discovery_ch, (~M_12,participant_data(~M_13,~M_14,~M_15,~M_16))) with ~M_12 = GUIDB_4, ~M_13 = GUIDB_4, ~M_14 = Topic_bd_4, ~M_15 = QosB_3, ~M_16 = discoveryRegister at {109} in copy a_2

out(Discovery_ch, (~M_17,participant_data(~M_18,~M_19,~M_20,~M_21))) with ~M_17 = GUIDA_4, ~M_18 = GUIDA_4, ~M_19 = Topic_bd_4, ~M_20 = QoSA_2, ~M_21 = discoveryRegister at {54} in copy a_3

out(Discovery_ch, (~M_22,participant_data(~M_23,~M_24,~M_25,~M_26))) with ~M_22 = GUIDA_4, ~M_23 = GUIDA_4, ~M_24 = Topic_bd_4, ~M_25 = QoSA_2, ~M_26 = discoveryRegister at {54} in copy a_4

out(Discovery_ch, (~M_27,participant_data(~M_28,~M_29,~M_30,~M_31))) with ~M_27 = GUIDA_4, ~M_28 = GUIDA_4, ~M_29 = Topic_bd_4, ~M_30 = QoSA_2, ~M_31 = discoveryRegister at {54} in copy a_5

new GUID: GUID_t creating GUID_1 at {32}

new PrivK: SK_t creating PrivK_1 at {33}

new DG_2: DomainGovernance_t creating DG_4 at {37}

new PP_2: ParticipantPermission_t creating PP_4 at {38}

new Qos: Qos_t creating Qos_1 at {39}

out(RTPS_Ch, (~M_32,~M_33,~M_34,~M_35,make_algo(~M_36,~M_37))) with ~M_32 = GUID_1, ~M_33 = PrivK_1, ~M_34 = sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI), ~M_35 = sign_perm(GUID_1,DG_4,PP_4,SK_Perm), ~M_36 = ID_G, ~M_37 = DH_RSA at {45}

in(Discovery_ch, (a_6,discoveredParticipant,participant_data(~M_17,~M_4,~M_20,discoveryRegister))) with ~M_17 = GUIDA_4, ~M_4 = Topic_bd_4, ~M_20 = QoSA_2 at {55} in copy a_5

event A_discover(a_6) at {56} in copy a_5

new ChallengeA: bitstring creating ChallengeA_8 at {58} in copy a_5

new s: Seed_t creating s_6 at {59} in copy a_5

event A_0(GUIDA_4,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_8,dh_pub(ID_G,dh_k(s_6)),a_6) at {64} in copy a_5

out(RTPS_Ch, (make_C_list(~M_38,~M_39,participant_data(~M_40,~M_41,~M_42,~M_43),make_algo(~M_44,~M_45),~M_46),~M_47,~M_48,~M_49)) with ~M_38 = sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI), ~M_39 = sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm), ~M_40 = GUIDA_4, ~M_41 = Topic_bd_4, ~M_42 = QoSA_2, ~M_43 = discoveryRegister, ~M_44 = ID_G, ~M_45 = DH_RSA, ~M_46 = SHA256, ~M_47 = hash(SHA256,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_48 = ChallengeA_8, ~M_49 = dh_pub(ID_G,dh_k(s_6)) at {65} in copy a_5

in(Discovery_ch, (a_7,discoveredParticipant,participant_data(~M_17,~M_4,~M_20,discoveryRegister))) with ~M_17 = GUIDA_4, ~M_4 = Topic_bd_4, ~M_20 = QoSA_2 at {55} in copy a_3

event A_discover(a_7) at {56} in copy a_3

new ChallengeA: bitstring creating ChallengeA_9 at {58} in copy a_3

new s: Seed_t creating s_7 at {59} in copy a_3

event A_0(GUIDA_4,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_9,dh_pub(ID_G,dh_k(s_7)),a_7) at {64} in copy a_3

out(RTPS_Ch, (make_C_list(~M_50,~M_51,participant_data(~M_52,~M_53,~M_54,~M_55),make_algo(~M_56,~M_57),~M_58),~M_59,~M_60,~M_61)) with ~M_50 = sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI), ~M_51 = sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm), ~M_52 = GUIDA_4, ~M_53 = Topic_bd_4, ~M_54 = QoSA_2, ~M_55 = discoveryRegister, ~M_56 = ID_G, ~M_57 = DH_RSA, ~M_58 = SHA256, ~M_59 = hash(SHA256,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_60 = ChallengeA_9, ~M_61 = dh_pub(ID_G,dh_k(s_7)) at {65} in copy a_3

in(RTPS_Ch, (make_C_list(~M_34,~M_35,a_7,make_algo(ID_G,DH_RSA),SHA256),a_8,~M_60,a_9,dh_pub(ID_G,a_10),hash(SHA256,make_C_list(~M_38,~M_39,participant_data(~M_17,~M_4,~M_20,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),~M_61,sign(~M_33,(hash(SHA256,make_C_list(~M_34,~M_35,a_7,make_algo(ID_G,DH_RSA),SHA256)),a_9,dh_pub(ID_G,a_10),~M_60,~M_61,hash(SHA256,make_C_list(~M_38,~M_39,participant_data(~M_17,~M_4,~M_20,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))))) with ~M_34 = sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI), ~M_35 = sign_perm(GUID_1,DG_4,PP_4,SK_Perm), ~M_60 = ChallengeA_9, hash(SHA256,make_C_list(~M_38,~M_39,participant_data(~M_17,~M_4,~M_20,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)) = hash(SHA256,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_61 = dh_pub(ID_G,dh_k(s_7)), sign(~M_33,(hash(SHA256,make_C_list(~M_34,~M_35,a_7,make_algo(ID_G,DH_RSA),SHA256)),a_9,dh_pub(ID_G,a_10),~M_60,~M_61,hash(SHA256,make_C_list(~M_38,~M_39,participant_data(~M_17,~M_4,~M_20,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))) = sign(PrivK_1,(hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),sign_perm(GUID_1,DG_4,PP_4,SK_Perm),a_7,make_algo(ID_G,DH_RSA),SHA256)),a_9,dh_pub(ID_G,a_10),ChallengeA_9,dh_pub(ID_G,dh_k(s_7)),hash(SHA256,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))) at {66} in copy a_3

event endAtoB(GUID_1,sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),ChallengeA_9) at {70} in copy a_3

event beginBtoA(GUIDA_4,sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),a_9) at {74} in copy a_3

event A_1(GUIDA_4,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_9,dh_pub(ID_G,dh_k(s_7)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),sign_perm(GUID_1,DG_4,PP_4,SK_Perm),a_7,make_algo(ID_G,DH_RSA),SHA256),a_9,dh_pub(ID_G,a_10),dh_exp(dh_pub(ID_G,a_10),dh_k(s_7))) at {75} in copy a_3

out(RTPS_Ch, (~M_62,~M_63,~M_64,~M_65,~M_66,~M_67,~M_68)) with ~M_62 = hash(SHA256,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_63 = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),sign_perm(GUID_1,DG_4,PP_4,SK_Perm),a_7,make_algo(ID_G,DH_RSA),SHA256)), ~M_64 = dh_pub(ID_G,dh_k(s_7)), ~M_65 = dh_pub(ID_G,a_10), ~M_66 = ChallengeA_9, ~M_67 = a_9, ~M_68 = sign(PrivKA_1,(hash(SHA256,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_9,dh_pub(ID_G,dh_k(s_7)),a_9,dh_pub(ID_G,a_10),a_8)) at {76} in copy a_3

in(Discovery_ch, (~M_35,TopicDiscovered,a_11,a_7)) with ~M_35 = sign_perm(GUID_1,DG_4,PP_4,SK_Perm) at {77} in copy a_3

event PERM_CHECK(GUID_1,sign_perm(GUID_1,DG_4,PP_4,SK_Perm),a_11) at {80} in copy a_3

out(RTPS_Ch, (~M_69,~M_70,~M_71,~M_72)) with ~M_69 = GUIDA_4, ~M_70 = PermissionChecked, ~M_71 = GUID_1, ~M_72 = a_11 at {81} in copy a_3

event A_2(GUIDA_4,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_9,dh_pub(ID_G,dh_k(s_7)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),sign_perm(GUID_1,DG_4,PP_4,SK_Perm),a_7,make_algo(ID_G,DH_RSA),SHA256),a_9,dh_pub(ID_G,a_10),dh_exp(dh_pub(ID_G,a_10),dh_k(s_7)),KDF(dh_exp(dh_pub(ID_G,a_10),dh_k(s_7)),ChallengeA_9,a_9)) at {84} in copy a_3

out(RTPS_Ch, ~M_73) with ~M_73 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,a_10),dh_k(s_7)),ChallengeA_9,a_9),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128) at {85} in copy a_3

in(RTPS_Ch, (make_C_list(~M_34,a_12,a_13,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(~M_34,a_12,a_13,make_algo(ID_G,DH_RSA),SHA256)),a_14,a_15)) with ~M_34 = sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI), hash(SHA256,make_C_list(~M_34,a_12,a_13,make_algo(ID_G,DH_RSA),SHA256)) = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_12,a_13,make_algo(ID_G,DH_RSA),SHA256)) at {110} in copy a_2

new ChallengeB_1: bitstring creating ChallengeB_6 at {115} in copy a_2

new s_1: Seed_t creating s_8 at {116} in copy a_2

event beginAtoB(GUIDB_4,sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),a_14) at {122} in copy a_2

event B_0(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_6,dh_pub(ID_G,dh_k(s_8)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_12,a_13,make_algo(ID_G,DH_RSA),SHA256),a_14,a_15) at {123} in copy a_2

out(RTPS_Ch, (make_C_list(~M_74,~M_75,participant_data(~M_76,~M_77,~M_78,~M_79),make_algo(~M_80,~M_81),~M_82),~M_83,~M_84,~M_85,~M_86,~M_87,~M_88,~M_89)) with ~M_74 = sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI), ~M_75 = sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm), ~M_76 = GUIDB_4, ~M_77 = Topic_bd_4, ~M_78 = QosB_3, ~M_79 = discoveryRegister, ~M_80 = ID_G, ~M_81 = DH_RSA, ~M_82 = SHA256, ~M_83 = hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_84 = a_14, ~M_85 = ChallengeB_6, ~M_86 = dh_pub(ID_G,dh_k(s_8)), ~M_87 = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_12,a_13,make_algo(ID_G,DH_RSA),SHA256)), ~M_88 = a_15, ~M_89 = sign(PrivKB_1,(hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_6,dh_pub(ID_G,dh_k(s_8)),a_14,a_15,hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_12,a_13,make_algo(ID_G,DH_RSA),SHA256)))) at {124} in copy a_2

in(RTPS_Ch, (make_C_list(~M_34,a_16,a_17,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(~M_34,a_16,a_17,make_algo(ID_G,DH_RSA),SHA256)),a_18,dh_pub(ID_G,a_19))) with ~M_34 = sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI), hash(SHA256,make_C_list(~M_34,a_16,a_17,make_algo(ID_G,DH_RSA),SHA256)) = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_16,a_17,make_algo(ID_G,DH_RSA),SHA256)) at {110} in copy a

new ChallengeB_1: bitstring creating ChallengeB_7 at {115} in copy a

new s_1: Seed_t creating s_9 at {116} in copy a

event beginAtoB(GUIDB_4,sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),a_18) at {122} in copy a

event B_0(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_7,dh_pub(ID_G,dh_k(s_9)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_16,a_17,make_algo(ID_G,DH_RSA),SHA256),a_18,dh_pub(ID_G,a_19)) at {123} in copy a

out(RTPS_Ch, (make_C_list(~M_90,~M_91,participant_data(~M_92,~M_93,~M_94,~M_95),make_algo(~M_96,~M_97),~M_98),~M_99,~M_100,~M_101,~M_102,~M_103,~M_104,~M_105)) with ~M_90 = sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI), ~M_91 = sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm), ~M_92 = GUIDB_4, ~M_93 = Topic_bd_4, ~M_94 = QosB_3, ~M_95 = discoveryRegister, ~M_96 = ID_G, ~M_97 = DH_RSA, ~M_98 = SHA256, ~M_99 = hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_100 = a_18, ~M_101 = ChallengeB_7, ~M_102 = dh_pub(ID_G,dh_k(s_9)), ~M_103 = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_16,a_17,make_algo(ID_G,DH_RSA),SHA256)), ~M_104 = dh_pub(ID_G,a_19), ~M_105 = sign(PrivKB_1,(hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_7,dh_pub(ID_G,dh_k(s_9)),a_18,dh_pub(ID_G,a_19),hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_16,a_17,make_algo(ID_G,DH_RSA),SHA256)))) at {124} in copy a

in(RTPS_Ch, (hash(SHA256,make_C_list(~M_34,a_16,a_17,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(~M_74,~M_75,participant_data(~M_2,~M_4,~M_5,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,a_19),~M_102,a_18,~M_101,sign(~M_33,(hash(SHA256,make_C_list(~M_34,a_16,a_17,make_algo(ID_G,DH_RSA),SHA256)),a_18,dh_pub(ID_G,a_19),~M_101,~M_102,hash(SHA256,make_C_list(~M_74,~M_75,participant_data(~M_2,~M_4,~M_5,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))))) with hash(SHA256,make_C_list(~M_34,a_16,a_17,make_algo(ID_G,DH_RSA),SHA256)) = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_16,a_17,make_algo(ID_G,DH_RSA),SHA256)), hash(SHA256,make_C_list(~M_74,~M_75,participant_data(~M_2,~M_4,~M_5,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)) = hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_102 = dh_pub(ID_G,dh_k(s_9)), ~M_101 = ChallengeB_7, sign(~M_33,(hash(SHA256,make_C_list(~M_34,a_16,a_17,make_algo(ID_G,DH_RSA),SHA256)),a_18,dh_pub(ID_G,a_19),~M_101,~M_102,hash(SHA256,make_C_list(~M_74,~M_75,participant_data(~M_2,~M_4,~M_5,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))) = sign(PrivK_1,(hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_16,a_17,make_algo(ID_G,DH_RSA),SHA256)),a_18,dh_pub(ID_G,a_19),ChallengeB_7,dh_pub(ID_G,dh_k(s_9)),hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))) at {125} in copy a

event endBtoA(GUID_1,sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),ChallengeB_7) at {127} in copy a

event B_1(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_7,dh_pub(ID_G,dh_k(s_9)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_16,a_17,make_algo(ID_G,DH_RSA),SHA256),a_18,dh_pub(ID_G,a_19),dh_exp(dh_pub(ID_G,a_19),dh_k(s_9))) at {130} in copy a

new Topic_1: TopicID_t creating Topic_5 at {131} in copy a

event TOPIC_CRT_REQ(GUIDB_4,sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),Topic_5) at {132} in copy a

out(Discovery_ch, (~M_106,~M_107,~M_108,participant_data(~M_109,~M_110,~M_111,~M_112))) with ~M_106 = sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm), ~M_107 = TopicCreateReq, ~M_108 = Topic_5, ~M_109 = GUIDB_4, ~M_110 = Topic_bd_4, ~M_111 = QosB_3, ~M_112 = discoveryRegister at {133} in copy a

in(RTPS_Ch, (~M_32,PermissionChecked,~M_2,~M_108)) with ~M_32 = GUID_1, ~M_2 = GUIDB_4, ~M_108 = Topic_5 at {134} in copy a

in(RTPS_Ch, encCryptoToken(KDF(dh_exp(~M_102,a_19),a_18,~M_101),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128)) with encCryptoToken(KDF(dh_exp(~M_102,a_19),a_18,~M_101),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128) = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,dh_k(s_9)),a_19),a_18,ChallengeB_7),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128) at {136} in copy a

new sessionID_1: bitstring creating sessionID_4 at {138} in copy a

new IV_1: bitstring creating IV_3 at {139} in copy a

event B_2(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_7,dh_pub(ID_G,dh_k(s_9)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_16,a_17,make_algo(ID_G,DH_RSA),SHA256),a_18,dh_pub(ID_G,a_19),dh_exp(dh_pub(ID_G,a_19),dh_k(s_9)),KDF(dh_exp(dh_pub(ID_G,a_19),dh_k(s_9)),a_18,ChallengeB_7),makeCryptoHeader(sessionID_4,IV_3),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,a_19),dh_k(s_9)),a_18,ChallengeB_7),(sessionID_4,KDF(dh_exp(dh_pub(ID_G,a_19),dh_k(s_9)),a_18,ChallengeB_7)))) at {142} in copy a

new applicationData_1: bitstring creating applicationData_3 at {143} in copy a

event B_3(GUIDB_4,GUID_1,applicationData_3,makeCryptoHeader(sessionID_4,IV_3),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,a_19),dh_k(s_9)),a_18,ChallengeB_7),(sessionID_4,KDF(dh_exp(dh_pub(ID_G,a_19),dh_k(s_9)),a_18,ChallengeB_7)))) at {144} in copy a

out(RTPS_Ch, (makeCryptoHeader(~M_113,~M_114),~M_115)) with ~M_113 = sessionID_4, ~M_114 = IV_3, ~M_115 = aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,a_19),dh_k(s_9)),a_18,ChallengeB_7),(sessionID_4,KDF(dh_exp(dh_pub(ID_G,a_19),dh_k(s_9)),a_18,ChallengeB_7))),IV_3,makeCryptoHeader(sessionID_4,IV_3),(applicationData_3,secretData)) at {145} in copy a

in(RTPS_Ch, (makeCryptoHeader(a_20,a_21),aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(~M_61,a_10),~M_60,a_9),(a_20,KDF(dh_exp(~M_61,a_10),~M_60,a_9))),a_21,makeCryptoHeader(a_20,a_21),(a_22,2-proj-2-tuple(aead_dec(AES_GCM_128,hmac(SHA256,KDF(dh_exp(~M_102,a_19),a_18,~M_101),(~M_113,KDF(dh_exp(~M_102,a_19),a_18,~M_101))),~M_114,makeCryptoHeader(~M_113,~M_114),~M_115)))))) with aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(~M_61,a_10),~M_60,a_9),(a_20,KDF(dh_exp(~M_61,a_10),~M_60,a_9))),a_21,makeCryptoHeader(a_20,a_21),(a_22,2-proj-2-tuple(aead_dec(AES_GCM_128,hmac(SHA256,KDF(dh_exp(~M_102,a_19),a_18,~M_101),(~M_113,KDF(dh_exp(~M_102,a_19),a_18,~M_101))),~M_114,makeCryptoHeader(~M_113,~M_114),~M_115)))) = aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,a_10),dh_k(s_7)),ChallengeA_9,a_9),(a_20,KDF(dh_exp(dh_pub(ID_G,a_10),dh_k(s_7)),ChallengeA_9,a_9))),a_21,makeCryptoHeader(a_20,a_21),(a_22,secretData)) at {86} in copy a_3

event A_3(GUID_1,GUIDA_4,a_22,makeCryptoHeader(a_20,a_21),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,a_10),dh_k(s_7)),ChallengeA_9,a_9),(a_20,KDF(dh_exp(dh_pub(ID_G,a_10),dh_k(s_7)),ChallengeA_9,a_9)))) at {90} in copy a_3 (goal)

The event A_3(GUID_1,GUIDA_4,a_22,makeCryptoHeader(a_20,a_21),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,a_10),dh_k(s_7)),ChallengeA_9,a_9),(a_20,KDF(dh_exp(dh_pub(ID_G,a_10),dh_k(s_7)),ChallengeA_9,a_9)))) is executed at {90} in copy a_3.
A trace has been found.
RESULT event(A_3(GUIDB_4,GUIDA_4,aD,cryptoHeader_2,sessionKey_2)) ==> event(B_3(GUIDB_4,GUIDA_4,aD,cryptoHeader_2,sessionKey_2)) is false.

--------------------------------------------------------------
Verification summary:

Query event(A_3(GUIDB_4,GUIDA_4,aD,cryptoHeader_2,sessionKey_2)) ==> event(B_3(GUIDB_4,GUIDA_4,aD,cryptoHeader_2,sessionKey_2)) is false.

--------------------------------------------------------------

