Linear part:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Completing equations...
Completed equations:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{7}let sn: GUID_t = GUIDA in
{8}let Pk: PK_t = pk(PrivKA) in
{9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{13}let sn_1: GUID_t = GUIDA in
{14}let DG: DomainGovernance_t = DGA in
{15}let PP: ParticipantPermission_t = PPA in
{16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
{17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{20}let sn_2: GUID_t = GUIDB in
{21}let Pk_1: PK_t = pk(PrivKB) in
{22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{26}let sn_3: GUID_t = GUIDB in
{27}let DG_1: DomainGovernance_t = DGB in
{28}let PP_1: ParticipantPermission_t = PPB in
{29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
{30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
{31}new Topic_bd: TopicID_t;
(
    {32}new GUID: GUID_t;
    {33}new PrivK: SK_t;
    {34}let sn_4: GUID_t = GUID in
    {35}let Pk_2: PK_t = pk(PrivK) in
    {36}let Cert: Cert_t = sign_cert(sn_4,Pk_2,SN_CI,SK_CI) in
    {37}new DG_2: DomainGovernance_t;
    {38}new PP_2: ParticipantPermission_t;
    {39}new Qos: Qos_t;
    {40}let sn_5: GUID_t = GUID in
    {41}let DG_3: DomainGovernance_t = DG_2 in
    {42}let PP_3: ParticipantPermission_t = PP_2 in
    {43}let Perm: PermDoc_t = sign_perm(sn_5,DG_3,PP_3,SK_Perm) in
    {44}let DHAlgo: Algo_t = make_algo(ID_G,DH_RSA) in
    {45}out(RTPS_Ch, (GUID,PrivK,Cert,Perm,DHAlgo))
) | (
    {46}!
    {47}let GUIDA_1: GUID_t = GUIDA in
    {48}let PrivK_A: SK_t = PrivKA in
    {49}let HashAlgoA: Hash_alg_t = SHA256 in
    {50}let QoSA_1: Qos_t = QoSA in
    {51}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {52}let Topic_bd_1: TopicID_t = Topic_bd in
    {53}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {54}out(Discovery_ch, (GUIDA_1,PdataA));
    {55}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {56}event A_discover(PdataB);
    {57}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {58}new ChallengeA: bitstring;
    {59}new s[]: Seed_t;
    {60}let gx: element_t = dh_pub(g,dh_k(s)) in
    {61}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {62}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {63}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {64}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {65}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {66}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {67}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {68}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {69}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {70}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {71}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {72}let SharedSecret: bitstring = gxy_SharedSecret in
    {73}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {74}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {75}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {76}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {77}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {78}if (PermB_x = PermB_1) then
    {79}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {80}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {81}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {82}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {83}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {84}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {85}out(RTPS_Ch, CryptoToken);
    {86}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,encryptedApplicationData: bitstring));
    {87}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {88}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {89}let (applicationData: bitstring,=secretData) = aead_dec(AeadAlgoA,sessionKey,IV,cryptoHeader,encryptedApplicationData) in
    {90}event A_3(GUIDB_1,GUIDA_1,applicationData,cryptoHeader,sessionKey);
    {91}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {92}new sessionID_new: bitstring;
    {93}new IV_new: bitstring;
    {94}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {95}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {96}new applicationData_new: bitstring;
    {97}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {98}out(RTPS_Ch, (cryptoHeader_new,aead_enc(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {99}out(RTPS_Ch, finishA)
) | (
    {100}!
    {101}let GUIDB_2: GUID_t = GUIDB in
    {102}let PrivK_B: SK_t = PrivKB in
    {103}let HashAlgoB: Hash_alg_t = SHA256 in
    {104}let QosB_1: Qos_t = QosB in
    {105}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {106}let Topic_bd_2: TopicID_t = Topic_bd in
    {107}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {108}event B_discover(PdataB_1);
    {109}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {110}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {111}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {112}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {113}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {114}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {115}new ChallengeB_1: bitstring;
    {116}new s_1[]: Seed_t;
    {117}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {118}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {119}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {120}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {121}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {122}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {123}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {124}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {125}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {126}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {127}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {128}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {129}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {130}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
    {131}new Topic_1: TopicID_t;
    {132}event TOPIC_CRT_REQ(GUIDB_2,PermB,Topic_1);
    {133}out(Discovery_ch, (PermB,TopicCreateReq,Topic_1,PdataB_1));
    {134}in(RTPS_Ch, (=GUIDA_2,=PermissionChecked,=GUIDB_2,=Topic_1));
    {135}let KeyMaterial_1: KeyMaterial_t = KDF(SharedSecret_1,ChallengeA_1,ChallengeB_1) in
    {136}in(RTPS_Ch, CryptoToken_1: CryptoToken_t);
    {137}if decCryptoToken(CryptoToken_1,KeyMaterial_1,DHAlgoB,HashAlgoB,AeadAlgoB) then
    {138}new sessionID_1: bitstring;
    {139}new IV_1: bitstring;
    {140}let cryptoHeader_1: CryptoHeader_t = makeCryptoHeader(sessionID_1,IV_1) in
    {141}let sessionKey_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_1,KeyMaterial_1)) in
    {142}event B_2(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1,KeyMaterial_1,cryptoHeader_1,sessionKey_1);
    {143}new applicationData_1: bitstring;
    {144}event B_3(GUIDB_2,GUIDA_2,applicationData_1,cryptoHeader_1,sessionKey_1);
    {145}out(RTPS_Ch, (cryptoHeader_1,aead_enc(AeadAlgoB,sessionKey_1,IV_1,cryptoHeader_1,(applicationData_1,secretData))));
    {146}in(RTPS_Ch, (cryptoHeader_n: CryptoHeader_t,encryptedApplicationData_1: bitstring));
    {147}let makeCryptoHeader(sessionID_new_1: bitstring,IV_new_1: bitstring) = cryptoHeader_n in
    {148}if (sessionID_new_1 â‰  sessionID_1) then
    {149}let sessionKey_new_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_new_1,KeyMaterial_1)) in
    {150}let applicationData_new_1: bitstring = aead_dec(AeadAlgoB,sessionKey_new_1,IV_1,cryptoHeader_n,encryptedApplicationData_1) in
        {151}event KEY_UPDATE_end(GUIDA_2,GUIDB_2,cryptoHeader_n,sessionKey_new_1,applicationData_new_1);
        {152}out(RTPS_Ch, finishB)
    else
        {153}out(RTPS_Ch, finishB)
) | (
    {154}!
    {155}let Topic_bd_3: TopicID_t = Topic_bd in
    {156}in(Discovery_ch, (GUIDB_3: GUID_t,PdataB_2: Pdata_t));
    {157}let participant_data(=GUIDB_3,=Topic_bd_3,QosB_2: Qos_t,=discoveryRegister) = PdataB_2 in
    {158}in(Discovery_ch, (GUIDA_3: GUID_t,PdataA_2: Pdata_t));
    {159}let participant_data(=GUIDA_3,=Topic_bd_3,QosA: Qos_t,=discoveryRegister) = PdataA_2 in
    {160}event DISCOVERY(GUIDB_3,PdataB_2,GUIDA_3,PdataA_2);
    {161}out(Discovery_ch, (PdataB_2,discoveredParticipant,PdataA_2));
    {162}in(Discovery_ch, (PermB_2: PermDoc_t,=TopicCreateReq,Topic_2: TopicID_t,=PdataB_2));
    {163}event TOPIC_DISCOVERED(GUIDB_3,PermB_2,Topic_2);
    {164}out(Discovery_ch, (PermB_2,TopicDiscovered,Topic_2,PdataB_2));
    {165}out(RTPS_Ch, finishDiscovery)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{31}new Topic_bd: TopicID_t;
(
    {32}new GUID: GUID_t;
    {33}new PrivK: SK_t;
    {37}new DG_2: DomainGovernance_t;
    {38}new PP_2: ParticipantPermission_t;
    {39}new Qos: Qos_t;
    {44}let DHAlgo: Algo_t = make_algo(ID_G,DH_RSA) in
    {42}let PP_3: ParticipantPermission_t = PP_2 in
    {41}let DG_3: DomainGovernance_t = DG_2 in
    {40}let sn_5: GUID_t = GUID in
    {43}let Perm: PermDoc_t = sign_perm(sn_5,DG_3,PP_3,SK_Perm) in
    {35}let Pk_2: PK_t = pk(PrivK) in
    {34}let sn_4: GUID_t = GUID in
    {36}let Cert: Cert_t = sign_cert(sn_4,Pk_2,SN_CI,SK_CI) in
    {45}out(RTPS_Ch, (GUID,PrivK,Cert,Perm,DHAlgo))
) | (
    {46}!
    {52}let Topic_bd_1: TopicID_t = Topic_bd in
    {50}let QoSA_1: Qos_t = QoSA in
    {47}let GUIDA_1: GUID_t = GUIDA in
    {53}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {54}out(Discovery_ch, (GUIDA_1,PdataA));
    {55}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {56}event A_discover(PdataB);
    {17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
    {57}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {58}new ChallengeA: bitstring;
    {59}new s[]: Seed_t;
    {60}let gx: element_t = dh_pub(g,dh_k(s)) in
    {61}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {49}let HashAlgoA: Hash_alg_t = SHA256 in
    {15}let PP: ParticipantPermission_t = PPA in
    {14}let DG: DomainGovernance_t = DGA in
    {13}let sn_1: GUID_t = GUIDA in
    {16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
    {8}let Pk: PK_t = pk(PrivKA) in
    {7}let sn: GUID_t = GUIDA in
    {9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
    {62}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {64}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {63}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {65}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {66}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {67}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {68}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {69}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {70}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {74}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {71}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {72}let SharedSecret: bitstring = gxy_SharedSecret in
    {75}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {48}let PrivK_A: SK_t = PrivKA in
    {73}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {76}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {77}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {78}if (PermB_x = PermB_1) then
    {79}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {80}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {81}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {82}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {84}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {51}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {83}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {85}out(RTPS_Ch, CryptoToken);
    {86}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,encryptedApplicationData: bitstring));
    {87}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {88}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {89}let (applicationData: bitstring,=secretData) = aead_dec(AeadAlgoA,sessionKey,IV,cryptoHeader,encryptedApplicationData) in
    {90}event A_3(GUIDB_1,GUIDA_1,applicationData,cryptoHeader,sessionKey);
    {91}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {92}new sessionID_new: bitstring;
    {93}new IV_new: bitstring;
    {96}new applicationData_new: bitstring;
    {95}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {94}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {97}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {98}out(RTPS_Ch, (cryptoHeader_new,aead_enc(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {99}out(RTPS_Ch, finishA)
) | (
    {100}!
    {106}let Topic_bd_2: TopicID_t = Topic_bd in
    {104}let QosB_1: Qos_t = QosB in
    {101}let GUIDB_2: GUID_t = GUIDB in
    {107}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {108}event B_discover(PdataB_1);
    {109}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {110}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {103}let HashAlgoB: Hash_alg_t = SHA256 in
    {30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
    {111}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {112}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {113}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {114}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {115}new ChallengeB_1: bitstring;
    {116}new s_1[]: Seed_t;
    {117}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {118}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {21}let Pk_1: PK_t = pk(PrivKB) in
    {20}let sn_2: GUID_t = GUIDB in
    {22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
    {122}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {28}let PP_1: ParticipantPermission_t = PPB in
    {27}let DG_1: DomainGovernance_t = DGB in
    {26}let sn_3: GUID_t = GUIDB in
    {29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
    {119}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {123}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {120}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {102}let PrivK_B: SK_t = PrivKB in
    {121}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {124}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {125}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {126}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {127}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {128}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {129}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {130}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
    {131}new Topic_1: TopicID_t;
    {132}event TOPIC_CRT_REQ(GUIDB_2,PermB,Topic_1);
    {133}out(Discovery_ch, (PermB,TopicCreateReq,Topic_1,PdataB_1));
    {134}in(RTPS_Ch, (=GUIDA_2,=PermissionChecked,=GUIDB_2,=Topic_1));
    {136}in(RTPS_Ch, CryptoToken_1: CryptoToken_t);
    {135}let KeyMaterial_1: KeyMaterial_t = KDF(SharedSecret_1,ChallengeA_1,ChallengeB_1) in
    {105}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {137}if decCryptoToken(CryptoToken_1,KeyMaterial_1,DHAlgoB,HashAlgoB,AeadAlgoB) then
    {138}new sessionID_1: bitstring;
    {139}new IV_1: bitstring;
    {141}let sessionKey_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_1,KeyMaterial_1)) in
    {140}let cryptoHeader_1: CryptoHeader_t = makeCryptoHeader(sessionID_1,IV_1) in
    {142}event B_2(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1,KeyMaterial_1,cryptoHeader_1,sessionKey_1);
    {143}new applicationData_1: bitstring;
    {144}event B_3(GUIDB_2,GUIDA_2,applicationData_1,cryptoHeader_1,sessionKey_1);
    {145}out(RTPS_Ch, (cryptoHeader_1,aead_enc(AeadAlgoB,sessionKey_1,IV_1,cryptoHeader_1,(applicationData_1,secretData))));
    {146}in(RTPS_Ch, (cryptoHeader_n: CryptoHeader_t,encryptedApplicationData_1: bitstring));
    {147}let makeCryptoHeader(sessionID_new_1: bitstring,IV_new_1: bitstring) = cryptoHeader_n in
    {148}if (sessionID_new_1 â‰  sessionID_1) then
    {149}let sessionKey_new_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_new_1,KeyMaterial_1)) in
    {150}let applicationData_new_1: bitstring = aead_dec(AeadAlgoB,sessionKey_new_1,IV_1,cryptoHeader_n,encryptedApplicationData_1) in
        {151}event KEY_UPDATE_end(GUIDA_2,GUIDB_2,cryptoHeader_n,sessionKey_new_1,applicationData_new_1);
        {152}out(RTPS_Ch, finishB)
    else
        {153}out(RTPS_Ch, finishB)
) | (
    {154}!
    {156}in(Discovery_ch, (GUIDB_3: GUID_t,PdataB_2: Pdata_t));
    {155}let Topic_bd_3: TopicID_t = Topic_bd in
    {157}let participant_data(=GUIDB_3,=Topic_bd_3,QosB_2: Qos_t,=discoveryRegister) = PdataB_2 in
    {158}in(Discovery_ch, (GUIDA_3: GUID_t,PdataA_2: Pdata_t));
    {159}let participant_data(=GUIDA_3,=Topic_bd_3,QosA: Qos_t,=discoveryRegister) = PdataA_2 in
    {160}event DISCOVERY(GUIDB_3,PdataB_2,GUIDA_3,PdataA_2);
    {161}out(Discovery_ch, (PdataB_2,discoveredParticipant,PdataA_2));
    {162}in(Discovery_ch, (PermB_2: PermDoc_t,=TopicCreateReq,Topic_2: TopicID_t,=PdataB_2));
    {163}event TOPIC_DISCOVERED(GUIDB_3,PermB_2,Topic_2);
    {164}out(Discovery_ch, (PermB_2,TopicDiscovered,Topic_2,PdataB_2));
    {165}out(RTPS_Ch, finishDiscovery)
)

-- Query not attacker(secretData[]) in process 1.
Translating the process into Horn clauses...
Completing...
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect PkA_1:PK_t, GUIDA_4:GUID_t; attacker(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI)).
200 rules inserted. Base: 167 rules (61 with conclusion selected). Queue: 29 rules.
400 rules inserted. Base: 243 rules (81 with conclusion selected). Queue: 59 rules.
600 rules inserted. Base: 317 rules (81 with conclusion selected). Queue: 127 rules.
800 rules inserted. Base: 410 rules (83 with conclusion selected). Queue: 123 rules.
1000 rules inserted. Base: 538 rules (87 with conclusion selected). Queue: 47 rules.
1200 rules inserted. Base: 588 rules (87 with conclusion selected). Queue: 35 rules.
1400 rules inserted. Base: 628 rules (87 with conclusion selected). Queue: 15 rules.
1600 rules inserted. Base: 668 rules (101 with conclusion selected). Queue: 34 rules.
1800 rules inserted. Base: 614 rules (103 with conclusion selected). Queue: 103 rules.
2000 rules inserted. Base: 713 rules (104 with conclusion selected). Queue: 43 rules.
2200 rules inserted. Base: 779 rules (124 with conclusion selected). Queue: 17 rules.
2400 rules inserted. Base: 838 rules (125 with conclusion selected). Queue: 63 rules.
2600 rules inserted. Base: 935 rules (137 with conclusion selected). Queue: 5 rules.
Starting query not attacker(secretData[])
goal reachable: attacker(secretData[])

Derivation:
Abbreviations:
s_2 = s_1[!1 = @sid]
ChallengeB_2 = ChallengeB_1[gx_DHA_1 = dh_pub(ID_G,y_1),ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid]
applicationData_2 = applicationData_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,y_1),ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid]
sessionID_2 = sessionID_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,y_1),ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid]
IV_2 = IV_1[CryptoToken_1 = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128),sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,y_1),ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid]
Topic_3 = Topic_1[sigA_1 = sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))),gx_DHA_1 = dh_pub(ID_G,y_1),ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid]
ChallengeB_3 = ChallengeB_1[gx_DHA_1 = gx_DHA_2,ChallengeA_1 = ChallengeA_3,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid]
ChallengeB_4 = ChallengeB_1[gx_DHA_1 = gx_DHA_3,ChallengeA_1 = ChallengeA_4,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid_1]
s_3 = s_1[!1 = @sid_1]

1. The attacker has some term y_1.
attacker(y_1).

2. Using the function ID_G the attacker may obtain ID_G.
attacker(ID_G).

3. By 2, the attacker may know ID_G.
By 1, the attacker may know y_1.
Using the function dh_pub the attacker may obtain dh_pub(ID_G,y_1).
attacker(dh_pub(ID_G,y_1)).

4. The attacker has some term ChallengeA_2.
attacker(ChallengeA_2).

5. Using the function SHA256 the attacker may obtain SHA256.
attacker(SHA256).

6. Using the function DH_RSA the attacker may obtain DH_RSA.
attacker(DH_RSA).

7. By 2, the attacker may know ID_G.
By 6, the attacker may know DH_RSA.
Using the function make_algo the attacker may obtain make_algo(ID_G,DH_RSA).
attacker(make_algo(ID_G,DH_RSA)).

8. The attacker has some term PdataA_3.
attacker(PdataA_3).

9. The attacker has some term PermA_2.
attacker(PermA_2).

10. The message (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)) may be sent to the attacker at output {45}.
attacker((GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA))).

11. By 10, the attacker may know (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)).
Using the function 3-proj-5-tuple the attacker may obtain sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
attacker(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI)).

12. By 11, the attacker may know sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
By 9, the attacker may know PermA_2.
By 8, the attacker may know PdataA_3.
By 7, the attacker may know make_algo(ID_G,DH_RSA).
By 5, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).

13. By 5, the attacker may know SHA256.
By 12, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))).

14. By 12, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256).
By 13, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
By 4, the attacker may know ChallengeA_2.
By 3, the attacker may know dh_pub(ID_G,y_1).
Using the function 4-tuple the attacker may obtain (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1)).
attacker((make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1))).

15. Using the function discoveryRegister the attacker may obtain discoveryRegister.
attacker(discoveryRegister).

16. The message (GUIDB[],participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)) may be sent to the attacker at output {109}.
attacker((GUIDB[],participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister))).

17. By 16, the attacker may know (GUIDB[],participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)).
Using the function 2-proj-2-tuple the attacker may obtain participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister).
attacker(participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)).

18. By 17, the attacker may know participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister).
Using the function 3-proj-participant_data the attacker may obtain QosB[].
attacker(QosB[]).

19. The message (GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)) may be sent to the attacker at output {54}.
attacker((GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister))).

20. By 19, the attacker may know (GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).
Using the function 2-proj-2-tuple the attacker may obtain participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
attacker(participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).

21. By 20, the attacker may know participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
Using the function 2-proj-participant_data the attacker may obtain Topic_bd[].
attacker(Topic_bd[]).

22. By 16, the attacker may know (GUIDB[],participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)).
Using the function 1-proj-2-tuple the attacker may obtain GUIDB[].
attacker(GUIDB[]).

23. By 22, the attacker may know GUIDB[].
By 21, the attacker may know Topic_bd[].
By 18, the attacker may know QosB[].
By 15, the attacker may know discoveryRegister.
Using the function participant_data the attacker may obtain participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister).
attacker(participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)).

24. The attacker has some term gx_DHA_3.
attacker(gx_DHA_3).

25. The attacker has some term ChallengeA_4.
attacker(ChallengeA_4).

26. The attacker has some term PdataA_5.
attacker(PdataA_5).

27. The attacker has some term PermA_4.
attacker(PermA_4).

28. By 11, the attacker may know sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
By 27, the attacker may know PermA_4.
By 26, the attacker may know PdataA_5.
By 7, the attacker may know make_algo(ID_G,DH_RSA).
By 5, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)).

29. By 5, the attacker may know SHA256.
By 28, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256))).

30. By 28, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256).
By 29, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)).
By 25, the attacker may know ChallengeA_4.
By 24, the attacker may know gx_DHA_3.
Using the function 4-tuple the attacker may obtain (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_4,gx_DHA_3).
attacker((make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_4,gx_DHA_3)).

31. The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_4,gx_DHA_3) that the attacker may have by 30 may be received at input {110}.
So the message (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_4,ChallengeB_4,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_3,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_4,dh_pub(ID_G,dh_k(s_3)),ChallengeA_4,gx_DHA_3,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256))))) may be sent to the attacker at output {124}.
attacker((make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_4,ChallengeB_4,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_3,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_4,dh_pub(ID_G,dh_k(s_3)),ChallengeA_4,gx_DHA_3,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)))))).

32. By 31, the attacker may know (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_4,ChallengeB_4,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_3,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_4,dh_pub(ID_G,dh_k(s_3)),ChallengeA_4,gx_DHA_3,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_4,PdataA_5,make_algo(ID_G,DH_RSA),SHA256))))).
Using the function 1-proj-8-tuple the attacker may obtain make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).

33. By 32, the attacker may know make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
Using the function 2-proj-make_C_list the attacker may obtain sign_perm(GUIDB[],DGB[],PPB[],SK_Perm).
attacker(sign_perm(GUIDB[],DGB[],PPB[],SK_Perm)).

34. By 32, the attacker may know make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
Using the function 1-proj-make_C_list the attacker may obtain sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI).
attacker(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI)).

35. By 34, the attacker may know sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI).
By 33, the attacker may know sign_perm(GUIDB[],DGB[],PPB[],SK_Perm).
By 23, the attacker may know participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister).
By 7, the attacker may know make_algo(ID_G,DH_RSA).
By 5, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).

36. By 5, the attacker may know SHA256.
By 35, the attacker may know make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).

37. The attacker has some term gx_DHA_2.
attacker(gx_DHA_2).

38. The attacker has some term ChallengeA_3.
attacker(ChallengeA_3).

39. The attacker has some term PdataA_4.
attacker(PdataA_4).

40. The attacker has some term PermA_3.
attacker(PermA_3).

41. By 11, the attacker may know sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
By 40, the attacker may know PermA_3.
By 39, the attacker may know PdataA_4.
By 7, the attacker may know make_algo(ID_G,DH_RSA).
By 5, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)).

42. By 5, the attacker may know SHA256.
By 41, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256))).

43. By 41, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256).
By 42, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)).
By 38, the attacker may know ChallengeA_3.
By 37, the attacker may know gx_DHA_2.
Using the function 4-tuple the attacker may obtain (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,gx_DHA_2).
attacker((make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,gx_DHA_2)).

44. The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,gx_DHA_2) that the attacker may have by 43 may be received at input {110}.
So the message (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,ChallengeB_3,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_3,dh_pub(ID_G,dh_k(s_2)),ChallengeA_3,gx_DHA_2,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256))))) may be sent to the attacker at output {124}.
attacker((make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,ChallengeB_3,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_3,dh_pub(ID_G,dh_k(s_2)),ChallengeA_3,gx_DHA_2,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)))))).

45. By 44, the attacker may know (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_3,ChallengeB_3,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_3,dh_pub(ID_G,dh_k(s_2)),ChallengeA_3,gx_DHA_2,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_3,PdataA_4,make_algo(ID_G,DH_RSA),SHA256))))).
Using the function 5-proj-8-tuple the attacker may obtain dh_pub(ID_G,dh_k(s_2)).
attacker(dh_pub(ID_G,dh_k(s_2))).

46. The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1)) that the attacker may have by 14 may be received at input {110}.
So the message (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,y_1),sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,dh_pub(ID_G,y_1),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))))) may be sent to the attacker at output {124}.
attacker((make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,y_1),sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,dh_pub(ID_G,y_1),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)))))).

47. By 46, the attacker may know (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,y_1),sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,dh_pub(ID_G,y_1),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))))).
Using the function 4-proj-8-tuple the attacker may obtain ChallengeB_2.
attacker(ChallengeB_2).

48. By 13, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
By 4, the attacker may know ChallengeA_2.
By 3, the attacker may know dh_pub(ID_G,y_1).
By 47, the attacker may know ChallengeB_2.
By 45, the attacker may know dh_pub(ID_G,dh_k(s_2)).
By 36, the attacker may know hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
Using the function 6-tuple the attacker may obtain (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).
attacker((hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).

49. By 10, the attacker may know (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)).
Using the function 2-proj-5-tuple the attacker may obtain PrivK[].
attacker(PrivK[]).

50. By 49, the attacker may know PrivK[].
By 48, the attacker may know (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).
Using the function sign the attacker may obtain sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).
attacker(sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))).

51. By 13, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
By 36, the attacker may know hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
By 3, the attacker may know dh_pub(ID_G,y_1).
By 45, the attacker may know dh_pub(ID_G,dh_k(s_2)).
By 4, the attacker may know ChallengeA_2.
By 47, the attacker may know ChallengeB_2.
By 50, the attacker may know sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).
Using the function 7-tuple the attacker may obtain (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,y_1),dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,ChallengeB_2,sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))).
attacker((hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,y_1),dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,ChallengeB_2,sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))))).

52. The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1)) that the attacker may have by 14 may be received at input {110}.
The message (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,y_1),dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,ChallengeB_2,sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))) that the attacker may have by 51 may be received at input {125}.
So the message (sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),TopicCreateReq,Topic_3,participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)) may be sent to the attacker at output {133}.
attacker((sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),TopicCreateReq,Topic_3,participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister))).

53. By 52, the attacker may know (sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),TopicCreateReq,Topic_3,participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister)).
Using the function 3-proj-4-tuple the attacker may obtain Topic_3.
attacker(Topic_3).

54. Using the function PermissionChecked the attacker may obtain PermissionChecked.
attacker(PermissionChecked).

55. By 10, the attacker may know (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)).
Using the function 1-proj-5-tuple the attacker may obtain GUID[].
attacker(GUID[]).

56. By 55, the attacker may know GUID[].
By 54, the attacker may know PermissionChecked.
By 22, the attacker may know GUIDB[].
By 53, the attacker may know Topic_3.
Using the function 4-tuple the attacker may obtain (GUID[],PermissionChecked,GUIDB[],Topic_3).
attacker((GUID[],PermissionChecked,GUIDB[],Topic_3)).

57. Using the function AES_GCM_128 the attacker may obtain AES_GCM_128.
attacker(AES_GCM_128).

58. By 45, the attacker may know dh_pub(ID_G,dh_k(s_2)).
By 1, the attacker may know y_1.
Using the function dh_exp the attacker may obtain dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)).
attacker(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2))).

59. By 58, the attacker may know dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)).
By 4, the attacker may know ChallengeA_2.
By 47, the attacker may know ChallengeB_2.
Using the function KDF the attacker may obtain KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2).
attacker(KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2)).

60. By 59, the attacker may know KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2).
By 7, the attacker may know make_algo(ID_G,DH_RSA).
By 5, the attacker may know SHA256.
By 57, the attacker may know AES_GCM_128.
Using the function encCryptoToken the attacker may obtain encCryptoToken(KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128).
attacker(encCryptoToken(KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128)).

61. The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1)) that the attacker may have by 14 may be received at input {110}.
The message (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,y_1),dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,ChallengeB_2,sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,y_1),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))) that the attacker may have by 51 may be received at input {125}.
The message (GUID[],PermissionChecked,GUIDB[],Topic_3) that the attacker may have by 56 may be received at input {134}.
The message encCryptoToken(KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128) that the attacker may have by 60 may be received at input {136}.
So the message (makeCryptoHeader(sessionID_2,IV_2),aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[]))) may be sent to the attacker at output {145}.
attacker((makeCryptoHeader(sessionID_2,IV_2),aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[])))).

62. By 61, the attacker may know (makeCryptoHeader(sessionID_2,IV_2),aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[]))).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[])).
attacker(aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[]))).

63. By 61, the attacker may know (makeCryptoHeader(sessionID_2,IV_2),aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[]))).
Using the function 1-proj-2-tuple the attacker may obtain makeCryptoHeader(sessionID_2,IV_2).
attacker(makeCryptoHeader(sessionID_2,IV_2)).

64. By 63, the attacker may know makeCryptoHeader(sessionID_2,IV_2).
Using the function 2-proj-makeCryptoHeader the attacker may obtain IV_2.
attacker(IV_2).

65. By 63, the attacker may know makeCryptoHeader(sessionID_2,IV_2).
Using the function 1-proj-makeCryptoHeader the attacker may obtain sessionID_2.
attacker(sessionID_2).

66. By 65, the attacker may know sessionID_2.
By 64, the attacker may know IV_2.
Using the function makeCryptoHeader the attacker may obtain makeCryptoHeader(sessionID_2,IV_2).
attacker(makeCryptoHeader(sessionID_2,IV_2)).

67. By 65, the attacker may know sessionID_2.
By 59, the attacker may know KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2).
Using the function 2-tuple the attacker may obtain (sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2)).
attacker((sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2))).

68. By 5, the attacker may know SHA256.
By 59, the attacker may know KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2).
By 67, the attacker may know (sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2)).
Using the function hmac the attacker may obtain hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2))).
attacker(hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2)))).

69. By 57, the attacker may know AES_GCM_128.
By 68, the attacker may know hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2))).
By 64, the attacker may know IV_2.
By 66, the attacker may know makeCryptoHeader(sessionID_2,IV_2).
By 62, the attacker may know aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2),(sessionID_2,KDF(dh_exp(dh_pub(ID_G,y_1),dh_k(s_2)),ChallengeA_2,ChallengeB_2))),IV_2,makeCryptoHeader(sessionID_2,IV_2),(applicationData_2,secretData[])).
Using the function aead_dec the attacker may obtain (applicationData_2,secretData[]).
attacker((applicationData_2,secretData[])).

70. By 69, the attacker may know (applicationData_2,secretData[]).
Using the function 2-proj-2-tuple the attacker may obtain secretData[].
attacker(secretData[]).

71. By 70, attacker(secretData[]).
The goal is reached, represented in the following fact:
attacker(secretData[]).


Unified gx_DHA_2 with dh_pub(ID_G,y_1)
Unified ChallengeA_3 with ChallengeA_2
Unified PdataA_4 with PdataA_3
Unified PermA_3 with PermA_2
The clause after UnifyDerivationPrecise is
attacker(secretData[])
This clause still contradicts the query.
A more detailed output of the traces is available with
  set traceDisplay = long.

out(RTPS_Ch, ~M) with ~M = pk(SK_CI) at {2}

out(RTPS_Ch, ~M_1) with ~M_1 = pk(SK_Perm) at {4}

new GUIDA: GUID_t creating GUIDA_4 at {5}

new PrivKA: SK_t creating PrivKA_1 at {6}

new DGA: DomainGovernance_t creating DGA_1 at {10}

new PPA: ParticipantPermission_t creating PPA_1 at {11}

new QoSA: Qos_t creating QoSA_2 at {12}

new GUIDB: GUID_t creating GUIDB_4 at {18}

new PrivKB: SK_t creating PrivKB_1 at {19}

new DGB: DomainGovernance_t creating DGB_2 at {23}

new PPB: ParticipantPermission_t creating PPB_2 at {24}

new QosB: Qos_t creating QosB_3 at {25}

new Topic_bd: TopicID_t creating Topic_bd_4 at {31}

event B_discover(participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister)) at {108} in copy a

out(Discovery_ch, (~M_2,participant_data(~M_3,~M_4,~M_5,~M_6))) with ~M_2 = GUIDB_4, ~M_3 = GUIDB_4, ~M_4 = Topic_bd_4, ~M_5 = QosB_3, ~M_6 = discoveryRegister at {109} in copy a

event B_discover(participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister)) at {108} in copy a_1

out(Discovery_ch, (~M_7,participant_data(~M_8,~M_9,~M_10,~M_11))) with ~M_7 = GUIDB_4, ~M_8 = GUIDB_4, ~M_9 = Topic_bd_4, ~M_10 = QosB_3, ~M_11 = discoveryRegister at {109} in copy a_1

event B_discover(participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister)) at {108} in copy a_2

out(Discovery_ch, (~M_12,participant_data(~M_13,~M_14,~M_15,~M_16))) with ~M_12 = GUIDB_4, ~M_13 = GUIDB_4, ~M_14 = Topic_bd_4, ~M_15 = QosB_3, ~M_16 = discoveryRegister at {109} in copy a_2

out(Discovery_ch, (~M_17,participant_data(~M_18,~M_19,~M_20,~M_21))) with ~M_17 = GUIDA_4, ~M_18 = GUIDA_4, ~M_19 = Topic_bd_4, ~M_20 = QoSA_2, ~M_21 = discoveryRegister at {54} in copy a_3

new GUID: GUID_t creating GUID_1 at {32}

new PrivK: SK_t creating PrivK_1 at {33}

new DG_2: DomainGovernance_t creating DG_4 at {37}

new PP_2: ParticipantPermission_t creating PP_4 at {38}

new Qos: Qos_t creating Qos_1 at {39}

out(RTPS_Ch, (~M_22,~M_23,~M_24,~M_25,make_algo(~M_26,~M_27))) with ~M_22 = GUID_1, ~M_23 = PrivK_1, ~M_24 = sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI), ~M_25 = sign_perm(GUID_1,DG_4,PP_4,SK_Perm), ~M_26 = ID_G, ~M_27 = DH_RSA at {45}

in(RTPS_Ch, (make_C_list(~M_24,a_4,a_5,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(~M_24,a_4,a_5,make_algo(ID_G,DH_RSA),SHA256)),a_6,a_7)) with ~M_24 = sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI), hash(SHA256,make_C_list(~M_24,a_4,a_5,make_algo(ID_G,DH_RSA),SHA256)) = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_4,a_5,make_algo(ID_G,DH_RSA),SHA256)) at {110} in copy a_2

new ChallengeB_1: bitstring creating ChallengeB_5 at {115} in copy a_2

new s_1: Seed_t creating s_4 at {116} in copy a_2

event beginAtoB(GUIDB_4,sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),a_6) at {122} in copy a_2

event B_0(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_5,dh_pub(ID_G,dh_k(s_4)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_4,a_5,make_algo(ID_G,DH_RSA),SHA256),a_6,a_7) at {123} in copy a_2

out(RTPS_Ch, (make_C_list(~M_28,~M_29,participant_data(~M_30,~M_31,~M_32,~M_33),make_algo(~M_34,~M_35),~M_36),~M_37,~M_38,~M_39,~M_40,~M_41,~M_42,~M_43)) with ~M_28 = sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI), ~M_29 = sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm), ~M_30 = GUIDB_4, ~M_31 = Topic_bd_4, ~M_32 = QosB_3, ~M_33 = discoveryRegister, ~M_34 = ID_G, ~M_35 = DH_RSA, ~M_36 = SHA256, ~M_37 = hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_38 = a_6, ~M_39 = ChallengeB_5, ~M_40 = dh_pub(ID_G,dh_k(s_4)), ~M_41 = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_4,a_5,make_algo(ID_G,DH_RSA),SHA256)), ~M_42 = a_7, ~M_43 = sign(PrivKB_1,(hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_5,dh_pub(ID_G,dh_k(s_4)),a_6,a_7,hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_4,a_5,make_algo(ID_G,DH_RSA),SHA256)))) at {124} in copy a_2

in(RTPS_Ch, (make_C_list(~M_24,a_8,a_9,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(~M_24,a_8,a_9,make_algo(ID_G,DH_RSA),SHA256)),a_10,dh_pub(ID_G,a_11))) with ~M_24 = sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI), hash(SHA256,make_C_list(~M_24,a_8,a_9,make_algo(ID_G,DH_RSA),SHA256)) = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_8,a_9,make_algo(ID_G,DH_RSA),SHA256)) at {110} in copy a

new ChallengeB_1: bitstring creating ChallengeB_6 at {115} in copy a

new s_1: Seed_t creating s_5 at {116} in copy a

event beginAtoB(GUIDB_4,sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),a_10) at {122} in copy a

event B_0(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_6,dh_pub(ID_G,dh_k(s_5)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_8,a_9,make_algo(ID_G,DH_RSA),SHA256),a_10,dh_pub(ID_G,a_11)) at {123} in copy a

out(RTPS_Ch, (make_C_list(~M_44,~M_45,participant_data(~M_46,~M_47,~M_48,~M_49),make_algo(~M_50,~M_51),~M_52),~M_53,~M_54,~M_55,~M_56,~M_57,~M_58,~M_59)) with ~M_44 = sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI), ~M_45 = sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm), ~M_46 = GUIDB_4, ~M_47 = Topic_bd_4, ~M_48 = QosB_3, ~M_49 = discoveryRegister, ~M_50 = ID_G, ~M_51 = DH_RSA, ~M_52 = SHA256, ~M_53 = hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_54 = a_10, ~M_55 = ChallengeB_6, ~M_56 = dh_pub(ID_G,dh_k(s_5)), ~M_57 = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_8,a_9,make_algo(ID_G,DH_RSA),SHA256)), ~M_58 = dh_pub(ID_G,a_11), ~M_59 = sign(PrivKB_1,(hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_6,dh_pub(ID_G,dh_k(s_5)),a_10,dh_pub(ID_G,a_11),hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_8,a_9,make_algo(ID_G,DH_RSA),SHA256)))) at {124} in copy a

in(RTPS_Ch, (hash(SHA256,make_C_list(~M_24,a_8,a_9,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(~M_28,~M_29,participant_data(~M_2,~M_4,~M_5,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,a_11),~M_56,a_10,~M_55,sign(~M_23,(hash(SHA256,make_C_list(~M_24,a_8,a_9,make_algo(ID_G,DH_RSA),SHA256)),a_10,dh_pub(ID_G,a_11),~M_55,~M_56,hash(SHA256,make_C_list(~M_28,~M_29,participant_data(~M_2,~M_4,~M_5,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))))) with hash(SHA256,make_C_list(~M_24,a_8,a_9,make_algo(ID_G,DH_RSA),SHA256)) = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_8,a_9,make_algo(ID_G,DH_RSA),SHA256)), hash(SHA256,make_C_list(~M_28,~M_29,participant_data(~M_2,~M_4,~M_5,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)) = hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_56 = dh_pub(ID_G,dh_k(s_5)), ~M_55 = ChallengeB_6, sign(~M_23,(hash(SHA256,make_C_list(~M_24,a_8,a_9,make_algo(ID_G,DH_RSA),SHA256)),a_10,dh_pub(ID_G,a_11),~M_55,~M_56,hash(SHA256,make_C_list(~M_28,~M_29,participant_data(~M_2,~M_4,~M_5,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))) = sign(PrivK_1,(hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_8,a_9,make_algo(ID_G,DH_RSA),SHA256)),a_10,dh_pub(ID_G,a_11),ChallengeB_6,dh_pub(ID_G,dh_k(s_5)),hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))) at {125} in copy a

event endBtoA(GUID_1,sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),ChallengeB_6) at {127} in copy a

event B_1(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_6,dh_pub(ID_G,dh_k(s_5)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_8,a_9,make_algo(ID_G,DH_RSA),SHA256),a_10,dh_pub(ID_G,a_11),dh_exp(dh_pub(ID_G,a_11),dh_k(s_5))) at {130} in copy a

new Topic_1: TopicID_t creating Topic_4 at {131} in copy a

event TOPIC_CRT_REQ(GUIDB_4,sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),Topic_4) at {132} in copy a

out(Discovery_ch, (~M_60,~M_61,~M_62,participant_data(~M_63,~M_64,~M_65,~M_66))) with ~M_60 = sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm), ~M_61 = TopicCreateReq, ~M_62 = Topic_4, ~M_63 = GUIDB_4, ~M_64 = Topic_bd_4, ~M_65 = QosB_3, ~M_66 = discoveryRegister at {133} in copy a

in(RTPS_Ch, (~M_22,PermissionChecked,~M_2,~M_62)) with ~M_22 = GUID_1, ~M_2 = GUIDB_4, ~M_62 = Topic_4 at {134} in copy a

in(RTPS_Ch, encCryptoToken(KDF(dh_exp(~M_56,a_11),a_10,~M_55),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128)) with encCryptoToken(KDF(dh_exp(~M_56,a_11),a_10,~M_55),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128) = encCryptoToken(KDF(dh_exp(dh_pub(ID_G,a_11),dh_k(s_5)),a_10,ChallengeB_6),make_algo(ID_G,DH_RSA),SHA256,AES_GCM_128) at {136} in copy a

new sessionID_1: bitstring creating sessionID_3 at {138} in copy a

new IV_1: bitstring creating IV_3 at {139} in copy a

event B_2(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_6,dh_pub(ID_G,dh_k(s_5)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_8,a_9,make_algo(ID_G,DH_RSA),SHA256),a_10,dh_pub(ID_G,a_11),dh_exp(dh_pub(ID_G,a_11),dh_k(s_5)),KDF(dh_exp(dh_pub(ID_G,a_11),dh_k(s_5)),a_10,ChallengeB_6),makeCryptoHeader(sessionID_3,IV_3),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,a_11),dh_k(s_5)),a_10,ChallengeB_6),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,a_11),dh_k(s_5)),a_10,ChallengeB_6)))) at {142} in copy a

new applicationData_1: bitstring creating applicationData_3 at {143} in copy a

event B_3(GUIDB_4,GUID_1,applicationData_3,makeCryptoHeader(sessionID_3,IV_3),hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,a_11),dh_k(s_5)),a_10,ChallengeB_6),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,a_11),dh_k(s_5)),a_10,ChallengeB_6)))) at {144} in copy a

out(RTPS_Ch, (makeCryptoHeader(~M_67,~M_68),~M_69)) with ~M_67 = sessionID_3, ~M_68 = IV_3, ~M_69 = aead_enc(AES_GCM_128,hmac(SHA256,KDF(dh_exp(dh_pub(ID_G,a_11),dh_k(s_5)),a_10,ChallengeB_6),(sessionID_3,KDF(dh_exp(dh_pub(ID_G,a_11),dh_k(s_5)),a_10,ChallengeB_6))),IV_3,makeCryptoHeader(sessionID_3,IV_3),(applicationData_3,secretData)) at {145} in copy a

The attacker has the message 2-proj-2-tuple(aead_dec(AES_GCM_128,hmac(SHA256,KDF(dh_exp(~M_56,a_11),a_10,~M_55),(~M_67,KDF(dh_exp(~M_56,a_11),a_10,~M_55))),~M_68,makeCryptoHeader(~M_67,~M_68),~M_69)) = secretData.
A trace has been found.
RESULT not attacker(secretData[]) is false.

--------------------------------------------------------------
Verification summary:

Query not attacker(secretData[]) is false.

--------------------------------------------------------------

