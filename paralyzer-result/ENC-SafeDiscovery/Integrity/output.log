Linear part:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Completing equations...
Completed equations:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{7}let sn: GUID_t = GUIDA in
{8}let Pk: PK_t = pk(PrivKA) in
{9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{13}let sn_1: GUID_t = GUIDA in
{14}let DG: DomainGovernance_t = DGA in
{15}let PP: ParticipantPermission_t = PPA in
{16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
{17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{20}let sn_2: GUID_t = GUIDB in
{21}let Pk_1: PK_t = pk(PrivKB) in
{22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{26}let sn_3: GUID_t = GUIDB in
{27}let DG_1: DomainGovernance_t = DGB in
{28}let PP_1: ParticipantPermission_t = PPB in
{29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
{30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
{31}new Topic_bd: TopicID_t;
(
    0
) | (
    {32}!
    {33}let GUIDA_1: GUID_t = GUIDA in
    {34}let PrivK_A: SK_t = PrivKA in
    {35}let HashAlgoA: Hash_alg_t = SHA256 in
    {36}let QoSA_1: Qos_t = QoSA in
    {37}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {38}let Topic_bd_1: TopicID_t = Topic_bd in
    {39}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {40}out(Discovery_ch, (GUIDA_1,PdataA));
    {41}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {42}event A_discover(PdataB);
    {43}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {44}new ChallengeA: bitstring;
    {45}new s[]: Seed_t;
    {46}let gx: element_t = dh_pub(g,dh_k(s)) in
    {47}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {48}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {49}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {50}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {51}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {52}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {53}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {54}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {55}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {56}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {57}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {58}let SharedSecret: bitstring = gxy_SharedSecret in
    {59}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {60}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {61}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {62}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {63}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {64}if (PermB_x = PermB_1) then
    {65}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {66}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {67}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {68}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {69}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {70}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {71}out(RTPS_Ch, CryptoToken);
    {72}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,encryptedApplicationData: bitstring));
    {73}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {74}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {75}let (applicationData: bitstring,=secretData) = aead_dec(AeadAlgoA,sessionKey,IV,cryptoHeader,encryptedApplicationData) in
    {76}event A_3(GUIDB_1,GUIDA_1,applicationData,cryptoHeader,sessionKey);
    {77}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {78}new sessionID_new: bitstring;
    {79}new IV_new: bitstring;
    {80}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {81}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {82}new applicationData_new: bitstring;
    {83}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {84}out(RTPS_Ch, (cryptoHeader_new,aead_enc(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {85}out(RTPS_Ch, finishA)
) | (
    {86}!
    {87}let GUIDB_2: GUID_t = GUIDB in
    {88}let PrivK_B: SK_t = PrivKB in
    {89}let HashAlgoB: Hash_alg_t = SHA256 in
    {90}let QosB_1: Qos_t = QosB in
    {91}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {92}let Topic_bd_2: TopicID_t = Topic_bd in
    {93}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {94}event B_discover(PdataB_1);
    {95}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {96}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {97}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {98}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {99}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {100}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {101}new ChallengeB_1: bitstring;
    {102}new s_1[]: Seed_t;
    {103}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {104}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {105}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {106}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {107}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {108}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {109}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {110}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {111}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {112}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {113}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {114}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {115}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {116}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
