Linear part:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Completing equations...
Completed equations:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{7}let sn: GUID_t = GUIDA in
{8}let Pk: PK_t = pk(PrivKA) in
{9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{13}let sn_1: GUID_t = GUIDA in
{14}let DG: DomainGovernance_t = DGA in
{15}let PP: ParticipantPermission_t = PPA in
{16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
{17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{20}let sn_2: GUID_t = GUIDB in
{21}let Pk_1: PK_t = pk(PrivKB) in
{22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{26}let sn_3: GUID_t = GUIDB in
{27}let DG_1: DomainGovernance_t = DGB in
{28}let PP_1: ParticipantPermission_t = PPB in
{29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
{30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
{31}new Topic_bd: TopicID_t;
(
    {32}out(RTPS_Ch, SK_CI)
) | (
    {33}!
    {34}let GUIDA_1: GUID_t = GUIDA in
    {35}let PrivK_A: SK_t = PrivKA in
    {36}let HashAlgoA: Hash_alg_t = SHA256 in
    {37}let QoSA_1: Qos_t = QoSA in
    {38}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {39}let Topic_bd_1: TopicID_t = Topic_bd in
    {40}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {41}out(Discovery_ch, (GUIDA_1,PdataA));
    {42}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {43}event A_discover(PdataB);
    {44}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {45}new ChallengeA: bitstring;
    {46}new s[]: Seed_t;
    {47}let gx: element_t = dh_pub(g,dh_k(s)) in
    {48}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {49}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {50}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {51}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {52}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {53}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {54}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {55}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {56}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {57}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {58}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {59}let SharedSecret: bitstring = gxy_SharedSecret in
    {60}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {61}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {62}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {63}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {64}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {65}if (PermB_x = PermB_1) then
    {66}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {67}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {68}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {69}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {70}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {71}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {72}out(RTPS_Ch, CryptoToken);
    {73}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,encryptedApplicationData: bitstring));
    {74}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {75}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {76}let (applicationData: bitstring,=secretData) = aead_dec(AeadAlgoA,sessionKey,IV,cryptoHeader,encryptedApplicationData) in
    {77}event A_3(GUIDB_1,GUIDA_1,applicationData,cryptoHeader,sessionKey);
    {78}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {79}new sessionID_new: bitstring;
    {80}new IV_new: bitstring;
    {81}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {82}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {83}new applicationData_new: bitstring;
    {84}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {85}out(RTPS_Ch, (cryptoHeader_new,aead_enc(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {86}out(RTPS_Ch, finishA)
) | (
    {87}!
    {88}let GUIDB_2: GUID_t = GUIDB in
    {89}let PrivK_B: SK_t = PrivKB in
    {90}let HashAlgoB: Hash_alg_t = SHA256 in
    {91}let QosB_1: Qos_t = QosB in
    {92}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {93}let Topic_bd_2: TopicID_t = Topic_bd in
    {94}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {95}event B_discover(PdataB_1);
    {96}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {97}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {98}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {99}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {100}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {101}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {102}new ChallengeB_1: bitstring;
    {103}new s_1[]: Seed_t;
    {104}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {105}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {106}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {107}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {108}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {109}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {110}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {111}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {112}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {113}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {114}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {115}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {116}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {117}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
    {118}new Topic_1: TopicID_t;
    {119}event TOPIC_CRT_REQ(GUIDB_2,PermB,Topic_1);
    {120}out(Discovery_ch, (PermB,TopicCreateReq,Topic_1,PdataB_1));
    {121}in(RTPS_Ch, (=GUIDA_2,=PermissionChecked,=GUIDB_2,=Topic_1));
    {122}let KeyMaterial_1: KeyMaterial_t = KDF(SharedSecret_1,ChallengeA_1,ChallengeB_1) in
    {123}in(RTPS_Ch, CryptoToken_1: CryptoToken_t);
    {124}if decCryptoToken(CryptoToken_1,KeyMaterial_1,DHAlgoB,HashAlgoB,AeadAlgoB) then
    {125}new sessionID_1: bitstring;
    {126}new IV_1: bitstring;
    {127}let cryptoHeader_1: CryptoHeader_t = makeCryptoHeader(sessionID_1,IV_1) in
    {128}let sessionKey_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_1,KeyMaterial_1)) in
    {129}event B_2(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1,KeyMaterial_1,cryptoHeader_1,sessionKey_1);
    {130}new applicationData_1: bitstring;
    {131}event B_3(GUIDB_2,GUIDA_2,applicationData_1,cryptoHeader_1,sessionKey_1);
    {132}out(RTPS_Ch, (cryptoHeader_1,aead_enc(AeadAlgoB,sessionKey_1,IV_1,cryptoHeader_1,(applicationData_1,secretData))));
    {133}in(RTPS_Ch, (cryptoHeader_n: CryptoHeader_t,encryptedApplicationData_1: bitstring));
    {134}let makeCryptoHeader(sessionID_new_1: bitstring,IV_new_1: bitstring) = cryptoHeader_n in
    {135}if (sessionID_new_1 â‰  sessionID_1) then
    {136}let sessionKey_new_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_new_1,KeyMaterial_1)) in
    {137}let applicationData_new_1: bitstring = aead_dec(AeadAlgoB,sessionKey_new_1,IV_1,cryptoHeader_n,encryptedApplicationData_1) in
        {138}event KEY_UPDATE_end(GUIDA_2,GUIDB_2,cryptoHeader_n,sessionKey_new_1,applicationData_new_1);
        {139}out(RTPS_Ch, finishB)
    else
        {140}out(RTPS_Ch, finishB)
) | (
    {141}!
    {142}let Topic_bd_3: TopicID_t = Topic_bd in
    {143}in(Discovery_ch, (GUIDB_3: GUID_t,PdataB_2: Pdata_t));
    {144}let participant_data(=GUIDB_3,=Topic_bd_3,QosB_2: Qos_t,=discoveryRegister) = PdataB_2 in
    {145}in(Discovery_ch, (GUIDA_3: GUID_t,PdataA_2: Pdata_t));
    {146}let participant_data(=GUIDA_3,=Topic_bd_3,QosA: Qos_t,=discoveryRegister) = PdataA_2 in
    {147}event DISCOVERY(GUIDB_3,PdataB_2,GUIDA_3,PdataA_2);
    {148}out(Discovery_ch, (PdataB_2,discoveredParticipant,PdataA_2));
    {149}in(Discovery_ch, (PermB_2: PermDoc_t,=TopicCreateReq,Topic_2: TopicID_t,=PdataB_2));
    {150}event TOPIC_DISCOVERED(GUIDB_3,PermB_2,Topic_2);
    {151}out(Discovery_ch, (PermB_2,TopicDiscovered,Topic_2,PdataB_2));
    {152}out(RTPS_Ch, finishDiscovery)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{31}new Topic_bd: TopicID_t;
(
    {32}out(RTPS_Ch, SK_CI)
) | (
    {33}!
    {39}let Topic_bd_1: TopicID_t = Topic_bd in
    {37}let QoSA_1: Qos_t = QoSA in
    {34}let GUIDA_1: GUID_t = GUIDA in
    {40}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {41}out(Discovery_ch, (GUIDA_1,PdataA));
    {42}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {43}event A_discover(PdataB);
    {17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
    {44}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {45}new ChallengeA: bitstring;
    {46}new s[]: Seed_t;
    {47}let gx: element_t = dh_pub(g,dh_k(s)) in
    {48}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {36}let HashAlgoA: Hash_alg_t = SHA256 in
    {15}let PP: ParticipantPermission_t = PPA in
    {14}let DG: DomainGovernance_t = DGA in
    {13}let sn_1: GUID_t = GUIDA in
    {16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
    {8}let Pk: PK_t = pk(PrivKA) in
    {7}let sn: GUID_t = GUIDA in
    {9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
    {49}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {51}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {50}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {52}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {53}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {54}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {55}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {56}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {57}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {61}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {58}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {59}let SharedSecret: bitstring = gxy_SharedSecret in
    {62}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {35}let PrivK_A: SK_t = PrivKA in
    {60}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {63}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {64}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {65}if (PermB_x = PermB_1) then
    {66}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {67}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {68}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {69}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {71}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {38}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {70}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {72}out(RTPS_Ch, CryptoToken);
    {73}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,encryptedApplicationData: bitstring));
    {74}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {75}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {76}let (applicationData: bitstring,=secretData) = aead_dec(AeadAlgoA,sessionKey,IV,cryptoHeader,encryptedApplicationData) in
    {77}event A_3(GUIDB_1,GUIDA_1,applicationData,cryptoHeader,sessionKey);
    {78}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {79}new sessionID_new: bitstring;
    {80}new IV_new: bitstring;
    {83}new applicationData_new: bitstring;
    {82}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {81}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {84}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {85}out(RTPS_Ch, (cryptoHeader_new,aead_enc(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {86}out(RTPS_Ch, finishA)
) | (
    {87}!
    {93}let Topic_bd_2: TopicID_t = Topic_bd in
    {91}let QosB_1: Qos_t = QosB in
    {88}let GUIDB_2: GUID_t = GUIDB in
    {94}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {95}event B_discover(PdataB_1);
    {96}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {97}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {90}let HashAlgoB: Hash_alg_t = SHA256 in
    {30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
    {98}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {99}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {100}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {101}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {102}new ChallengeB_1: bitstring;
    {103}new s_1[]: Seed_t;
    {104}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {105}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {21}let Pk_1: PK_t = pk(PrivKB) in
    {20}let sn_2: GUID_t = GUIDB in
    {22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
    {109}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {28}let PP_1: ParticipantPermission_t = PPB in
    {27}let DG_1: DomainGovernance_t = DGB in
    {26}let sn_3: GUID_t = GUIDB in
    {29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
    {106}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {110}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {107}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {89}let PrivK_B: SK_t = PrivKB in
    {108}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {111}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {112}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {113}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {114}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {115}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {116}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {117}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
    {118}new Topic_1: TopicID_t;
    {119}event TOPIC_CRT_REQ(GUIDB_2,PermB,Topic_1);
    {120}out(Discovery_ch, (PermB,TopicCreateReq,Topic_1,PdataB_1));
    {121}in(RTPS_Ch, (=GUIDA_2,=PermissionChecked,=GUIDB_2,=Topic_1));
    {123}in(RTPS_Ch, CryptoToken_1: CryptoToken_t);
    {122}let KeyMaterial_1: KeyMaterial_t = KDF(SharedSecret_1,ChallengeA_1,ChallengeB_1) in
    {92}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {124}if decCryptoToken(CryptoToken_1,KeyMaterial_1,DHAlgoB,HashAlgoB,AeadAlgoB) then
    {125}new sessionID_1: bitstring;
    {126}new IV_1: bitstring;
    {128}let sessionKey_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_1,KeyMaterial_1)) in
    {127}let cryptoHeader_1: CryptoHeader_t = makeCryptoHeader(sessionID_1,IV_1) in
    {129}event B_2(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1,KeyMaterial_1,cryptoHeader_1,sessionKey_1);
    {130}new applicationData_1: bitstring;
    {131}event B_3(GUIDB_2,GUIDA_2,applicationData_1,cryptoHeader_1,sessionKey_1);
    {132}out(RTPS_Ch, (cryptoHeader_1,aead_enc(AeadAlgoB,sessionKey_1,IV_1,cryptoHeader_1,(applicationData_1,secretData))));
    {133}in(RTPS_Ch, (cryptoHeader_n: CryptoHeader_t,encryptedApplicationData_1: bitstring));
    {134}let makeCryptoHeader(sessionID_new_1: bitstring,IV_new_1: bitstring) = cryptoHeader_n in
    {135}if (sessionID_new_1 â‰  sessionID_1) then
    {136}let sessionKey_new_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_new_1,KeyMaterial_1)) in
    {137}let applicationData_new_1: bitstring = aead_dec(AeadAlgoB,sessionKey_new_1,IV_1,cryptoHeader_n,encryptedApplicationData_1) in
        {138}event KEY_UPDATE_end(GUIDA_2,GUIDB_2,cryptoHeader_n,sessionKey_new_1,applicationData_new_1);
        {139}out(RTPS_Ch, finishB)
    else
        {140}out(RTPS_Ch, finishB)
) | (
    {141}!
    {143}in(Discovery_ch, (GUIDB_3: GUID_t,PdataB_2: Pdata_t));
    {142}let Topic_bd_3: TopicID_t = Topic_bd in
    {144}let participant_data(=GUIDB_3,=Topic_bd_3,QosB_2: Qos_t,=discoveryRegister) = PdataB_2 in
    {145}in(Discovery_ch, (GUIDA_3: GUID_t,PdataA_2: Pdata_t));
    {146}let participant_data(=GUIDA_3,=Topic_bd_3,QosA: Qos_t,=discoveryRegister) = PdataA_2 in
    {147}event DISCOVERY(GUIDB_3,PdataB_2,GUIDA_3,PdataA_2);
    {148}out(Discovery_ch, (PdataB_2,discoveredParticipant,PdataA_2));
    {149}in(Discovery_ch, (PermB_2: PermDoc_t,=TopicCreateReq,Topic_2: TopicID_t,=PdataB_2));
    {150}event TOPIC_DISCOVERED(GUIDB_3,PermB_2,Topic_2);
    {151}out(Discovery_ch, (PermB_2,TopicDiscovered,Topic_2,PdataB_2));
    {152}out(RTPS_Ch, finishDiscovery)
)

-- Query event(B_0(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2)) ==> event(A_0(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,PdataB_3)) in process 1.
Translating the process into Horn clauses...
Completing...
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect PkA_1:PK_t, GUIDA_4:GUID_t; attacker(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI)).
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect PdataA_3:Pdata_t, PermA_2:PermDoc_t, PkA_1:PK_t, GUIDA_4:GUID_t; attacker(hash(SHA256,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))).
200 rules inserted. Base: 163 rules (56 with conclusion selected). Queue: 28 rules.
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect PdataA_3:Pdata_t, PermA_2:PermDoc_t; attacker(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))).
400 rules inserted. Base: 242 rules (80 with conclusion selected). Queue: 58 rules.
600 rules inserted. Base: 324 rules (80 with conclusion selected). Queue: 110 rules.
800 rules inserted. Base: 387 rules (80 with conclusion selected). Queue: 125 rules.
1000 rules inserted. Base: 512 rules (81 with conclusion selected). Queue: 70 rules.
1200 rules inserted. Base: 601 rules (86 with conclusion selected). Queue: 48 rules.
1400 rules inserted. Base: 723 rules (89 with conclusion selected). Queue: 95 rules.
1600 rules inserted. Base: 723 rules (89 with conclusion selected). Queue: 101 rules.
1800 rules inserted. Base: 760 rules (89 with conclusion selected). Queue: 110 rules.
2000 rules inserted. Base: 840 rules (89 with conclusion selected). Queue: 105 rules.
2200 rules inserted. Base: 926 rules (89 with conclusion selected). Queue: 37 rules.
2400 rules inserted. Base: 913 rules (103 with conclusion selected). Queue: 49 rules.
2600 rules inserted. Base: 959 rules (103 with conclusion selected). Queue: 112 rules.
2800 rules inserted. Base: 999 rules (103 with conclusion selected). Queue: 163 rules.
3000 rules inserted. Base: 1034 rules (103 with conclusion selected). Queue: 150 rules.
3200 rules inserted. Base: 1050 rules (105 with conclusion selected). Queue: 151 rules.
3400 rules inserted. Base: 1099 rules (105 with conclusion selected). Queue: 67 rules.
3600 rules inserted. Base: 1103 rules (119 with conclusion selected). Queue: 48 rules.
3800 rules inserted. Base: 1141 rules (140 with conclusion selected). Queue: 58 rules.
4000 rules inserted. Base: 1187 rules (141 with conclusion selected). Queue: 111 rules.
4200 rules inserted. Base: 1263 rules (144 with conclusion selected). Queue: 85 rules.
4400 rules inserted. Base: 1305 rules (156 with conclusion selected). Queue: 16 rules.
Starting query event(B_0(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2)) ==> event(A_0(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,PdataB_3))
goal reachable: attacker(GUIDA_4) && attacker(PkA_1) && attacker(PermA_2) && attacker(PdataA_3) && attacker(ChallengeA_2) && attacker(gx_DHA_2) -> event(B_0(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUIDA_4,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2))
Abbreviations:
ChallengeB_2 = ChallengeB_1[gx_DHA_1 = gx_DHA_2,ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid]
s_2 = s_1[!1 = @sid]

Derivation:
Abbreviations:
ChallengeB_2 = ChallengeB_1[gx_DHA_1 = gx_DHA_2,ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid]
s_2 = s_1[!1 = @sid]

1. We assume as hypothesis that
attacker(gx_DHA_2).

2. We assume as hypothesis that
attacker(ChallengeA_2).

3. Using the function SHA256 the attacker may obtain SHA256.
attacker(SHA256).

4. Using the function DH_RSA the attacker may obtain DH_RSA.
attacker(DH_RSA).

5. Using the function ID_G the attacker may obtain ID_G.
attacker(ID_G).

6. By 5, the attacker may know ID_G.
By 4, the attacker may know DH_RSA.
Using the function make_algo the attacker may obtain make_algo(ID_G,DH_RSA).
attacker(make_algo(ID_G,DH_RSA)).

7. We assume as hypothesis that
attacker(PdataA_3).

8. We assume as hypothesis that
attacker(PermA_2).

9. The message SK_CI may be sent to the attacker at output {32}.
attacker(SK_CI).

10. Using the function SN_CI the attacker may obtain SN_CI.
attacker(SN_CI).

11. We assume as hypothesis that
attacker(PkA_1).

12. We assume as hypothesis that
attacker(GUIDA_4).

13. By 12, the attacker may know GUIDA_4.
By 11, the attacker may know PkA_1.
By 10, the attacker may know SN_CI.
By 9, the attacker may know SK_CI.
Using the function sign_cert the attacker may obtain sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI).
attacker(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI)).

14. By 13, the attacker may know sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI).
By 8, the attacker may know PermA_2.
By 7, the attacker may know PdataA_3.
By 6, the attacker may know make_algo(ID_G,DH_RSA).
By 3, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).

15. By 3, the attacker may know SHA256.
By 14, the attacker may know make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))).

16. By 14, the attacker may know make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256).
By 15, the attacker may know hash(SHA256,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
By 2, the attacker may know ChallengeA_2.
By 1, the attacker may know gx_DHA_2.
Using the function 4-tuple the attacker may obtain (make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2).
attacker((make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2)).

17. The message (make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2) that the attacker may have by 16 may be received at input {97}.
So event B_0(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUIDA_4,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2) may be executed at {110}.
event(B_0(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUIDA_4,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2)).

18. By 17, event(B_0(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUIDA_4,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2)).
The goal is reached, represented in the following fact:
event(B_0(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUIDA_4,make_C_list(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2)).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(RTPS_Ch, ~M) with ~M = pk(SK_CI) at {2}

out(RTPS_Ch, ~M_1) with ~M_1 = pk(SK_Perm) at {4}

new GUIDA: GUID_t creating GUIDA_5 at {5}

new PrivKA: SK_t creating PrivKA_1 at {6}

new DGA: DomainGovernance_t creating DGA_1 at {10}

new PPA: ParticipantPermission_t creating PPA_1 at {11}

new QoSA: Qos_t creating QoSA_2 at {12}

new GUIDB: GUID_t creating GUIDB_4 at {18}

new PrivKB: SK_t creating PrivKB_1 at {19}

new DGB: DomainGovernance_t creating DGB_2 at {23}

new PPB: ParticipantPermission_t creating PPB_2 at {24}

new QosB: Qos_t creating QosB_3 at {25}

new Topic_bd: TopicID_t creating Topic_bd_4 at {31}

event B_discover(participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister)) at {95} in copy a

out(Discovery_ch, (~M_2,participant_data(~M_3,~M_4,~M_5,~M_6))) with ~M_2 = GUIDB_4, ~M_3 = GUIDB_4, ~M_4 = Topic_bd_4, ~M_5 = QosB_3, ~M_6 = discoveryRegister at {96} in copy a

out(RTPS_Ch, ~M_7) with ~M_7 = SK_CI at {32}

in(RTPS_Ch, (make_C_list(sign_cert(a_1,a_2,SN_CI,~M_7),a_3,a_4,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(a_1,a_2,SN_CI,~M_7),a_3,a_4,make_algo(ID_G,DH_RSA),SHA256)),a_5,a_6)) with sign_cert(a_1,a_2,SN_CI,~M_7) = sign_cert(a_1,a_2,SN_CI,SK_CI), hash(SHA256,make_C_list(sign_cert(a_1,a_2,SN_CI,~M_7),a_3,a_4,make_algo(ID_G,DH_RSA),SHA256)) = hash(SHA256,make_C_list(sign_cert(a_1,a_2,SN_CI,SK_CI),a_3,a_4,make_algo(ID_G,DH_RSA),SHA256)) at {97} in copy a

new ChallengeB_1: bitstring creating ChallengeB_3 at {102} in copy a

new s_1: Seed_t creating s_3 at {103} in copy a

event beginAtoB(GUIDB_4,sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),a_5) at {109} in copy a

event B_0(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),a_1,make_C_list(sign_cert(a_1,a_2,SN_CI,SK_CI),a_3,a_4,make_algo(ID_G,DH_RSA),SHA256),a_5,a_6) at {110} in copy a (goal)

The event B_0(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),a_1,make_C_list(sign_cert(a_1,a_2,SN_CI,SK_CI),a_3,a_4,make_algo(ID_G,DH_RSA),SHA256),a_5,a_6) is executed at {110} in copy a.
A trace has been found.
RESULT event(B_0(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2)) ==> event(A_0(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,PdataB_3)) is false.

--------------------------------------------------------------
Verification summary:

Query event(B_0(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2)) ==> event(A_0(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,PdataB_3)) is false.

--------------------------------------------------------------

