Linear part:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Completing equations...
Completed equations:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{7}let sn: GUID_t = GUIDA in
{8}let Pk: PK_t = pk(PrivKA) in
{9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{13}let sn_1: GUID_t = GUIDA in
{14}let DG: DomainGovernance_t = DGA in
{15}let PP: ParticipantPermission_t = PPA in
{16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
{17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{20}let sn_2: GUID_t = GUIDB in
{21}let Pk_1: PK_t = pk(PrivKB) in
{22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{26}let sn_3: GUID_t = GUIDB in
{27}let DG_1: DomainGovernance_t = DGB in
{28}let PP_1: ParticipantPermission_t = PPB in
{29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
{30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
{31}new Topic_bd: TopicID_t;
(
    {32}out(RTPS_Ch, SK_Perm)
) | (
    {33}!
    {34}let GUIDA_1: GUID_t = GUIDA in
    {35}let PrivK_A: SK_t = PrivKA in
    {36}let HashAlgoA: Hash_alg_t = SHA256 in
    {37}let QoSA_1: Qos_t = QoSA in
    {38}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {39}let Topic_bd_1: TopicID_t = Topic_bd in
    {40}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {41}out(Discovery_ch, (GUIDA_1,PdataA));
    {42}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {43}event A_discover(PdataB);
    {44}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {45}new ChallengeA: bitstring;
    {46}new s[]: Seed_t;
    {47}let gx: element_t = dh_pub(g,dh_k(s)) in
    {48}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {49}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {50}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {51}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {52}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {53}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {54}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {55}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {56}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {57}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {58}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {59}let SharedSecret: bitstring = gxy_SharedSecret in
    {60}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {61}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {62}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {63}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {64}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {65}if (PermB_x = PermB_1) then
    {66}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {67}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {68}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {69}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {70}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {71}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {72}out(RTPS_Ch, CryptoToken);
    {73}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,applicationData_x: bitstring,applicationDataMAC: bitstring));
    {74}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {75}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {76}if aead_mac_check(AeadAlgoA,sessionKey,IV,cryptoHeader,applicationData_x,applicationDataMAC) then
    {77}event A_3(GUIDB_1,GUIDA_1,applicationData_x,cryptoHeader,sessionKey);
    {78}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {79}new sessionID_new: bitstring;
    {80}new IV_new: bitstring;
    {81}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {82}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {83}new applicationData_new: bitstring;
    {84}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {85}out(RTPS_Ch, (cryptoHeader_new,applicationData_new,aead_mac(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {86}out(RTPS_Ch, finishA)
) | (
    {87}!
    {88}let GUIDB_2: GUID_t = GUIDB in
    {89}let PrivK_B: SK_t = PrivKB in
    {90}let HashAlgoB: Hash_alg_t = SHA256 in
    {91}let QosB_1: Qos_t = QosB in
    {92}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {93}let Topic_bd_2: TopicID_t = Topic_bd in
    {94}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {95}event B_discover(PdataB_1);
    {96}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {97}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {98}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {99}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {100}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {101}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {102}new ChallengeB_1: bitstring;
    {103}new s_1[]: Seed_t;
    {104}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {105}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {106}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {107}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {108}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {109}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {110}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {111}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {112}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {113}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {114}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {115}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {116}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {117}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
    {118}new Topic_1: TopicID_t;
    {119}event TOPIC_CRT_REQ(GUIDB_2,PermB,Topic_1);
    {120}out(Discovery_ch, (PermB,TopicCreateReq,Topic_1,PdataB_1));
    {121}in(RTPS_Ch, (=GUIDA_2,=PermissionChecked,=GUIDB_2,=Topic_1));
    {122}let KeyMaterial_1: KeyMaterial_t = KDF(SharedSecret_1,ChallengeA_1,ChallengeB_1) in
    {123}in(RTPS_Ch, CryptoToken_1: CryptoToken_t);
    {124}if decCryptoToken(CryptoToken_1,KeyMaterial_1,DHAlgoB,HashAlgoB,AeadAlgoB) then
    {125}new sessionID_1: bitstring;
    {126}new IV_1: bitstring;
    {127}let cryptoHeader_1: CryptoHeader_t = makeCryptoHeader(sessionID_1,IV_1) in
    {128}let sessionKey_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_1,KeyMaterial_1)) in
    {129}event B_2(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1,KeyMaterial_1,cryptoHeader_1,sessionKey_1);
    {130}new applicationData_MAC: bitstring;
    {131}event B_3(GUIDB_2,GUIDA_2,applicationData_MAC,cryptoHeader_1,sessionKey_1);
    {132}out(RTPS_Ch, (cryptoHeader_1,(applicationData_MAC,secretData),aead_mac(AeadAlgoB,sessionKey_1,IV_1,cryptoHeader_1,(applicationData_MAC,secretData))));
    {133}in(RTPS_Ch, (cryptoHeader_n: CryptoHeader_t,applicationData_x_new: bitstring,applicationDataMAC_new: bitstring));
    {134}let makeCryptoHeader(sessionID_new_1: bitstring,IV_new_1: bitstring) = cryptoHeader_n in
    {135}if (sessionID_new_1 â‰  sessionID_1) then
    {136}let sessionKey_new_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_new_1,KeyMaterial_1)) in
    {137}if aead_mac_check(AeadAlgoB,sessionKey_new_1,IV_new_1,cryptoHeader_n,applicationData_x_new,applicationDataMAC_new) then
        {138}event KEY_UPDATE_end(GUIDA_2,GUIDB_2,cryptoHeader_n,sessionKey_new_1,applicationData_x_new);
        {139}out(RTPS_Ch, finishB)
    else
        {140}out(RTPS_Ch, finishB)
) | (
    {141}!
    {142}let Topic_bd_3: TopicID_t = Topic_bd in
    {143}in(Discovery_ch, (GUIDB_3: GUID_t,PdataB_2: Pdata_t));
    {144}let participant_data(=GUIDB_3,=Topic_bd_3,QosB_2: Qos_t,=discoveryRegister) = PdataB_2 in
    {145}in(Discovery_ch, (GUIDA_3: GUID_t,PdataA_2: Pdata_t));
    {146}let participant_data(=GUIDA_3,=Topic_bd_3,QosA: Qos_t,=discoveryRegister) = PdataA_2 in
    {147}event DISCOVERY(GUIDB_3,PdataB_2,GUIDA_3,PdataA_2);
    {148}out(Discovery_ch, (PdataB_2,discoveredParticipant,PdataA_2));
    {149}in(Discovery_ch, (PermB_2: PermDoc_t,=TopicCreateReq,Topic_2: TopicID_t,=PdataB_2));
    {150}event TOPIC_DISCOVERED(GUIDB_3,PermB_2,Topic_2);
    {151}out(Discovery_ch, (PermB_2,TopicDiscovered,Topic_2,PdataB_2));
    {152}out(RTPS_Ch, finishDiscovery)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{31}new Topic_bd: TopicID_t;
(
    {32}out(RTPS_Ch, SK_Perm)
) | (
    {33}!
    {39}let Topic_bd_1: TopicID_t = Topic_bd in
    {37}let QoSA_1: Qos_t = QoSA in
    {34}let GUIDA_1: GUID_t = GUIDA in
    {40}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {41}out(Discovery_ch, (GUIDA_1,PdataA));
    {42}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {43}event A_discover(PdataB);
    {17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
    {44}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {45}new ChallengeA: bitstring;
    {46}new s[]: Seed_t;
    {47}let gx: element_t = dh_pub(g,dh_k(s)) in
    {48}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {36}let HashAlgoA: Hash_alg_t = SHA256 in
    {15}let PP: ParticipantPermission_t = PPA in
    {14}let DG: DomainGovernance_t = DGA in
    {13}let sn_1: GUID_t = GUIDA in
    {16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
    {8}let Pk: PK_t = pk(PrivKA) in
    {7}let sn: GUID_t = GUIDA in
    {9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
    {49}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {51}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {50}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {52}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {53}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {54}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {55}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {56}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {57}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {61}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {58}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {59}let SharedSecret: bitstring = gxy_SharedSecret in
    {62}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {35}let PrivK_A: SK_t = PrivKA in
    {60}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {63}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {64}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {65}if (PermB_x = PermB_1) then
    {66}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {67}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {68}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {69}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {71}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {38}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {70}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {72}out(RTPS_Ch, CryptoToken);
    {73}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,applicationData_x: bitstring,applicationDataMAC: bitstring));
    {74}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {75}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {76}if aead_mac_check(AeadAlgoA,sessionKey,IV,cryptoHeader,applicationData_x,applicationDataMAC) then
    {77}event A_3(GUIDB_1,GUIDA_1,applicationData_x,cryptoHeader,sessionKey);
    {78}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {79}new sessionID_new: bitstring;
    {80}new IV_new: bitstring;
    {83}new applicationData_new: bitstring;
    {82}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {81}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {84}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {85}out(RTPS_Ch, (cryptoHeader_new,applicationData_new,aead_mac(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {86}out(RTPS_Ch, finishA)
) | (
    {87}!
    {93}let Topic_bd_2: TopicID_t = Topic_bd in
    {91}let QosB_1: Qos_t = QosB in
    {88}let GUIDB_2: GUID_t = GUIDB in
    {94}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {95}event B_discover(PdataB_1);
    {96}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {97}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {90}let HashAlgoB: Hash_alg_t = SHA256 in
    {30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
    {98}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {99}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {100}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {101}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {102}new ChallengeB_1: bitstring;
    {103}new s_1[]: Seed_t;
    {104}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {105}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {21}let Pk_1: PK_t = pk(PrivKB) in
    {20}let sn_2: GUID_t = GUIDB in
    {22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
    {109}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {28}let PP_1: ParticipantPermission_t = PPB in
    {27}let DG_1: DomainGovernance_t = DGB in
    {26}let sn_3: GUID_t = GUIDB in
    {29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
    {106}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {110}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {107}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {89}let PrivK_B: SK_t = PrivKB in
    {108}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {111}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {112}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {113}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {114}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {115}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {116}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {117}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
    {118}new Topic_1: TopicID_t;
    {119}event TOPIC_CRT_REQ(GUIDB_2,PermB,Topic_1);
    {120}out(Discovery_ch, (PermB,TopicCreateReq,Topic_1,PdataB_1));
    {121}in(RTPS_Ch, (=GUIDA_2,=PermissionChecked,=GUIDB_2,=Topic_1));
    {123}in(RTPS_Ch, CryptoToken_1: CryptoToken_t);
    {122}let KeyMaterial_1: KeyMaterial_t = KDF(SharedSecret_1,ChallengeA_1,ChallengeB_1) in
    {92}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {124}if decCryptoToken(CryptoToken_1,KeyMaterial_1,DHAlgoB,HashAlgoB,AeadAlgoB) then
    {125}new sessionID_1: bitstring;
    {126}new IV_1: bitstring;
    {128}let sessionKey_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_1,KeyMaterial_1)) in
    {127}let cryptoHeader_1: CryptoHeader_t = makeCryptoHeader(sessionID_1,IV_1) in
    {129}event B_2(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1,KeyMaterial_1,cryptoHeader_1,sessionKey_1);
    {130}new applicationData_MAC: bitstring;
    {131}event B_3(GUIDB_2,GUIDA_2,applicationData_MAC,cryptoHeader_1,sessionKey_1);
    {132}out(RTPS_Ch, (cryptoHeader_1,(applicationData_MAC,secretData),aead_mac(AeadAlgoB,sessionKey_1,IV_1,cryptoHeader_1,(applicationData_MAC,secretData))));
    {133}in(RTPS_Ch, (cryptoHeader_n: CryptoHeader_t,applicationData_x_new: bitstring,applicationDataMAC_new: bitstring));
    {134}let makeCryptoHeader(sessionID_new_1: bitstring,IV_new_1: bitstring) = cryptoHeader_n in
    {135}if (sessionID_new_1 â‰  sessionID_1) then
    {136}let sessionKey_new_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_new_1,KeyMaterial_1)) in
    {137}if aead_mac_check(AeadAlgoB,sessionKey_new_1,IV_new_1,cryptoHeader_n,applicationData_x_new,applicationDataMAC_new) then
        {138}event KEY_UPDATE_end(GUIDA_2,GUIDB_2,cryptoHeader_n,sessionKey_new_1,applicationData_x_new);
        {139}out(RTPS_Ch, finishB)
    else
        {140}out(RTPS_Ch, finishB)
) | (
    {141}!
    {143}in(Discovery_ch, (GUIDB_3: GUID_t,PdataB_2: Pdata_t));
    {142}let Topic_bd_3: TopicID_t = Topic_bd in
    {144}let participant_data(=GUIDB_3,=Topic_bd_3,QosB_2: Qos_t,=discoveryRegister) = PdataB_2 in
    {145}in(Discovery_ch, (GUIDA_3: GUID_t,PdataA_2: Pdata_t));
    {146}let participant_data(=GUIDA_3,=Topic_bd_3,QosA: Qos_t,=discoveryRegister) = PdataA_2 in
    {147}event DISCOVERY(GUIDB_3,PdataB_2,GUIDA_3,PdataA_2);
    {148}out(Discovery_ch, (PdataB_2,discoveredParticipant,PdataA_2));
    {149}in(Discovery_ch, (PermB_2: PermDoc_t,=TopicCreateReq,Topic_2: TopicID_t,=PdataB_2));
    {150}event TOPIC_DISCOVERED(GUIDB_3,PermB_2,Topic_2);
    {151}out(Discovery_ch, (PermB_2,TopicDiscovered,Topic_2,PdataB_2));
    {152}out(RTPS_Ch, finishDiscovery)
)

-- Query not (event(TOPIC_DISCOVERED(GUIDB_4,PermB_3,Topic_3)) && attacker(PermA_2) && attacker(PermB_3) && attacker(PdataA_3) && attacker(PdataB_3) && attacker(Topic_3)) in process 1.
Translating the process into Horn clauses...
Completing...
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect PkA_1:PK_t, GUIDA_4:GUID_t; attacker(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI)).
200 rules inserted. Base: 173 rules (56 with conclusion selected). Queue: 25 rules.
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect PdataA_3:Pdata_t, PermA_2:PermDoc_t; attacker(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))).
400 rules inserted. Base: 263 rules (75 with conclusion selected). Queue: 47 rules.
600 rules inserted. Base: 352 rules (75 with conclusion selected). Queue: 118 rules.
800 rules inserted. Base: 446 rules (75 with conclusion selected). Queue: 91 rules.
1000 rules inserted. Base: 543 rules (75 with conclusion selected). Queue: 26 rules.
1200 rules inserted. Base: 589 rules (79 with conclusion selected). Queue: 11 rules.
1400 rules inserted. Base: 589 rules (88 with conclusion selected). Queue: 18 rules.
1600 rules inserted. Base: 613 rules (88 with conclusion selected). Queue: 61 rules.
Starting query not (event(TOPIC_DISCOVERED(GUIDB_4,PermB_3,Topic_3)) && attacker(PermA_2) && attacker(PermB_3) && attacker(PdataA_3) && attacker(PdataB_3) && attacker(Topic_3))
goal reachable: attacker(GUIDB_4) && attacker(PermA_2) && attacker(PermB_3) && attacker(PdataA_3) && attacker(PdataB_3) && attacker(Topic_3) -> event(TOPIC_DISCOVERED(GUIDB_4,PermB_3,Topic_3)) && attacker(PermA_2) && attacker(PermB_3) && attacker(PdataA_3) && attacker(PdataB_3) && attacker(Topic_3)

Derivation:

1. We assume as hypothesis that
attacker(Topic_3).

2. We assume as hypothesis that
attacker(PdataB_3).

3. We assume as hypothesis that
attacker(PdataA_3).

4. We assume as hypothesis that
attacker(PermB_3).

5. We assume as hypothesis that
attacker(PermA_2).

6. Using the function discoveryRegister the attacker may obtain discoveryRegister.
attacker(discoveryRegister).

7. The attacker has some term QosB_3.
attacker(QosB_3).

8. The message (GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)) may be sent to the attacker at output {41}.
attacker((GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister))).

9. By 8, the attacker may know (GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).
Using the function 2-proj-2-tuple the attacker may obtain participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
attacker(participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).

10. By 9, the attacker may know participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
Using the function 2-proj-participant_data the attacker may obtain Topic_bd[].
attacker(Topic_bd[]).

11. We assume as hypothesis that
attacker(GUIDB_4).

12. By 11, the attacker may know GUIDB_4.
By 10, the attacker may know Topic_bd[].
By 7, the attacker may know QosB_3.
By 6, the attacker may know discoveryRegister.
Using the function participant_data the attacker may obtain participant_data(GUIDB_4,Topic_bd[],QosB_3,discoveryRegister).
attacker(participant_data(GUIDB_4,Topic_bd[],QosB_3,discoveryRegister)).

13. By 11, the attacker may know GUIDB_4.
By 12, the attacker may know participant_data(GUIDB_4,Topic_bd[],QosB_3,discoveryRegister).
Using the function 2-tuple the attacker may obtain (GUIDB_4,participant_data(GUIDB_4,Topic_bd[],QosB_3,discoveryRegister)).
attacker((GUIDB_4,participant_data(GUIDB_4,Topic_bd[],QosB_3,discoveryRegister))).

14. The attacker has some term QosA_1.
attacker(QosA_1).

15. The attacker has some term GUIDA_4.
attacker(GUIDA_4).

16. By 15, the attacker may know GUIDA_4.
By 10, the attacker may know Topic_bd[].
By 14, the attacker may know QosA_1.
By 6, the attacker may know discoveryRegister.
Using the function participant_data the attacker may obtain participant_data(GUIDA_4,Topic_bd[],QosA_1,discoveryRegister).
attacker(participant_data(GUIDA_4,Topic_bd[],QosA_1,discoveryRegister)).

17. By 15, the attacker may know GUIDA_4.
By 16, the attacker may know participant_data(GUIDA_4,Topic_bd[],QosA_1,discoveryRegister).
Using the function 2-tuple the attacker may obtain (GUIDA_4,participant_data(GUIDA_4,Topic_bd[],QosA_1,discoveryRegister)).
attacker((GUIDA_4,participant_data(GUIDA_4,Topic_bd[],QosA_1,discoveryRegister))).

18. Using the function TopicCreateReq the attacker may obtain TopicCreateReq.
attacker(TopicCreateReq).

19. By 4, the attacker may know PermB_3.
By 18, the attacker may know TopicCreateReq.
By 1, the attacker may know Topic_3.
By 12, the attacker may know participant_data(GUIDB_4,Topic_bd[],QosB_3,discoveryRegister).
Using the function 4-tuple the attacker may obtain (PermB_3,TopicCreateReq,Topic_3,participant_data(GUIDB_4,Topic_bd[],QosB_3,discoveryRegister)).
attacker((PermB_3,TopicCreateReq,Topic_3,participant_data(GUIDB_4,Topic_bd[],QosB_3,discoveryRegister))).

20. The message (GUIDB_4,participant_data(GUIDB_4,Topic_bd[],QosB_3,discoveryRegister)) that the attacker may have by 13 may be received at input {143}.
The message (GUIDA_4,participant_data(GUIDA_4,Topic_bd[],QosA_1,discoveryRegister)) that the attacker may have by 17 may be received at input {145}.
The message (PermB_3,TopicCreateReq,Topic_3,participant_data(GUIDB_4,Topic_bd[],QosB_3,discoveryRegister)) that the attacker may have by 19 may be received at input {149}.
So event TOPIC_DISCOVERED(GUIDB_4,PermB_3,Topic_3) may be executed at {150}.
event(TOPIC_DISCOVERED(GUIDB_4,PermB_3,Topic_3)).

21. By 20, event(TOPIC_DISCOVERED(GUIDB_4,PermB_3,Topic_3)).
By 5, attacker(PermA_2).
By 4, attacker(PermB_3).
By 3, attacker(PdataA_3).
By 2, attacker(PdataB_3).
By 1, attacker(Topic_3).
The goals are reached, combined in the following fact:
event(TOPIC_DISCOVERED(GUIDB_4,PermB_3,Topic_3)) && attacker(PermA_2) && attacker(PermB_3) && attacker(PdataA_3) && attacker(PdataB_3) && attacker(Topic_3).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(RTPS_Ch, ~M) with ~M = pk(SK_CI) at {2}

out(RTPS_Ch, ~M_1) with ~M_1 = pk(SK_Perm) at {4}

new GUIDA: GUID_t creating GUIDA_5 at {5}

new PrivKA: SK_t creating PrivKA_1 at {6}

new DGA: DomainGovernance_t creating DGA_1 at {10}

new PPA: ParticipantPermission_t creating PPA_1 at {11}

new QoSA: Qos_t creating QoSA_2 at {12}

new GUIDB: GUID_t creating GUIDB_5 at {18}

new PrivKB: SK_t creating PrivKB_1 at {19}

new DGB: DomainGovernance_t creating DGB_2 at {23}

new PPB: ParticipantPermission_t creating PPB_2 at {24}

new QosB: Qos_t creating QosB_4 at {25}

new Topic_bd: TopicID_t creating Topic_bd_4 at {31}

out(Discovery_ch, (~M_2,participant_data(~M_3,~M_4,~M_5,~M_6))) with ~M_2 = GUIDA_5, ~M_3 = GUIDA_5, ~M_4 = Topic_bd_4, ~M_5 = QoSA_2, ~M_6 = discoveryRegister at {41} in copy a

out(RTPS_Ch, ~M_7) with ~M_7 = SK_Perm at {32}

in(Discovery_ch, (a_1,participant_data(a_1,~M_4,a_2,discoveryRegister))) with ~M_4 = Topic_bd_4 at {143} in copy a_3

in(Discovery_ch, (a_4,participant_data(a_4,~M_4,a_5,discoveryRegister))) with ~M_4 = Topic_bd_4 at {145} in copy a_3

event DISCOVERY(a_1,participant_data(a_1,Topic_bd_4,a_2,discoveryRegister),a_4,participant_data(a_4,Topic_bd_4,a_5,discoveryRegister)) at {147} in copy a_3

out(Discovery_ch, (participant_data(~M_8,~M_9,~M_10,~M_11),~M_12,participant_data(~M_13,~M_14,~M_15,~M_16))) with ~M_8 = a_1, ~M_9 = Topic_bd_4, ~M_10 = a_2, ~M_11 = discoveryRegister, ~M_12 = discoveredParticipant, ~M_13 = a_4, ~M_14 = Topic_bd_4, ~M_15 = a_5, ~M_16 = discoveryRegister at {148} in copy a_3

in(Discovery_ch, (a_6,TopicCreateReq,a_7,participant_data(a_1,~M_4,a_2,discoveryRegister))) with ~M_4 = Topic_bd_4 at {149} in copy a_3

event TOPIC_DISCOVERED(a_1,a_6,a_7) at {150} in copy a_3 (goal)

The event TOPIC_DISCOVERED(a_1,a_6,a_7) is executed at {150} in copy a_3.
The attacker has the message a_8.
The attacker has the message a_6.
The attacker has the message a_9.
The attacker has the message a_10.
The attacker has the message a_7.
A trace has been found.
RESULT not (event(TOPIC_DISCOVERED(GUIDB_4,PermB_3,Topic_3)) && attacker(PermA_2) && attacker(PermB_3) && attacker(PdataA_3) && attacker(PdataB_3) && attacker(Topic_3)) is false.

--------------------------------------------------------------
Verification summary:

Query not (event(TOPIC_DISCOVERED(GUIDB_4,PermB_3,Topic_3)) && attacker(PermA_2) && attacker(PermB_3) && attacker(PdataA_3) && attacker(PdataB_3) && attacker(Topic_3)) is false.

--------------------------------------------------------------

