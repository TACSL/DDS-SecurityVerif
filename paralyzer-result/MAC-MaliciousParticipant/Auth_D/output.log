Linear part:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Completing equations...
Completed equations:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{7}let sn: GUID_t = GUIDA in
{8}let Pk: PK_t = pk(PrivKA) in
{9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{13}let sn_1: GUID_t = GUIDA in
{14}let DG: DomainGovernance_t = DGA in
{15}let PP: ParticipantPermission_t = PPA in
{16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
{17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{20}let sn_2: GUID_t = GUIDB in
{21}let Pk_1: PK_t = pk(PrivKB) in
{22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{26}let sn_3: GUID_t = GUIDB in
{27}let DG_1: DomainGovernance_t = DGB in
{28}let PP_1: ParticipantPermission_t = PPB in
{29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
{30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
{31}new Topic_bd: TopicID_t;
(
    {32}new GUID: GUID_t;
    {33}new PrivK: SK_t;
    {34}let sn_4: GUID_t = GUID in
    {35}let Pk_2: PK_t = pk(PrivK) in
    {36}let Cert: Cert_t = sign_cert(sn_4,Pk_2,SN_CI,SK_CI) in
    {37}new DG_2: DomainGovernance_t;
    {38}new PP_2: ParticipantPermission_t;
    {39}new Qos: Qos_t;
    {40}let sn_5: GUID_t = GUID in
    {41}let DG_3: DomainGovernance_t = DG_2 in
    {42}let PP_3: ParticipantPermission_t = PP_2 in
    {43}let Perm: PermDoc_t = sign_perm(sn_5,DG_3,PP_3,SK_Perm) in
    {44}let DHAlgo: Algo_t = make_algo(ID_G,DH_RSA) in
    {45}out(RTPS_Ch, (GUID,PrivK,Cert,Perm,DHAlgo))
) | (
    {46}!
    {47}let GUIDA_1: GUID_t = GUIDA in
    {48}let PrivK_A: SK_t = PrivKA in
    {49}let HashAlgoA: Hash_alg_t = SHA256 in
    {50}let QoSA_1: Qos_t = QoSA in
    {51}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {52}let Topic_bd_1: TopicID_t = Topic_bd in
    {53}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {54}out(Discovery_ch, (GUIDA_1,PdataA));
    {55}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {56}event A_discover(PdataB);
    {57}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {58}new ChallengeA: bitstring;
    {59}new s[]: Seed_t;
    {60}let gx: element_t = dh_pub(g,dh_k(s)) in
    {61}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {62}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {63}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {64}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {65}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {66}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {67}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {68}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {69}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {70}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {71}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {72}let SharedSecret: bitstring = gxy_SharedSecret in
    {73}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {74}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {75}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {76}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {77}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {78}if (PermB_x = PermB_1) then
    {79}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {80}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {81}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {82}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {83}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {84}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {85}out(RTPS_Ch, CryptoToken);
    {86}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,applicationData_x: bitstring,applicationDataMAC: bitstring));
    {87}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {88}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {89}if aead_mac_check(AeadAlgoA,sessionKey,IV,cryptoHeader,applicationData_x,applicationDataMAC) then
    {90}event A_3(GUIDB_1,GUIDA_1,applicationData_x,cryptoHeader,sessionKey);
    {91}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {92}new sessionID_new: bitstring;
    {93}new IV_new: bitstring;
    {94}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {95}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {96}new applicationData_new: bitstring;
    {97}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {98}out(RTPS_Ch, (cryptoHeader_new,applicationData_new,aead_mac(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {99}out(RTPS_Ch, finishA)
) | (
    {100}!
    {101}let GUIDB_2: GUID_t = GUIDB in
    {102}let PrivK_B: SK_t = PrivKB in
    {103}let HashAlgoB: Hash_alg_t = SHA256 in
    {104}let QosB_1: Qos_t = QosB in
    {105}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {106}let Topic_bd_2: TopicID_t = Topic_bd in
    {107}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {108}event B_discover(PdataB_1);
    {109}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {110}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {111}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {112}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {113}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {114}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {115}new ChallengeB_1: bitstring;
    {116}new s_1[]: Seed_t;
    {117}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {118}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {119}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {120}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {121}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {122}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {123}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {124}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {125}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {126}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {127}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {128}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {129}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {130}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
    {131}new Topic_1: TopicID_t;
    {132}event TOPIC_CRT_REQ(GUIDB_2,PermB,Topic_1);
    {133}out(Discovery_ch, (PermB,TopicCreateReq,Topic_1,PdataB_1));
    {134}in(RTPS_Ch, (=GUIDA_2,=PermissionChecked,=GUIDB_2,=Topic_1));
    {135}let KeyMaterial_1: KeyMaterial_t = KDF(SharedSecret_1,ChallengeA_1,ChallengeB_1) in
    {136}in(RTPS_Ch, CryptoToken_1: CryptoToken_t);
    {137}if decCryptoToken(CryptoToken_1,KeyMaterial_1,DHAlgoB,HashAlgoB,AeadAlgoB) then
    {138}new sessionID_1: bitstring;
    {139}new IV_1: bitstring;
    {140}let cryptoHeader_1: CryptoHeader_t = makeCryptoHeader(sessionID_1,IV_1) in
    {141}let sessionKey_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_1,KeyMaterial_1)) in
    {142}event B_2(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1,KeyMaterial_1,cryptoHeader_1,sessionKey_1);
    {143}new applicationData_MAC: bitstring;
    {144}event B_3(GUIDB_2,GUIDA_2,applicationData_MAC,cryptoHeader_1,sessionKey_1);
    {145}out(RTPS_Ch, (cryptoHeader_1,(applicationData_MAC,secretData),aead_mac(AeadAlgoB,sessionKey_1,IV_1,cryptoHeader_1,(applicationData_MAC,secretData))));
    {146}in(RTPS_Ch, (cryptoHeader_n: CryptoHeader_t,applicationData_x_new: bitstring,applicationDataMAC_new: bitstring));
    {147}let makeCryptoHeader(sessionID_new_1: bitstring,IV_new_1: bitstring) = cryptoHeader_n in
    {148}if (sessionID_new_1 â‰  sessionID_1) then
    {149}let sessionKey_new_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_new_1,KeyMaterial_1)) in
    {150}if aead_mac_check(AeadAlgoB,sessionKey_new_1,IV_new_1,cryptoHeader_n,applicationData_x_new,applicationDataMAC_new) then
        {151}event KEY_UPDATE_end(GUIDA_2,GUIDB_2,cryptoHeader_n,sessionKey_new_1,applicationData_x_new);
        {152}out(RTPS_Ch, finishB)
    else
        {153}out(RTPS_Ch, finishB)
) | (
    {154}!
    {155}let Topic_bd_3: TopicID_t = Topic_bd in
    {156}in(Discovery_ch, (GUIDB_3: GUID_t,PdataB_2: Pdata_t));
    {157}let participant_data(=GUIDB_3,=Topic_bd_3,QosB_2: Qos_t,=discoveryRegister) = PdataB_2 in
    {158}in(Discovery_ch, (GUIDA_3: GUID_t,PdataA_2: Pdata_t));
    {159}let participant_data(=GUIDA_3,=Topic_bd_3,QosA: Qos_t,=discoveryRegister) = PdataA_2 in
    {160}event DISCOVERY(GUIDB_3,PdataB_2,GUIDA_3,PdataA_2);
    {161}out(Discovery_ch, (PdataB_2,discoveredParticipant,PdataA_2));
    {162}in(Discovery_ch, (PermB_2: PermDoc_t,=TopicCreateReq,Topic_2: TopicID_t,=PdataB_2));
    {163}event TOPIC_DISCOVERED(GUIDB_3,PermB_2,Topic_2);
    {164}out(Discovery_ch, (PermB_2,TopicDiscovered,Topic_2,PdataB_2));
    {165}out(RTPS_Ch, finishDiscovery)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{31}new Topic_bd: TopicID_t;
(
    {32}new GUID: GUID_t;
    {33}new PrivK: SK_t;
    {37}new DG_2: DomainGovernance_t;
    {38}new PP_2: ParticipantPermission_t;
    {39}new Qos: Qos_t;
    {44}let DHAlgo: Algo_t = make_algo(ID_G,DH_RSA) in
    {42}let PP_3: ParticipantPermission_t = PP_2 in
    {41}let DG_3: DomainGovernance_t = DG_2 in
    {40}let sn_5: GUID_t = GUID in
    {43}let Perm: PermDoc_t = sign_perm(sn_5,DG_3,PP_3,SK_Perm) in
    {35}let Pk_2: PK_t = pk(PrivK) in
    {34}let sn_4: GUID_t = GUID in
    {36}let Cert: Cert_t = sign_cert(sn_4,Pk_2,SN_CI,SK_CI) in
    {45}out(RTPS_Ch, (GUID,PrivK,Cert,Perm,DHAlgo))
) | (
    {46}!
    {52}let Topic_bd_1: TopicID_t = Topic_bd in
    {50}let QoSA_1: Qos_t = QoSA in
    {47}let GUIDA_1: GUID_t = GUIDA in
    {53}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {54}out(Discovery_ch, (GUIDA_1,PdataA));
    {55}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {56}event A_discover(PdataB);
    {17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
    {57}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {58}new ChallengeA: bitstring;
    {59}new s[]: Seed_t;
    {60}let gx: element_t = dh_pub(g,dh_k(s)) in
    {61}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {49}let HashAlgoA: Hash_alg_t = SHA256 in
    {15}let PP: ParticipantPermission_t = PPA in
    {14}let DG: DomainGovernance_t = DGA in
    {13}let sn_1: GUID_t = GUIDA in
    {16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
    {8}let Pk: PK_t = pk(PrivKA) in
    {7}let sn: GUID_t = GUIDA in
    {9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
    {62}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {64}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {63}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {65}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {66}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {67}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {68}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {69}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {70}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {74}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {71}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {72}let SharedSecret: bitstring = gxy_SharedSecret in
    {75}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {48}let PrivK_A: SK_t = PrivKA in
    {73}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {76}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {77}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {78}if (PermB_x = PermB_1) then
    {79}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {80}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {81}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {82}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {84}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {51}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {83}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {85}out(RTPS_Ch, CryptoToken);
    {86}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,applicationData_x: bitstring,applicationDataMAC: bitstring));
    {87}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {88}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {89}if aead_mac_check(AeadAlgoA,sessionKey,IV,cryptoHeader,applicationData_x,applicationDataMAC) then
    {90}event A_3(GUIDB_1,GUIDA_1,applicationData_x,cryptoHeader,sessionKey);
    {91}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {92}new sessionID_new: bitstring;
    {93}new IV_new: bitstring;
    {96}new applicationData_new: bitstring;
    {95}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {94}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {97}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {98}out(RTPS_Ch, (cryptoHeader_new,applicationData_new,aead_mac(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {99}out(RTPS_Ch, finishA)
) | (
    {100}!
    {106}let Topic_bd_2: TopicID_t = Topic_bd in
    {104}let QosB_1: Qos_t = QosB in
    {101}let GUIDB_2: GUID_t = GUIDB in
    {107}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {108}event B_discover(PdataB_1);
    {109}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {110}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {103}let HashAlgoB: Hash_alg_t = SHA256 in
    {30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
    {111}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {112}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {113}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {114}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {115}new ChallengeB_1: bitstring;
    {116}new s_1[]: Seed_t;
    {117}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {118}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {21}let Pk_1: PK_t = pk(PrivKB) in
    {20}let sn_2: GUID_t = GUIDB in
    {22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
    {122}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {28}let PP_1: ParticipantPermission_t = PPB in
    {27}let DG_1: DomainGovernance_t = DGB in
    {26}let sn_3: GUID_t = GUIDB in
    {29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
    {119}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {123}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {120}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {102}let PrivK_B: SK_t = PrivKB in
    {121}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {124}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {125}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {126}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {127}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {128}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {129}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {130}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
    {131}new Topic_1: TopicID_t;
    {132}event TOPIC_CRT_REQ(GUIDB_2,PermB,Topic_1);
    {133}out(Discovery_ch, (PermB,TopicCreateReq,Topic_1,PdataB_1));
    {134}in(RTPS_Ch, (=GUIDA_2,=PermissionChecked,=GUIDB_2,=Topic_1));
    {136}in(RTPS_Ch, CryptoToken_1: CryptoToken_t);
    {135}let KeyMaterial_1: KeyMaterial_t = KDF(SharedSecret_1,ChallengeA_1,ChallengeB_1) in
    {105}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {137}if decCryptoToken(CryptoToken_1,KeyMaterial_1,DHAlgoB,HashAlgoB,AeadAlgoB) then
    {138}new sessionID_1: bitstring;
    {139}new IV_1: bitstring;
    {141}let sessionKey_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_1,KeyMaterial_1)) in
    {140}let cryptoHeader_1: CryptoHeader_t = makeCryptoHeader(sessionID_1,IV_1) in
    {142}event B_2(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1,KeyMaterial_1,cryptoHeader_1,sessionKey_1);
    {143}new applicationData_MAC: bitstring;
    {144}event B_3(GUIDB_2,GUIDA_2,applicationData_MAC,cryptoHeader_1,sessionKey_1);
    {145}out(RTPS_Ch, (cryptoHeader_1,(applicationData_MAC,secretData),aead_mac(AeadAlgoB,sessionKey_1,IV_1,cryptoHeader_1,(applicationData_MAC,secretData))));
    {146}in(RTPS_Ch, (cryptoHeader_n: CryptoHeader_t,applicationData_x_new: bitstring,applicationDataMAC_new: bitstring));
    {147}let makeCryptoHeader(sessionID_new_1: bitstring,IV_new_1: bitstring) = cryptoHeader_n in
    {148}if (sessionID_new_1 â‰  sessionID_1) then
    {149}let sessionKey_new_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_new_1,KeyMaterial_1)) in
    {150}if aead_mac_check(AeadAlgoB,sessionKey_new_1,IV_new_1,cryptoHeader_n,applicationData_x_new,applicationDataMAC_new) then
        {151}event KEY_UPDATE_end(GUIDA_2,GUIDB_2,cryptoHeader_n,sessionKey_new_1,applicationData_x_new);
        {152}out(RTPS_Ch, finishB)
    else
        {153}out(RTPS_Ch, finishB)
) | (
    {154}!
    {156}in(Discovery_ch, (GUIDB_3: GUID_t,PdataB_2: Pdata_t));
    {155}let Topic_bd_3: TopicID_t = Topic_bd in
    {157}let participant_data(=GUIDB_3,=Topic_bd_3,QosB_2: Qos_t,=discoveryRegister) = PdataB_2 in
    {158}in(Discovery_ch, (GUIDA_3: GUID_t,PdataA_2: Pdata_t));
    {159}let participant_data(=GUIDA_3,=Topic_bd_3,QosA: Qos_t,=discoveryRegister) = PdataA_2 in
    {160}event DISCOVERY(GUIDB_3,PdataB_2,GUIDA_3,PdataA_2);
    {161}out(Discovery_ch, (PdataB_2,discoveredParticipant,PdataA_2));
    {162}in(Discovery_ch, (PermB_2: PermDoc_t,=TopicCreateReq,Topic_2: TopicID_t,=PdataB_2));
    {163}event TOPIC_DISCOVERED(GUIDB_3,PermB_2,Topic_2);
    {164}out(Discovery_ch, (PermB_2,TopicDiscovered,Topic_2,PdataB_2));
    {165}out(RTPS_Ch, finishDiscovery)
)

-- Query event(A_1(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,SharedSecret_2)) ==> event(B_0(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2)) && event(A_0(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,PdataB_3)) in process 1.
Translating the process into Horn clauses...
Completing...
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect PkA_1:PK_t, GUIDA_4:GUID_t; attacker(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI)).
200 rules inserted. Base: 173 rules (60 with conclusion selected). Queue: 33 rules.
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect PdataA_3:Pdata_t, PermA_2:PermDoc_t; attacker(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))).
400 rules inserted. Base: 264 rules (92 with conclusion selected). Queue: 105 rules.
600 rules inserted. Base: 308 rules (97 with conclusion selected). Queue: 117 rules.
800 rules inserted. Base: 359 rules (98 with conclusion selected). Queue: 155 rules.
1000 rules inserted. Base: 437 rules (99 with conclusion selected). Queue: 299 rules.
1200 rules inserted. Base: 513 rules (99 with conclusion selected). Queue: 368 rules.
1400 rules inserted. Base: 587 rules (99 with conclusion selected). Queue: 436 rules.
1600 rules inserted. Base: 662 rules (99 with conclusion selected). Queue: 432 rules.
1800 rules inserted. Base: 810 rules (101 with conclusion selected). Queue: 527 rules.
2000 rules inserted. Base: 910 rules (101 with conclusion selected). Queue: 446 rules.
2200 rules inserted. Base: 1041 rules (102 with conclusion selected). Queue: 347 rules.
2400 rules inserted. Base: 1131 rules (108 with conclusion selected). Queue: 261 rules.
2600 rules inserted. Base: 1212 rules (114 with conclusion selected). Queue: 191 rules.
2800 rules inserted. Base: 1283 rules (114 with conclusion selected). Queue: 166 rules.
3000 rules inserted. Base: 1368 rules (114 with conclusion selected). Queue: 115 rules.
3200 rules inserted. Base: 1470 rules (139 with conclusion selected). Queue: 75 rules.
3400 rules inserted. Base: 1530 rules (143 with conclusion selected). Queue: 47 rules.
3600 rules inserted. Base: 1589 rules (168 with conclusion selected). Queue: 104 rules.
3800 rules inserted. Base: 1597 rules (168 with conclusion selected). Queue: 104 rules.
4000 rules inserted. Base: 1617 rules (168 with conclusion selected). Queue: 132 rules.
4200 rules inserted. Base: 1618 rules (168 with conclusion selected). Queue: 166 rules.
4400 rules inserted. Base: 1650 rules (168 with conclusion selected). Queue: 214 rules.
4600 rules inserted. Base: 1662 rules (168 with conclusion selected). Queue: 207 rules.
4800 rules inserted. Base: 1746 rules (168 with conclusion selected). Queue: 287 rules.
5000 rules inserted. Base: 1810 rules (168 with conclusion selected). Queue: 328 rules.
5200 rules inserted. Base: 1941 rules (168 with conclusion selected). Queue: 297 rules.
5400 rules inserted. Base: 2025 rules (168 with conclusion selected). Queue: 297 rules.
5600 rules inserted. Base: 2117 rules (168 with conclusion selected). Queue: 224 rules.
5800 rules inserted. Base: 2235 rules (168 with conclusion selected). Queue: 118 rules.
6000 rules inserted. Base: 2342 rules (205 with conclusion selected). Queue: 279 rules.
6200 rules inserted. Base: 2473 rules (208 with conclusion selected). Queue: 239 rules.
6400 rules inserted. Base: 2598 rules (212 with conclusion selected). Queue: 107 rules.
6600 rules inserted. Base: 2673 rules (216 with conclusion selected). Queue: 82 rules.
6800 rules inserted. Base: 2652 rules (216 with conclusion selected). Queue: 153 rules.
7000 rules inserted. Base: 2673 rules (216 with conclusion selected). Queue: 216 rules.
7200 rules inserted. Base: 2681 rules (216 with conclusion selected). Queue: 216 rules.
7400 rules inserted. Base: 2766 rules (216 with conclusion selected). Queue: 316 rules.
7600 rules inserted. Base: 2884 rules (216 with conclusion selected). Queue: 485 rules.
7800 rules inserted. Base: 2937 rules (216 with conclusion selected). Queue: 564 rules.
8000 rules inserted. Base: 3004 rules (216 with conclusion selected). Queue: 616 rules.
8200 rules inserted. Base: 3129 rules (216 with conclusion selected). Queue: 524 rules.
8400 rules inserted. Base: 3258 rules (216 with conclusion selected). Queue: 425 rules.
8600 rules inserted. Base: 3390 rules (216 with conclusion selected). Queue: 323 rules.
8800 rules inserted. Base: 3492 rules (216 with conclusion selected). Queue: 261 rules.
9000 rules inserted. Base: 3607 rules (216 with conclusion selected). Queue: 170 rules.
9200 rules inserted. Base: 3713 rules (216 with conclusion selected). Queue: 64 rules.
Starting query event(A_1(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,SharedSecret_2)) ==> event(B_0(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2)) && event(A_0(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,PdataB_3))
goal reachable: attacker(PermB_3) && attacker(ChallengeB_2) && attacker(gy_DHB_2) && b-event(A_0(GUIDA[],make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),PdataB_3)) && attacker(PdataB_3) -> event(A_1(GUIDA[],make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,gy_DHB_2,dh_exp(gy_DHB_2,dh_k(s_2))))
Abbreviations:
ChallengeA_2 = ChallengeA[PdataB = PdataB_3,!1 = @sid]
s_2 = s[!1 = @sid]

Derivation:
Abbreviations:
ChallengeA_2 = ChallengeA[PdataB = PdataB_3,!1 = @sid]
s_2 = s[!1 = @sid]

1. Using the function discoveryRegister the attacker may obtain discoveryRegister.
attacker(discoveryRegister).

2. The message (GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)) may be sent to the attacker at output {54}.
attacker((GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister))).

3. By 2, the attacker may know (GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).
Using the function 2-proj-2-tuple the attacker may obtain participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
attacker(participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).

4. By 3, the attacker may know participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
Using the function 3-proj-participant_data the attacker may obtain QoSA[].
attacker(QoSA[]).

5. By 3, the attacker may know participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
Using the function 2-proj-participant_data the attacker may obtain Topic_bd[].
attacker(Topic_bd[]).

6. By 2, the attacker may know (GUIDA[],participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).
Using the function 1-proj-2-tuple the attacker may obtain GUIDA[].
attacker(GUIDA[]).

7. By 6, the attacker may know GUIDA[].
By 5, the attacker may know Topic_bd[].
By 4, the attacker may know QoSA[].
By 1, the attacker may know discoveryRegister.
Using the function participant_data the attacker may obtain participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
attacker(participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).

8. Using the function discoveredParticipant the attacker may obtain discoveredParticipant.
attacker(discoveredParticipant).

9. We assume as hypothesis that
attacker(PdataB_3).

10. By 9, the attacker may know PdataB_3.
By 8, the attacker may know discoveredParticipant.
By 7, the attacker may know participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister).
Using the function 3-tuple the attacker may obtain (PdataB_3,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)).
attacker((PdataB_3,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister))).

11. The message (PdataB_3,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)) that the attacker may have by 10 may be received at input {55}.
The event A_0(GUIDA[],make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),PdataB_3) may be executed at {64}.
So the message (make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,dh_k(s_2))) may be sent to the attacker at output {65}.
attacker((make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)))).

12. By 11, the attacker may know (make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,dh_k(s_2))).
Using the function 2-proj-4-tuple the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).

13. By 11, the attacker may know (make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,dh_k(s_2))).
Using the function 4-proj-4-tuple the attacker may obtain dh_pub(ID_G,dh_k(s_2)).
attacker(dh_pub(ID_G,dh_k(s_2))).

14. By 11, the attacker may know (make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,dh_pub(ID_G,dh_k(s_2))).
Using the function 3-proj-4-tuple the attacker may obtain ChallengeA_2.
attacker(ChallengeA_2).

15. We assume as hypothesis that
attacker(gy_DHB_2).

16. We assume as hypothesis that
attacker(ChallengeB_2).

17. Using the function SHA256 the attacker may obtain SHA256.
attacker(SHA256).

18. Using the function DH_RSA the attacker may obtain DH_RSA.
attacker(DH_RSA).

19. Using the function ID_G the attacker may obtain ID_G.
attacker(ID_G).

20. By 19, the attacker may know ID_G.
By 18, the attacker may know DH_RSA.
Using the function make_algo the attacker may obtain make_algo(ID_G,DH_RSA).
attacker(make_algo(ID_G,DH_RSA)).

21. We assume as hypothesis that
attacker(PermB_3).

22. The message (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)) may be sent to the attacker at output {45}.
attacker((GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA))).

23. By 22, the attacker may know (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)).
Using the function 3-proj-5-tuple the attacker may obtain sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
attacker(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI)).

24. By 23, the attacker may know sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
By 21, the attacker may know PermB_3.
By 9, the attacker may know PdataB_3.
By 20, the attacker may know make_algo(ID_G,DH_RSA).
By 17, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256)).

25. By 17, the attacker may know SHA256.
By 24, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256))).

26. By 25, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256)).
By 16, the attacker may know ChallengeB_2.
By 15, the attacker may know gy_DHB_2.
By 14, the attacker may know ChallengeA_2.
By 13, the attacker may know dh_pub(ID_G,dh_k(s_2)).
By 12, the attacker may know hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
Using the function 6-tuple the attacker may obtain (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,gy_DHB_2,ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).
attacker((hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,gy_DHB_2,ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).

27. By 22, the attacker may know (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)).
Using the function 2-proj-5-tuple the attacker may obtain PrivK[].
attacker(PrivK[]).

28. By 27, the attacker may know PrivK[].
By 26, the attacker may know (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,gy_DHB_2,ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).
Using the function sign the attacker may obtain sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,gy_DHB_2,ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).
attacker(sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,gy_DHB_2,ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))).

29. The attacker has some term hash_CB_2.
attacker(hash_CB_2).

30. By 24, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256).
By 29, the attacker may know hash_CB_2.
By 14, the attacker may know ChallengeA_2.
By 16, the attacker may know ChallengeB_2.
By 15, the attacker may know gy_DHB_2.
By 12, the attacker may know hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
By 13, the attacker may know dh_pub(ID_G,dh_k(s_2)).
By 28, the attacker may know sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,gy_DHB_2,ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).
Using the function 8-tuple the attacker may obtain (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256),hash_CB_2,ChallengeA_2,ChallengeB_2,gy_DHB_2,hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,dh_k(s_2)),sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,gy_DHB_2,ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))).
attacker((make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256),hash_CB_2,ChallengeA_2,ChallengeB_2,gy_DHB_2,hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,dh_k(s_2)),sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,gy_DHB_2,ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))))).

31. The message (PdataB_3,discoveredParticipant,participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister)) that the attacker may have by 10 may be received at input {55}.
The event A_0(GUIDA[],make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),PdataB_3) may be executed at {64}.
The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256),hash_CB_2,ChallengeA_2,ChallengeB_2,gy_DHB_2,hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),dh_pub(ID_G,dh_k(s_2)),sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,gy_DHB_2,ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))) that the attacker may have by 30 may be received at input {66}.
So event A_1(GUIDA[],make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,gy_DHB_2,dh_exp(gy_DHB_2,dh_k(s_2))) may be executed at {75}.
event(A_1(GUIDA[],make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,gy_DHB_2,dh_exp(gy_DHB_2,dh_k(s_2)))).

32. By 31, event(A_1(GUIDA[],make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,gy_DHB_2,dh_exp(gy_DHB_2,dh_k(s_2)))).
The goal is reached, represented in the following fact:
event(A_1(GUIDA[],make_C_list(sign_cert(GUIDA[],pk(PrivKA[]),SN_CI,SK_CI),sign_perm(GUIDA[],DGA[],PPA[],SK_Perm),participant_data(GUIDA[],Topic_bd[],QoSA[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermB_3,PdataB_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,gy_DHB_2,dh_exp(gy_DHB_2,dh_k(s_2)))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(RTPS_Ch, ~M) with ~M = pk(SK_CI) at {2}

out(RTPS_Ch, ~M_1) with ~M_1 = pk(SK_Perm) at {4}

new GUIDA: GUID_t creating GUIDA_4 at {5}

new PrivKA: SK_t creating PrivKA_1 at {6}

new DGA: DomainGovernance_t creating DGA_1 at {10}

new PPA: ParticipantPermission_t creating PPA_1 at {11}

new QoSA: Qos_t creating QoSA_2 at {12}

new GUIDB: GUID_t creating GUIDB_4 at {18}

new PrivKB: SK_t creating PrivKB_1 at {19}

new DGB: DomainGovernance_t creating DGB_2 at {23}

new PPB: ParticipantPermission_t creating PPB_2 at {24}

new QosB: Qos_t creating QosB_3 at {25}

new Topic_bd: TopicID_t creating Topic_bd_4 at {31}

out(Discovery_ch, (~M_2,participant_data(~M_3,~M_4,~M_5,~M_6))) with ~M_2 = GUIDA_4, ~M_3 = GUIDA_4, ~M_4 = Topic_bd_4, ~M_5 = QoSA_2, ~M_6 = discoveryRegister at {54} in copy a

out(Discovery_ch, (~M_7,participant_data(~M_8,~M_9,~M_10,~M_11))) with ~M_7 = GUIDA_4, ~M_8 = GUIDA_4, ~M_9 = Topic_bd_4, ~M_10 = QoSA_2, ~M_11 = discoveryRegister at {54} in copy a_1

new GUID: GUID_t creating GUID_1 at {32}

new PrivK: SK_t creating PrivK_1 at {33}

new DG_2: DomainGovernance_t creating DG_4 at {37}

new PP_2: ParticipantPermission_t creating PP_4 at {38}

new Qos: Qos_t creating Qos_1 at {39}

out(RTPS_Ch, (~M_12,~M_13,~M_14,~M_15,make_algo(~M_16,~M_17))) with ~M_12 = GUID_1, ~M_13 = PrivK_1, ~M_14 = sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI), ~M_15 = sign_perm(GUID_1,DG_4,PP_4,SK_Perm), ~M_16 = ID_G, ~M_17 = DH_RSA at {45}

in(Discovery_ch, (a_2,discoveredParticipant,participant_data(~M_2,~M_4,~M_5,discoveryRegister))) with ~M_2 = GUIDA_4, ~M_4 = Topic_bd_4, ~M_5 = QoSA_2 at {55} in copy a

event A_discover(a_2) at {56} in copy a

new ChallengeA: bitstring creating ChallengeA_3 at {58} in copy a

new s: Seed_t creating s_3 at {59} in copy a

event A_0(GUIDA_4,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_3,dh_pub(ID_G,dh_k(s_3)),a_2) at {64} in copy a

out(RTPS_Ch, (make_C_list(~M_18,~M_19,participant_data(~M_20,~M_21,~M_22,~M_23),make_algo(~M_24,~M_25),~M_26),~M_27,~M_28,~M_29)) with ~M_18 = sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI), ~M_19 = sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm), ~M_20 = GUIDA_4, ~M_21 = Topic_bd_4, ~M_22 = QoSA_2, ~M_23 = discoveryRegister, ~M_24 = ID_G, ~M_25 = DH_RSA, ~M_26 = SHA256, ~M_27 = hash(SHA256,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_28 = ChallengeA_3, ~M_29 = dh_pub(ID_G,dh_k(s_3)) at {65} in copy a

in(RTPS_Ch, (make_C_list(~M_14,a_3,a_2,make_algo(ID_G,DH_RSA),SHA256),a_4,~M_28,a_5,a_6,~M_27,~M_29,sign(~M_13,(hash(SHA256,make_C_list(~M_14,a_3,a_2,make_algo(ID_G,DH_RSA),SHA256)),a_5,a_6,~M_28,~M_29,~M_27)))) with ~M_14 = sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI), ~M_28 = ChallengeA_3, ~M_27 = hash(SHA256,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_29 = dh_pub(ID_G,dh_k(s_3)), sign(~M_13,(hash(SHA256,make_C_list(~M_14,a_3,a_2,make_algo(ID_G,DH_RSA),SHA256)),a_5,a_6,~M_28,~M_29,~M_27)) = sign(PrivK_1,(hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_3,a_2,make_algo(ID_G,DH_RSA),SHA256)),a_5,a_6,ChallengeA_3,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))) at {66} in copy a

event endAtoB(GUID_1,sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),ChallengeA_3) at {70} in copy a

event beginBtoA(GUIDA_4,sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),a_5) at {74} in copy a

event A_1(GUIDA_4,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_3,dh_pub(ID_G,dh_k(s_3)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_3,a_2,make_algo(ID_G,DH_RSA),SHA256),a_5,a_6,dh_exp(a_6,dh_k(s_3))) at {75} in copy a (goal)

The event A_1(GUIDA_4,make_C_list(sign_cert(GUIDA_4,pk(PrivKA_1),SN_CI,SK_CI),sign_perm(GUIDA_4,DGA_1,PPA_1,SK_Perm),participant_data(GUIDA_4,Topic_bd_4,QoSA_2,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeA_3,dh_pub(ID_G,dh_k(s_3)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_3,a_2,make_algo(ID_G,DH_RSA),SHA256),a_5,a_6,dh_exp(a_6,dh_k(s_3))) is executed at {75} in copy a.
A trace has been found.
RESULT event(A_1(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,SharedSecret_2)) ==> event(B_0(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2)) && event(A_0(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,PdataB_3)) is false.

--------------------------------------------------------------
Verification summary:

Query event(A_1(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,SharedSecret_2)) ==> event(B_0(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2)) && event(A_0(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,PdataB_3)) is false.

--------------------------------------------------------------

