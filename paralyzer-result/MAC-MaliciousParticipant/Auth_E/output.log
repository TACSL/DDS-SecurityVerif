Linear part:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Completing equations...
Completed equations:
dh_exp(dh_pub(g,x),y) = dh_exp(dh_pub(g,y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{7}let sn: GUID_t = GUIDA in
{8}let Pk: PK_t = pk(PrivKA) in
{9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{13}let sn_1: GUID_t = GUIDA in
{14}let DG: DomainGovernance_t = DGA in
{15}let PP: ParticipantPermission_t = PPA in
{16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
{17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{20}let sn_2: GUID_t = GUIDB in
{21}let Pk_1: PK_t = pk(PrivKB) in
{22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{26}let sn_3: GUID_t = GUIDB in
{27}let DG_1: DomainGovernance_t = DGB in
{28}let PP_1: ParticipantPermission_t = PPB in
{29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
{30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
{31}new Topic_bd: TopicID_t;
(
    {32}new GUID: GUID_t;
    {33}new PrivK: SK_t;
    {34}let sn_4: GUID_t = GUID in
    {35}let Pk_2: PK_t = pk(PrivK) in
    {36}let Cert: Cert_t = sign_cert(sn_4,Pk_2,SN_CI,SK_CI) in
    {37}new DG_2: DomainGovernance_t;
    {38}new PP_2: ParticipantPermission_t;
    {39}new Qos: Qos_t;
    {40}let sn_5: GUID_t = GUID in
    {41}let DG_3: DomainGovernance_t = DG_2 in
    {42}let PP_3: ParticipantPermission_t = PP_2 in
    {43}let Perm: PermDoc_t = sign_perm(sn_5,DG_3,PP_3,SK_Perm) in
    {44}let DHAlgo: Algo_t = make_algo(ID_G,DH_RSA) in
    {45}out(RTPS_Ch, (GUID,PrivK,Cert,Perm,DHAlgo))
) | (
    {46}!
    {47}let GUIDA_1: GUID_t = GUIDA in
    {48}let PrivK_A: SK_t = PrivKA in
    {49}let HashAlgoA: Hash_alg_t = SHA256 in
    {50}let QoSA_1: Qos_t = QoSA in
    {51}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {52}let Topic_bd_1: TopicID_t = Topic_bd in
    {53}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {54}out(Discovery_ch, (GUIDA_1,PdataA));
    {55}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {56}event A_discover(PdataB);
    {57}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {58}new ChallengeA: bitstring;
    {59}new s[]: Seed_t;
    {60}let gx: element_t = dh_pub(g,dh_k(s)) in
    {61}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {62}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {63}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {64}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {65}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {66}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {67}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {68}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {69}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {70}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {71}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {72}let SharedSecret: bitstring = gxy_SharedSecret in
    {73}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {74}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {75}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {76}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {77}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {78}if (PermB_x = PermB_1) then
    {79}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {80}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {81}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {82}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {83}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {84}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {85}out(RTPS_Ch, CryptoToken);
    {86}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,applicationData_x: bitstring,applicationDataMAC: bitstring));
    {87}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {88}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {89}if aead_mac_check(AeadAlgoA,sessionKey,IV,cryptoHeader,applicationData_x,applicationDataMAC) then
    {90}event A_3(GUIDB_1,GUIDA_1,applicationData_x,cryptoHeader,sessionKey);
    {91}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {92}new sessionID_new: bitstring;
    {93}new IV_new: bitstring;
    {94}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {95}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {96}new applicationData_new: bitstring;
    {97}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {98}out(RTPS_Ch, (cryptoHeader_new,applicationData_new,aead_mac(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {99}out(RTPS_Ch, finishA)
) | (
    {100}!
    {101}let GUIDB_2: GUID_t = GUIDB in
    {102}let PrivK_B: SK_t = PrivKB in
    {103}let HashAlgoB: Hash_alg_t = SHA256 in
    {104}let QosB_1: Qos_t = QosB in
    {105}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {106}let Topic_bd_2: TopicID_t = Topic_bd in
    {107}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {108}event B_discover(PdataB_1);
    {109}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {110}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {111}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {112}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {113}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {114}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {115}new ChallengeB_1: bitstring;
    {116}new s_1[]: Seed_t;
    {117}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {118}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {119}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {120}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {121}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {122}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {123}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {124}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {125}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {126}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {127}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {128}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {129}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {130}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
    {131}new Topic_1: TopicID_t;
    {132}event TOPIC_CRT_REQ(GUIDB_2,PermB,Topic_1);
    {133}out(Discovery_ch, (PermB,TopicCreateReq,Topic_1,PdataB_1));
    {134}in(RTPS_Ch, (=GUIDA_2,=PermissionChecked,=GUIDB_2,=Topic_1));
    {135}let KeyMaterial_1: KeyMaterial_t = KDF(SharedSecret_1,ChallengeA_1,ChallengeB_1) in
    {136}in(RTPS_Ch, CryptoToken_1: CryptoToken_t);
    {137}if decCryptoToken(CryptoToken_1,KeyMaterial_1,DHAlgoB,HashAlgoB,AeadAlgoB) then
    {138}new sessionID_1: bitstring;
    {139}new IV_1: bitstring;
    {140}let cryptoHeader_1: CryptoHeader_t = makeCryptoHeader(sessionID_1,IV_1) in
    {141}let sessionKey_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_1,KeyMaterial_1)) in
    {142}event B_2(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1,KeyMaterial_1,cryptoHeader_1,sessionKey_1);
    {143}new applicationData_MAC: bitstring;
    {144}event B_3(GUIDB_2,GUIDA_2,applicationData_MAC,cryptoHeader_1,sessionKey_1);
    {145}out(RTPS_Ch, (cryptoHeader_1,(applicationData_MAC,secretData),aead_mac(AeadAlgoB,sessionKey_1,IV_1,cryptoHeader_1,(applicationData_MAC,secretData))));
    {146}in(RTPS_Ch, (cryptoHeader_n: CryptoHeader_t,applicationData_x_new: bitstring,applicationDataMAC_new: bitstring));
    {147}let makeCryptoHeader(sessionID_new_1: bitstring,IV_new_1: bitstring) = cryptoHeader_n in
    {148}if (sessionID_new_1 â‰  sessionID_1) then
    {149}let sessionKey_new_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_new_1,KeyMaterial_1)) in
    {150}if aead_mac_check(AeadAlgoB,sessionKey_new_1,IV_new_1,cryptoHeader_n,applicationData_x_new,applicationDataMAC_new) then
        {151}event KEY_UPDATE_end(GUIDA_2,GUIDB_2,cryptoHeader_n,sessionKey_new_1,applicationData_x_new);
        {152}out(RTPS_Ch, finishB)
    else
        {153}out(RTPS_Ch, finishB)
) | (
    {154}!
    {155}let Topic_bd_3: TopicID_t = Topic_bd in
    {156}in(Discovery_ch, (GUIDB_3: GUID_t,PdataB_2: Pdata_t));
    {157}let participant_data(=GUIDB_3,=Topic_bd_3,QosB_2: Qos_t,=discoveryRegister) = PdataB_2 in
    {158}in(Discovery_ch, (GUIDA_3: GUID_t,PdataA_2: Pdata_t));
    {159}let participant_data(=GUIDA_3,=Topic_bd_3,QosA: Qos_t,=discoveryRegister) = PdataA_2 in
    {160}event DISCOVERY(GUIDB_3,PdataB_2,GUIDA_3,PdataA_2);
    {161}out(Discovery_ch, (PdataB_2,discoveredParticipant,PdataA_2));
    {162}in(Discovery_ch, (PermB_2: PermDoc_t,=TopicCreateReq,Topic_2: TopicID_t,=PdataB_2));
    {163}event TOPIC_DISCOVERED(GUIDB_3,PermB_2,Topic_2);
    {164}out(Discovery_ch, (PermB_2,TopicDiscovered,Topic_2,PdataB_2));
    {165}out(RTPS_Ch, finishDiscovery)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}let PK_CI: PK_t = pk(SK_CI) in
{2}out(RTPS_Ch, PK_CI);
{3}let PK_Perm: PK_t = pk(SK_Perm) in
{4}out(RTPS_Ch, PK_Perm);
{5}new GUIDA: GUID_t;
{6}new PrivKA: SK_t;
{10}new DGA: DomainGovernance_t;
{11}new PPA: ParticipantPermission_t;
{12}new QoSA: Qos_t;
{18}new GUIDB: GUID_t;
{19}new PrivKB: SK_t;
{23}new DGB: DomainGovernance_t;
{24}new PPB: ParticipantPermission_t;
{25}new QosB: Qos_t;
{31}new Topic_bd: TopicID_t;
(
    {32}new GUID: GUID_t;
    {33}new PrivK: SK_t;
    {37}new DG_2: DomainGovernance_t;
    {38}new PP_2: ParticipantPermission_t;
    {39}new Qos: Qos_t;
    {44}let DHAlgo: Algo_t = make_algo(ID_G,DH_RSA) in
    {42}let PP_3: ParticipantPermission_t = PP_2 in
    {41}let DG_3: DomainGovernance_t = DG_2 in
    {40}let sn_5: GUID_t = GUID in
    {43}let Perm: PermDoc_t = sign_perm(sn_5,DG_3,PP_3,SK_Perm) in
    {35}let Pk_2: PK_t = pk(PrivK) in
    {34}let sn_4: GUID_t = GUID in
    {36}let Cert: Cert_t = sign_cert(sn_4,Pk_2,SN_CI,SK_CI) in
    {45}out(RTPS_Ch, (GUID,PrivK,Cert,Perm,DHAlgo))
) | (
    {46}!
    {52}let Topic_bd_1: TopicID_t = Topic_bd in
    {50}let QoSA_1: Qos_t = QoSA in
    {47}let GUIDA_1: GUID_t = GUIDA in
    {53}let PdataA: Pdata_t = participant_data(GUIDA_1,Topic_bd_1,QoSA_1,discoveryRegister) in
    {54}out(Discovery_ch, (GUIDA_1,PdataA));
    {55}in(Discovery_ch, (PdataB: Pdata_t,=discoveredParticipant,=PdataA));
    {56}event A_discover(PdataB);
    {17}let DHAlgoA: Algo_t = make_algo(ID_G,DH_RSA) in
    {57}let make_algo(g: group_t,algoName: AlgoName_t) = DHAlgoA in
    {58}new ChallengeA: bitstring;
    {59}new s[]: Seed_t;
    {60}let gx: element_t = dh_pub(g,dh_k(s)) in
    {61}let (x: bitstring,gx_DHA: element_t) = (dh_k(s),gx) in
    {49}let HashAlgoA: Hash_alg_t = SHA256 in
    {15}let PP: ParticipantPermission_t = PPA in
    {14}let DG: DomainGovernance_t = DGA in
    {13}let sn_1: GUID_t = GUIDA in
    {16}let PermA: PermDoc_t = sign_perm(sn_1,DG,PP,SK_Perm) in
    {8}let Pk: PK_t = pk(PrivKA) in
    {7}let sn: GUID_t = GUIDA in
    {9}let CertA: Cert_t = sign_cert(sn,Pk,SN_CI,SK_CI) in
    {62}let CA: Clist_t = make_C_list(CertA,PermA,PdataA,DHAlgoA,HashAlgoA) in
    {64}event A_0(GUIDA_1,CA,ChallengeA,gx_DHA,PdataB);
    {63}let hash_CA: bitstring = hash(HashAlgoA,CA) in
    {65}out(RTPS_Ch, (CA,hash_CA,ChallengeA,gx_DHA));
    {66}in(RTPS_Ch, (CB: Clist_t,hash_CB: bitstring,=ChallengeA,ChallengeB: bitstring,gy_DHB: element_t,=hash_CA,=gx_DHA,sigB: Sig_t));
    {67}let make_C_list(CertB_1: Cert_t,PermB_1: PermDoc_t,=PdataB,=DHAlgoA,=HashAlgoA) = CB in
    {68}let (GUIDB_1: GUID_t,PkB: PK_t,=SN_CI) = check_cert(CertB_1,PK_CI) in
    {69}if verify(PkB,(hash(HashAlgoA,CB),ChallengeB,gy_DHB,ChallengeA,gx_DHA,hash_CA),sigB) then
    {70}event endAtoB(GUIDB_1,CertB_1,ChallengeA);
    {74}event beginBtoA(GUIDA_1,CertA,ChallengeB);
    {71}let gxy_SharedSecret: element_t = dh_exp(gy_DHB,x) in
    {72}let SharedSecret: bitstring = gxy_SharedSecret in
    {75}event A_1(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret);
    {48}let PrivK_A: SK_t = PrivKA in
    {73}let sigA: Sig_t = sign(PrivK_A,(hash_CA,ChallengeA,gx_DHA,ChallengeB,gy_DHB,hash_CB)) in
    {76}out(RTPS_Ch, (hash_CA,hash(HashAlgoA,CB),gx_DHA,gy_DHB,ChallengeA,ChallengeB,sigA));
    {77}in(Discovery_ch, (PermB_x: PermDoc_t,=TopicDiscovered,Topic: TopicID_t,=PdataB));
    {78}if (PermB_x = PermB_1) then
    {79}let (=GUIDB_1,DGB_1: DomainGovernance_t,PPB_1: ParticipantPermission_t) = check_perm(PermB_1,PK_Perm) in
    {80}event PERM_CHECK(GUIDB_1,PermB_1,Topic);
    {81}out(RTPS_Ch, (GUIDA_1,PermissionChecked,GUIDB_1,Topic));
    {82}let KeyMaterial: KeyMaterial_t = KDF(SharedSecret,ChallengeA,ChallengeB) in
    {84}event A_2(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial);
    {51}let AeadAlgoA: Aead_alg_t = AES_GCM_128 in
    {83}let CryptoToken: CryptoToken_t = encCryptoToken(KeyMaterial,DHAlgoA,HashAlgoA,AeadAlgoA) in
    {85}out(RTPS_Ch, CryptoToken);
    {86}in(RTPS_Ch, (cryptoHeader: CryptoHeader_t,applicationData_x: bitstring,applicationDataMAC: bitstring));
    {87}let makeCryptoHeader(sessionID: bitstring,IV: bitstring) = cryptoHeader in
    {88}let sessionKey: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID,KeyMaterial)) in
    {89}if aead_mac_check(AeadAlgoA,sessionKey,IV,cryptoHeader,applicationData_x,applicationDataMAC) then
    {90}event A_3(GUIDB_1,GUIDA_1,applicationData_x,cryptoHeader,sessionKey);
    {91}event ENC_COMMUNICATION(GUIDA_1,CA,ChallengeA,gx_DHA,GUIDB_1,CB,ChallengeB,gy_DHB,SharedSecret,KeyMaterial,cryptoHeader,sessionKey);
    {92}new sessionID_new: bitstring;
    {93}new IV_new: bitstring;
    {96}new applicationData_new: bitstring;
    {95}let sessionKey_new: bitstring = hmac(HashAlgoA,KeyMaterial,(sessionID_new,KeyMaterial)) in
    {94}let cryptoHeader_new: CryptoHeader_t = makeCryptoHeader(sessionID_new,IV_new) in
    {97}event KEY_UPDATE_begin(GUIDA_1,GUIDB_1,cryptoHeader_new,sessionKey_new,applicationData_new);
    {98}out(RTPS_Ch, (cryptoHeader_new,applicationData_new,aead_mac(AeadAlgoA,sessionKey_new,IV,cryptoHeader_new,applicationData_new)));
    {99}out(RTPS_Ch, finishA)
) | (
    {100}!
    {106}let Topic_bd_2: TopicID_t = Topic_bd in
    {104}let QosB_1: Qos_t = QosB in
    {101}let GUIDB_2: GUID_t = GUIDB in
    {107}let PdataB_1: Pdata_t = participant_data(GUIDB_2,Topic_bd_2,QosB_1,discoveryRegister) in
    {108}event B_discover(PdataB_1);
    {109}out(Discovery_ch, (GUIDB_2,PdataB_1));
    {110}in(RTPS_Ch, (CA_1: Clist_t,hash_CA_1: bitstring,ChallengeA_1: bitstring,gx_DHA_1: element_t));
    {103}let HashAlgoB: Hash_alg_t = SHA256 in
    {30}let DHAlgoB: Algo_t = make_algo(ID_G,DH_RSA) in
    {111}let make_C_list(CertA_1: Cert_t,PermA_1: PermDoc_t,PdataA_1: Pdata_t,=DHAlgoB,=HashAlgoB) = CA_1 in
    {112}let make_algo(g_1: group_t,algoName_1: AlgoName_t) = DHAlgoB in
    {113}let (GUIDA_2: GUID_t,PkA: PK_t,=SN_CI) = check_cert(CertA_1,PK_CI) in
    {114}if (hash(HashAlgoB,CA_1) = hash_CA_1) then
    {115}new ChallengeB_1: bitstring;
    {116}new s_1[]: Seed_t;
    {117}let gx_1: element_t = dh_pub(g_1,dh_k(s_1)) in
    {118}let (y: bitstring,gy_DHB_1: element_t) = (dh_k(s_1),gx_1) in
    {21}let Pk_1: PK_t = pk(PrivKB) in
    {20}let sn_2: GUID_t = GUIDB in
    {22}let CertB: Cert_t = sign_cert(sn_2,Pk_1,SN_CI,SK_CI) in
    {122}event beginAtoB(GUIDB_2,CertB,ChallengeA_1);
    {28}let PP_1: ParticipantPermission_t = PPB in
    {27}let DG_1: DomainGovernance_t = DGB in
    {26}let sn_3: GUID_t = GUIDB in
    {29}let PermB: PermDoc_t = sign_perm(sn_3,DG_1,PP_1,SK_Perm) in
    {119}let CB_1: Clist_t = make_C_list(CertB,PermB,PdataB_1,DHAlgoB,HashAlgoB) in
    {123}event B_0(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1);
    {120}let hash_CB_1: bitstring = hash(HashAlgoB,CB_1) in
    {102}let PrivK_B: SK_t = PrivKB in
    {121}let sigB_1: Sig_t = sign(PrivK_B,(hash_CB_1,ChallengeB_1,gy_DHB_1,ChallengeA_1,gx_DHA_1,hash_CA_1)) in
    {124}out(RTPS_Ch, (CB_1,hash_CB_1,ChallengeA_1,ChallengeB_1,gy_DHB_1,hash_CA_1,gx_DHA_1,sigB_1));
    {125}in(RTPS_Ch, (=hash_CA_1,=hash_CB_1,=gx_DHA_1,=gy_DHB_1,=ChallengeA_1,=ChallengeB_1,sigA_1: Sig_t));
    {126}if verify(PkA,(hash_CA_1,ChallengeA_1,gx_DHA_1,ChallengeB_1,gy_DHB_1,hash_CB_1),sigA_1) then
    {127}event endBtoA(GUIDA_2,CertA_1,ChallengeB_1);
    {128}let gxy_SharedSecret_1: element_t = dh_exp(gx_DHA_1,y) in
    {129}let SharedSecret_1: bitstring = gxy_SharedSecret_1 in
    {130}event B_1(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1);
    {131}new Topic_1: TopicID_t;
    {132}event TOPIC_CRT_REQ(GUIDB_2,PermB,Topic_1);
    {133}out(Discovery_ch, (PermB,TopicCreateReq,Topic_1,PdataB_1));
    {134}in(RTPS_Ch, (=GUIDA_2,=PermissionChecked,=GUIDB_2,=Topic_1));
    {136}in(RTPS_Ch, CryptoToken_1: CryptoToken_t);
    {135}let KeyMaterial_1: KeyMaterial_t = KDF(SharedSecret_1,ChallengeA_1,ChallengeB_1) in
    {105}let AeadAlgoB: Aead_alg_t = AES_GCM_128 in
    {137}if decCryptoToken(CryptoToken_1,KeyMaterial_1,DHAlgoB,HashAlgoB,AeadAlgoB) then
    {138}new sessionID_1: bitstring;
    {139}new IV_1: bitstring;
    {141}let sessionKey_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_1,KeyMaterial_1)) in
    {140}let cryptoHeader_1: CryptoHeader_t = makeCryptoHeader(sessionID_1,IV_1) in
    {142}event B_2(GUIDB_2,CB_1,ChallengeB_1,gy_DHB_1,GUIDA_2,CA_1,ChallengeA_1,gx_DHA_1,SharedSecret_1,KeyMaterial_1,cryptoHeader_1,sessionKey_1);
    {143}new applicationData_MAC: bitstring;
    {144}event B_3(GUIDB_2,GUIDA_2,applicationData_MAC,cryptoHeader_1,sessionKey_1);
    {145}out(RTPS_Ch, (cryptoHeader_1,(applicationData_MAC,secretData),aead_mac(AeadAlgoB,sessionKey_1,IV_1,cryptoHeader_1,(applicationData_MAC,secretData))));
    {146}in(RTPS_Ch, (cryptoHeader_n: CryptoHeader_t,applicationData_x_new: bitstring,applicationDataMAC_new: bitstring));
    {147}let makeCryptoHeader(sessionID_new_1: bitstring,IV_new_1: bitstring) = cryptoHeader_n in
    {148}if (sessionID_new_1 â‰  sessionID_1) then
    {149}let sessionKey_new_1: bitstring = hmac(HashAlgoB,KeyMaterial_1,(sessionID_new_1,KeyMaterial_1)) in
    {150}if aead_mac_check(AeadAlgoB,sessionKey_new_1,IV_new_1,cryptoHeader_n,applicationData_x_new,applicationDataMAC_new) then
        {151}event KEY_UPDATE_end(GUIDA_2,GUIDB_2,cryptoHeader_n,sessionKey_new_1,applicationData_x_new);
        {152}out(RTPS_Ch, finishB)
    else
        {153}out(RTPS_Ch, finishB)
) | (
    {154}!
    {156}in(Discovery_ch, (GUIDB_3: GUID_t,PdataB_2: Pdata_t));
    {155}let Topic_bd_3: TopicID_t = Topic_bd in
    {157}let participant_data(=GUIDB_3,=Topic_bd_3,QosB_2: Qos_t,=discoveryRegister) = PdataB_2 in
    {158}in(Discovery_ch, (GUIDA_3: GUID_t,PdataA_2: Pdata_t));
    {159}let participant_data(=GUIDA_3,=Topic_bd_3,QosA: Qos_t,=discoveryRegister) = PdataA_2 in
    {160}event DISCOVERY(GUIDB_3,PdataB_2,GUIDA_3,PdataA_2);
    {161}out(Discovery_ch, (PdataB_2,discoveredParticipant,PdataA_2));
    {162}in(Discovery_ch, (PermB_2: PermDoc_t,=TopicCreateReq,Topic_2: TopicID_t,=PdataB_2));
    {163}event TOPIC_DISCOVERED(GUIDB_3,PermB_2,Topic_2);
    {164}out(Discovery_ch, (PermB_2,TopicDiscovered,Topic_2,PdataB_2));
    {165}out(RTPS_Ch, finishDiscovery)
)

-- Query event(B_1(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,SharedSecret_2)) ==> event(A_1(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,SharedSecret_2)) && event(B_0(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2)) in process 1.
Translating the process into Horn clauses...
Completing...
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect PkA_1:PK_t, GUIDA_4:GUID_t; attacker(sign_cert(GUIDA_4,PkA_1,SN_CI,SK_CI)).
200 rules inserted. Base: 178 rules (60 with conclusion selected). Queue: 35 rules.
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect PdataA_3:Pdata_t, PermA_2:PermDoc_t; attacker(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))).
400 rules inserted. Base: 283 rules (94 with conclusion selected). Queue: 79 rules.
600 rules inserted. Base: 344 rules (96 with conclusion selected). Queue: 135 rules.
800 rules inserted. Base: 441 rules (98 with conclusion selected). Queue: 275 rules.
1000 rules inserted. Base: 469 rules (98 with conclusion selected). Queue: 270 rules.
1200 rules inserted. Base: 537 rules (104 with conclusion selected). Queue: 335 rules.
1400 rules inserted. Base: 633 rules (104 with conclusion selected). Queue: 411 rules.
1600 rules inserted. Base: 795 rules (105 with conclusion selected). Queue: 533 rules.
1800 rules inserted. Base: 846 rules (105 with conclusion selected). Queue: 502 rules.
2000 rules inserted. Base: 983 rules (111 with conclusion selected). Queue: 402 rules.
2200 rules inserted. Base: 1103 rules (112 with conclusion selected). Queue: 314 rules.
2400 rules inserted. Base: 1185 rules (118 with conclusion selected). Queue: 282 rules.
2600 rules inserted. Base: 1251 rules (118 with conclusion selected). Queue: 258 rules.
2800 rules inserted. Base: 1332 rules (118 with conclusion selected). Queue: 211 rules.
3000 rules inserted. Base: 1395 rules (118 with conclusion selected). Queue: 181 rules.
3200 rules inserted. Base: 1447 rules (118 with conclusion selected). Queue: 190 rules.
3400 rules inserted. Base: 1538 rules (130 with conclusion selected). Queue: 159 rules.
3600 rules inserted. Base: 1574 rules (142 with conclusion selected). Queue: 171 rules.
3800 rules inserted. Base: 1618 rules (142 with conclusion selected). Queue: 128 rules.
4000 rules inserted. Base: 1630 rules (142 with conclusion selected). Queue: 122 rules.
4200 rules inserted. Base: 1745 rules (167 with conclusion selected). Queue: 160 rules.
4400 rules inserted. Base: 1820 rules (194 with conclusion selected). Queue: 276 rules.
4600 rules inserted. Base: 1928 rules (194 with conclusion selected). Queue: 420 rules.
4800 rules inserted. Base: 2031 rules (194 with conclusion selected). Queue: 488 rules.
5000 rules inserted. Base: 2100 rules (194 with conclusion selected). Queue: 500 rules.
5200 rules inserted. Base: 2172 rules (194 with conclusion selected). Queue: 516 rules.
5400 rules inserted. Base: 2202 rules (194 with conclusion selected). Queue: 526 rules.
5600 rules inserted. Base: 2212 rules (194 with conclusion selected). Queue: 541 rules.
5800 rules inserted. Base: 2238 rules (194 with conclusion selected). Queue: 561 rules.
6000 rules inserted. Base: 2256 rules (194 with conclusion selected). Queue: 561 rules.
6200 rules inserted. Base: 2277 rules (194 with conclusion selected). Queue: 566 rules.
6400 rules inserted. Base: 2280 rules (194 with conclusion selected). Queue: 571 rules.
6600 rules inserted. Base: 2280 rules (194 with conclusion selected). Queue: 576 rules.
6800 rules inserted. Base: 2280 rules (194 with conclusion selected). Queue: 576 rules.
7000 rules inserted. Base: 2317 rules (194 with conclusion selected). Queue: 609 rules.
7200 rules inserted. Base: 2341 rules (194 with conclusion selected). Queue: 663 rules.
7400 rules inserted. Base: 2405 rules (194 with conclusion selected). Queue: 719 rules.
7600 rules inserted. Base: 2405 rules (194 with conclusion selected). Queue: 719 rules.
7800 rules inserted. Base: 2412 rules (194 with conclusion selected). Queue: 735 rules.
8000 rules inserted. Base: 2439 rules (218 with conclusion selected). Queue: 816 rules.
8200 rules inserted. Base: 2447 rules (218 with conclusion selected). Queue: 834 rules.
8400 rules inserted. Base: 2465 rules (218 with conclusion selected). Queue: 834 rules.
8600 rules inserted. Base: 2455 rules (218 with conclusion selected). Queue: 856 rules.
8800 rules inserted. Base: 2445 rules (218 with conclusion selected). Queue: 859 rules.
9000 rules inserted. Base: 2459 rules (218 with conclusion selected). Queue: 866 rules.
9200 rules inserted. Base: 2461 rules (220 with conclusion selected). Queue: 862 rules.
9400 rules inserted. Base: 2503 rules (222 with conclusion selected). Queue: 903 rules.
9600 rules inserted. Base: 2487 rules (222 with conclusion selected). Queue: 927 rules.
9800 rules inserted. Base: 2489 rules (224 with conclusion selected). Queue: 923 rules.
10000 rules inserted. Base: 2511 rules (226 with conclusion selected). Queue: 899 rules.
10200 rules inserted. Base: 2531 rules (226 with conclusion selected). Queue: 879 rules.
10400 rules inserted. Base: 2625 rules (226 with conclusion selected). Queue: 879 rules.
10600 rules inserted. Base: 2633 rules (226 with conclusion selected). Queue: 879 rules.
10800 rules inserted. Base: 2710 rules (226 with conclusion selected). Queue: 890 rules.
11000 rules inserted. Base: 2762 rules (226 with conclusion selected). Queue: 838 rules.
11200 rules inserted. Base: 2867 rules (226 with conclusion selected). Queue: 815 rules.
11400 rules inserted. Base: 2867 rules (226 with conclusion selected). Queue: 789 rules.
11600 rules inserted. Base: 2913 rules (226 with conclusion selected). Queue: 743 rules.
11800 rules inserted. Base: 2955 rules (226 with conclusion selected). Queue: 701 rules.
12000 rules inserted. Base: 3013 rules (226 with conclusion selected). Queue: 644 rules.
12200 rules inserted. Base: 3054 rules (226 with conclusion selected). Queue: 618 rules.
12400 rules inserted. Base: 3140 rules (226 with conclusion selected). Queue: 590 rules.
12600 rules inserted. Base: 3185 rules (226 with conclusion selected). Queue: 587 rules.
12800 rules inserted. Base: 3142 rules (226 with conclusion selected). Queue: 582 rules.
13000 rules inserted. Base: 3230 rules (230 with conclusion selected). Queue: 538 rules.
13200 rules inserted. Base: 3341 rules (266 with conclusion selected). Queue: 668 rules.
13400 rules inserted. Base: 3451 rules (287 with conclusion selected). Queue: 835 rules.
13600 rules inserted. Base: 3582 rules (318 with conclusion selected). Queue: 920 rules.
13800 rules inserted. Base: 3722 rules (342 with conclusion selected). Queue: 915 rules.
14000 rules inserted. Base: 3738 rules (346 with conclusion selected). Queue: 894 rules.
14200 rules inserted. Base: 3878 rules (368 with conclusion selected). Queue: 942 rules.
14400 rules inserted. Base: 3998 rules (386 with conclusion selected). Queue: 922 rules.
14600 rules inserted. Base: 4118 rules (386 with conclusion selected). Queue: 777 rules.
14800 rules inserted. Base: 4235 rules (386 with conclusion selected). Queue: 722 rules.
15000 rules inserted. Base: 4346 rules (386 with conclusion selected). Queue: 624 rules.
15200 rules inserted. Base: 4458 rules (386 with conclusion selected). Queue: 520 rules.
15400 rules inserted. Base: 4458 rules (386 with conclusion selected). Queue: 522 rules.
15600 rules inserted. Base: 4458 rules (386 with conclusion selected). Queue: 518 rules.
15800 rules inserted. Base: 4470 rules (396 with conclusion selected). Queue: 492 rules.
16000 rules inserted. Base: 4484 rules (396 with conclusion selected). Queue: 482 rules.
16200 rules inserted. Base: 4484 rules (396 with conclusion selected). Queue: 486 rules.
16400 rules inserted. Base: 4372 rules (396 with conclusion selected). Queue: 492 rules.
16600 rules inserted. Base: 4361 rules (396 with conclusion selected). Queue: 507 rules.
16800 rules inserted. Base: 4422 rules (396 with conclusion selected). Queue: 466 rules.
17000 rules inserted. Base: 4485 rules (396 with conclusion selected). Queue: 413 rules.
17200 rules inserted. Base: 4500 rules (396 with conclusion selected). Queue: 408 rules.
17400 rules inserted. Base: 4468 rules (396 with conclusion selected). Queue: 408 rules.
17600 rules inserted. Base: 4469 rules (396 with conclusion selected). Queue: 516 rules.
17800 rules inserted. Base: 4363 rules (316 with conclusion selected). Queue: 560 rules.
18000 rules inserted. Base: 4364 rules (316 with conclusion selected). Queue: 622 rules.
18200 rules inserted. Base: 4036 rules (388 with conclusion selected). Queue: 900 rules.
18400 rules inserted. Base: 4036 rules (388 with conclusion selected). Queue: 930 rules.
18600 rules inserted. Base: 4054 rules (388 with conclusion selected). Queue: 988 rules.
18800 rules inserted. Base: 4100 rules (388 with conclusion selected). Queue: 1024 rules.
19000 rules inserted. Base: 4230 rules (388 with conclusion selected). Queue: 894 rules.
19200 rules inserted. Base: 4291 rules (388 with conclusion selected). Queue: 870 rules.
19400 rules inserted. Base: 4323 rules (388 with conclusion selected). Queue: 922 rules.
19600 rules inserted. Base: 4402 rules (388 with conclusion selected). Queue: 1039 rules.
19800 rules inserted. Base: 4444 rules (388 with conclusion selected). Queue: 1100 rules.
20000 rules inserted. Base: 4501 rules (388 with conclusion selected). Queue: 1186 rules.
20200 rules inserted. Base: 4572 rules (388 with conclusion selected). Queue: 1291 rules.
20400 rules inserted. Base: 4582 rules (388 with conclusion selected). Queue: 1500 rules.
20600 rules inserted. Base: 4599 rules (388 with conclusion selected). Queue: 1746 rules.
20800 rules inserted. Base: 4610 rules (388 with conclusion selected). Queue: 1956 rules.
21000 rules inserted. Base: 4611 rules (388 with conclusion selected). Queue: 2014 rules.
21200 rules inserted. Base: 4642 rules (388 with conclusion selected). Queue: 2352 rules.
21400 rules inserted. Base: 4635 rules (388 with conclusion selected). Queue: 2442 rules.
21600 rules inserted. Base: 4668 rules (388 with conclusion selected). Queue: 2661 rules.
21800 rules inserted. Base: 4712 rules (388 with conclusion selected). Queue: 2666 rules.
22000 rules inserted. Base: 4744 rules (388 with conclusion selected). Queue: 2685 rules.
22200 rules inserted. Base: 4800 rules (388 with conclusion selected). Queue: 2714 rules.
22400 rules inserted. Base: 4836 rules (388 with conclusion selected). Queue: 2702 rules.
22600 rules inserted. Base: 4876 rules (388 with conclusion selected). Queue: 2738 rules.
22800 rules inserted. Base: 4916 rules (388 with conclusion selected). Queue: 2744 rules.
23000 rules inserted. Base: 4956 rules (388 with conclusion selected). Queue: 2753 rules.
23200 rules inserted. Base: 5001 rules (388 with conclusion selected). Queue: 2783 rules.
23400 rules inserted. Base: 5028 rules (388 with conclusion selected). Queue: 2777 rules.
23600 rules inserted. Base: 5088 rules (388 with conclusion selected). Queue: 2800 rules.
23800 rules inserted. Base: 5112 rules (388 with conclusion selected). Queue: 2802 rules.
24000 rules inserted. Base: 5160 rules (388 with conclusion selected). Queue: 2822 rules.
24200 rules inserted. Base: 5191 rules (388 with conclusion selected). Queue: 2831 rules.
24400 rules inserted. Base: 5202 rules (388 with conclusion selected). Queue: 2796 rules.
24600 rules inserted. Base: 5191 rules (388 with conclusion selected). Queue: 2759 rules.
24800 rules inserted. Base: 5238 rules (388 with conclusion selected). Queue: 2742 rules.
25000 rules inserted. Base: 5219 rules (388 with conclusion selected). Queue: 2711 rules.
25200 rules inserted. Base: 5220 rules (388 with conclusion selected). Queue: 2674 rules.
25400 rules inserted. Base: 5239 rules (388 with conclusion selected). Queue: 2663 rules.
25600 rules inserted. Base: 5299 rules (388 with conclusion selected). Queue: 2652 rules.
25800 rules inserted. Base: 5316 rules (388 with conclusion selected). Queue: 2616 rules.
26000 rules inserted. Base: 5321 rules (388 with conclusion selected). Queue: 2591 rules.
26200 rules inserted. Base: 5331 rules (388 with conclusion selected). Queue: 2573 rules.
26400 rules inserted. Base: 5321 rules (388 with conclusion selected). Queue: 2543 rules.
26600 rules inserted. Base: 5333 rules (388 with conclusion selected). Queue: 2537 rules.
26800 rules inserted. Base: 5341 rules (388 with conclusion selected). Queue: 2497 rules.
27000 rules inserted. Base: 5363 rules (388 with conclusion selected). Queue: 2489 rules.
27200 rules inserted. Base: 5456 rules (388 with conclusion selected). Queue: 2388 rules.
27400 rules inserted. Base: 5547 rules (388 with conclusion selected). Queue: 2313 rules.
27600 rules inserted. Base: 5629 rules (388 with conclusion selected). Queue: 2239 rules.
27800 rules inserted. Base: 5715 rules (388 with conclusion selected). Queue: 2149 rules.
28000 rules inserted. Base: 5804 rules (388 with conclusion selected). Queue: 2072 rules.
28200 rules inserted. Base: 5852 rules (388 with conclusion selected). Queue: 2016 rules.
28400 rules inserted. Base: 5942 rules (388 with conclusion selected). Queue: 1944 rules.
28600 rules inserted. Base: 6012 rules (388 with conclusion selected). Queue: 1880 rules.
28800 rules inserted. Base: 6120 rules (388 with conclusion selected). Queue: 1773 rules.
29000 rules inserted. Base: 6200 rules (388 with conclusion selected). Queue: 1702 rules.
29200 rules inserted. Base: 6270 rules (388 with conclusion selected). Queue: 1638 rules.
29400 rules inserted. Base: 6373 rules (388 with conclusion selected). Queue: 1535 rules.
29600 rules inserted. Base: 6428 rules (388 with conclusion selected). Queue: 1473 rules.
29800 rules inserted. Base: 6493 rules (388 with conclusion selected). Queue: 1409 rules.
30000 rules inserted. Base: 6560 rules (388 with conclusion selected). Queue: 1344 rules.
30200 rules inserted. Base: 6560 rules (388 with conclusion selected). Queue: 1312 rules.
30400 rules inserted. Base: 6601 rules (388 with conclusion selected). Queue: 1257 rules.
30600 rules inserted. Base: 6660 rules (388 with conclusion selected). Queue: 1192 rules.
30800 rules inserted. Base: 6741 rules (388 with conclusion selected). Queue: 1111 rules.
31000 rules inserted. Base: 6784 rules (388 with conclusion selected). Queue: 1060 rules.
31200 rules inserted. Base: 6812 rules (388 with conclusion selected). Queue: 1032 rules.
31400 rules inserted. Base: 6844 rules (388 with conclusion selected). Queue: 1000 rules.
31600 rules inserted. Base: 6796 rules (388 with conclusion selected). Queue: 984 rules.
31800 rules inserted. Base: 6831 rules (388 with conclusion selected). Queue: 949 rules.
32000 rules inserted. Base: 6856 rules (388 with conclusion selected). Queue: 924 rules.
32200 rules inserted. Base: 7010 rules (530 with conclusion selected). Queue: 770 rules.
32400 rules inserted. Base: 7172 rules (692 with conclusion selected). Queue: 608 rules.
32600 rules inserted. Base: 7310 rules (750 with conclusion selected). Queue: 742 rules.
32800 rules inserted. Base: 7472 rules (912 with conclusion selected). Queue: 580 rules.
33000 rules inserted. Base: 7588 rules (1028 with conclusion selected). Queue: 449 rules.
33200 rules inserted. Base: 7576 rules (1028 with conclusion selected). Queue: 420 rules.
33400 rules inserted. Base: 7594 rules (1050 with conclusion selected). Queue: 366 rules.
33600 rules inserted. Base: 7492 rules (1068 with conclusion selected). Queue: 348 rules.
33800 rules inserted. Base: 7510 rules (1140 with conclusion selected). Queue: 300 rules.
34000 rules inserted. Base: 7671 rules (1140 with conclusion selected). Queue: 499 rules.
34200 rules inserted. Base: 7656 rules (1140 with conclusion selected). Queue: 552 rules.
34400 rules inserted. Base: 7560 rules (1140 with conclusion selected). Queue: 552 rules.
34600 rules inserted. Base: 7476 rules (1140 with conclusion selected). Queue: 552 rules.
34800 rules inserted. Base: 7389 rules (1140 with conclusion selected). Queue: 577 rules.
35000 rules inserted. Base: 7278 rules (1140 with conclusion selected). Queue: 600 rules.
35200 rules inserted. Base: 7249 rules (1140 with conclusion selected). Queue: 591 rules.
35400 rules inserted. Base: 7351 rules (1140 with conclusion selected). Queue: 463 rules.
35600 rules inserted. Base: 7449 rules (1140 with conclusion selected). Queue: 338 rules.
35800 rules inserted. Base: 7561 rules (1140 with conclusion selected). Queue: 211 rules.
36000 rules inserted. Base: 7699 rules (1140 with conclusion selected). Queue: 73 rules.
36200 rules inserted. Base: 7610 rules (1050 with conclusion selected). Queue: 42 rules.
Starting query event(B_1(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,SharedSecret_2)) ==> event(A_1(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,SharedSecret_2)) && event(B_0(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2))
goal reachable: b-event(B_0(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2)) && attacker(PermA_2) && attacker(PdataA_3) && attacker(ChallengeA_2) && attacker(gx_DHA_2) -> event(B_1(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2,dh_exp(gx_DHA_2,dh_k(s_2))))
Abbreviations:
ChallengeB_2 = ChallengeB_1[gx_DHA_1 = gx_DHA_2,ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid]
s_2 = s_1[!1 = @sid]

Derivation:
Abbreviations:
ChallengeB_2 = ChallengeB_1[gx_DHA_1 = gx_DHA_2,ChallengeA_1 = ChallengeA_2,hash_CA_1 = hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),CA_1 = make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),!1 = @sid]
s_2 = s_1[!1 = @sid]

1. We assume as hypothesis that
attacker(gx_DHA_2).

2. We assume as hypothesis that
attacker(ChallengeA_2).

3. Using the function SHA256 the attacker may obtain SHA256.
attacker(SHA256).

4. Using the function DH_RSA the attacker may obtain DH_RSA.
attacker(DH_RSA).

5. Using the function ID_G the attacker may obtain ID_G.
attacker(ID_G).

6. By 5, the attacker may know ID_G.
By 4, the attacker may know DH_RSA.
Using the function make_algo the attacker may obtain make_algo(ID_G,DH_RSA).
attacker(make_algo(ID_G,DH_RSA)).

7. We assume as hypothesis that
attacker(PdataA_3).

8. We assume as hypothesis that
attacker(PermA_2).

9. The message (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)) may be sent to the attacker at output {45}.
attacker((GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA))).

10. By 9, the attacker may know (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)).
Using the function 3-proj-5-tuple the attacker may obtain sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
attacker(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI)).

11. By 10, the attacker may know sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI).
By 8, the attacker may know PermA_2.
By 7, the attacker may know PdataA_3.
By 6, the attacker may know make_algo(ID_G,DH_RSA).
By 3, the attacker may know SHA256.
Using the function make_C_list the attacker may obtain make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256).
attacker(make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).

12. By 3, the attacker may know SHA256.
By 11, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256).
Using the function hash the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))).

13. By 11, the attacker may know make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256).
By 12, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
By 2, the attacker may know ChallengeA_2.
By 1, the attacker may know gx_DHA_2.
Using the function 4-tuple the attacker may obtain (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2).
attacker((make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2)).

14. The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2) that the attacker may have by 13 may be received at input {110}.
The event B_0(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2) may be executed at {123}.
So the message (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,gx_DHA_2,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))))) may be sent to the attacker at output {124}.
attacker((make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,gx_DHA_2,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)))))).

15. By 14, the attacker may know (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,gx_DHA_2,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))))).
Using the function 2-proj-8-tuple the attacker may obtain hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
attacker(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).

16. By 14, the attacker may know (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,gx_DHA_2,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))))).
Using the function 5-proj-8-tuple the attacker may obtain dh_pub(ID_G,dh_k(s_2)).
attacker(dh_pub(ID_G,dh_k(s_2))).

17. By 14, the attacker may know (make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,sign(PrivKB[],(hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,gx_DHA_2,hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256))))).
Using the function 4-proj-8-tuple the attacker may obtain ChallengeB_2.
attacker(ChallengeB_2).

18. By 12, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
By 2, the attacker may know ChallengeA_2.
By 1, the attacker may know gx_DHA_2.
By 17, the attacker may know ChallengeB_2.
By 16, the attacker may know dh_pub(ID_G,dh_k(s_2)).
By 15, the attacker may know hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
Using the function 6-tuple the attacker may obtain (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).
attacker((hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).

19. By 9, the attacker may know (GUID[],PrivK[],sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),sign_perm(GUID[],DG_2[],PP_2[],SK_Perm),make_algo(ID_G,DH_RSA)).
Using the function 2-proj-5-tuple the attacker may obtain PrivK[].
attacker(PrivK[]).

20. By 19, the attacker may know PrivK[].
By 18, the attacker may know (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))).
Using the function sign the attacker may obtain sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).
attacker(sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))).

21. By 12, the attacker may know hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)).
By 15, the attacker may know hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)).
By 1, the attacker may know gx_DHA_2.
By 16, the attacker may know dh_pub(ID_G,dh_k(s_2)).
By 2, the attacker may know ChallengeA_2.
By 17, the attacker may know ChallengeB_2.
By 20, the attacker may know sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))).
Using the function 7-tuple the attacker may obtain (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,ChallengeB_2,sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))).
attacker((hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,ChallengeB_2,sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))))).

22. The message (make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2) that the attacker may have by 13 may be received at input {110}.
The event B_0(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2) may be executed at {123}.
The message (hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),gx_DHA_2,dh_pub(ID_G,dh_k(s_2)),ChallengeA_2,ChallengeB_2,sign(PrivK[],(hash(SHA256,make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256)),ChallengeA_2,gx_DHA_2,ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),hash(SHA256,make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256))))) that the attacker may have by 21 may be received at input {125}.
So event B_1(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2,dh_exp(gx_DHA_2,dh_k(s_2))) may be executed at {130}.
event(B_1(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2,dh_exp(gx_DHA_2,dh_k(s_2)))).

23. By 22, event(B_1(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2,dh_exp(gx_DHA_2,dh_k(s_2)))).
The goal is reached, represented in the following fact:
event(B_1(GUIDB[],make_C_list(sign_cert(GUIDB[],pk(PrivKB[]),SN_CI,SK_CI),sign_perm(GUIDB[],DGB[],PPB[],SK_Perm),participant_data(GUIDB[],Topic_bd[],QosB[],discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_2,dh_pub(ID_G,dh_k(s_2)),GUID[],make_C_list(sign_cert(GUID[],pk(PrivK[]),SN_CI,SK_CI),PermA_2,PdataA_3,make_algo(ID_G,DH_RSA),SHA256),ChallengeA_2,gx_DHA_2,dh_exp(gx_DHA_2,dh_k(s_2)))).


A more detailed output of the traces is available with
  set traceDisplay = long.

out(RTPS_Ch, ~M) with ~M = pk(SK_CI) at {2}

out(RTPS_Ch, ~M_1) with ~M_1 = pk(SK_Perm) at {4}

new GUIDA: GUID_t creating GUIDA_4 at {5}

new PrivKA: SK_t creating PrivKA_1 at {6}

new DGA: DomainGovernance_t creating DGA_1 at {10}

new PPA: ParticipantPermission_t creating PPA_1 at {11}

new QoSA: Qos_t creating QoSA_2 at {12}

new GUIDB: GUID_t creating GUIDB_4 at {18}

new PrivKB: SK_t creating PrivKB_1 at {19}

new DGB: DomainGovernance_t creating DGB_2 at {23}

new PPB: ParticipantPermission_t creating PPB_2 at {24}

new QosB: Qos_t creating QosB_3 at {25}

new Topic_bd: TopicID_t creating Topic_bd_4 at {31}

event B_discover(participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister)) at {108} in copy a

out(Discovery_ch, (~M_2,participant_data(~M_3,~M_4,~M_5,~M_6))) with ~M_2 = GUIDB_4, ~M_3 = GUIDB_4, ~M_4 = Topic_bd_4, ~M_5 = QosB_3, ~M_6 = discoveryRegister at {109} in copy a

new GUID: GUID_t creating GUID_1 at {32}

new PrivK: SK_t creating PrivK_1 at {33}

new DG_2: DomainGovernance_t creating DG_4 at {37}

new PP_2: ParticipantPermission_t creating PP_4 at {38}

new Qos: Qos_t creating Qos_1 at {39}

out(RTPS_Ch, (~M_7,~M_8,~M_9,~M_10,make_algo(~M_11,~M_12))) with ~M_7 = GUID_1, ~M_8 = PrivK_1, ~M_9 = sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI), ~M_10 = sign_perm(GUID_1,DG_4,PP_4,SK_Perm), ~M_11 = ID_G, ~M_12 = DH_RSA at {45}

in(RTPS_Ch, (make_C_list(~M_9,a_1,a_2,make_algo(ID_G,DH_RSA),SHA256),hash(SHA256,make_C_list(~M_9,a_1,a_2,make_algo(ID_G,DH_RSA),SHA256)),a_3,a_4)) with ~M_9 = sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI), hash(SHA256,make_C_list(~M_9,a_1,a_2,make_algo(ID_G,DH_RSA),SHA256)) = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_1,a_2,make_algo(ID_G,DH_RSA),SHA256)) at {110} in copy a

new ChallengeB_1: bitstring creating ChallengeB_3 at {115} in copy a

new s_1: Seed_t creating s_3 at {116} in copy a

event beginAtoB(GUIDB_4,sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),a_3) at {122} in copy a

event B_0(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_1,a_2,make_algo(ID_G,DH_RSA),SHA256),a_3,a_4) at {123} in copy a

out(RTPS_Ch, (make_C_list(~M_13,~M_14,participant_data(~M_15,~M_16,~M_17,~M_18),make_algo(~M_19,~M_20),~M_21),~M_22,~M_23,~M_24,~M_25,~M_26,~M_27,~M_28)) with ~M_13 = sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI), ~M_14 = sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm), ~M_15 = GUIDB_4, ~M_16 = Topic_bd_4, ~M_17 = QosB_3, ~M_18 = discoveryRegister, ~M_19 = ID_G, ~M_20 = DH_RSA, ~M_21 = SHA256, ~M_22 = hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_23 = a_3, ~M_24 = ChallengeB_3, ~M_25 = dh_pub(ID_G,dh_k(s_3)), ~M_26 = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_1,a_2,make_algo(ID_G,DH_RSA),SHA256)), ~M_27 = a_4, ~M_28 = sign(PrivKB_1,(hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)),ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),a_3,a_4,hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_1,a_2,make_algo(ID_G,DH_RSA),SHA256)))) at {124} in copy a

in(RTPS_Ch, (hash(SHA256,make_C_list(~M_9,a_1,a_2,make_algo(ID_G,DH_RSA),SHA256)),~M_22,a_4,~M_25,a_3,~M_24,sign(~M_8,(hash(SHA256,make_C_list(~M_9,a_1,a_2,make_algo(ID_G,DH_RSA),SHA256)),a_3,a_4,~M_24,~M_25,~M_22)))) with hash(SHA256,make_C_list(~M_9,a_1,a_2,make_algo(ID_G,DH_RSA),SHA256)) = hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_1,a_2,make_algo(ID_G,DH_RSA),SHA256)), ~M_22 = hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)), ~M_25 = dh_pub(ID_G,dh_k(s_3)), ~M_24 = ChallengeB_3, sign(~M_8,(hash(SHA256,make_C_list(~M_9,a_1,a_2,make_algo(ID_G,DH_RSA),SHA256)),a_3,a_4,~M_24,~M_25,~M_22)) = sign(PrivK_1,(hash(SHA256,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_1,a_2,make_algo(ID_G,DH_RSA),SHA256)),a_3,a_4,ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),hash(SHA256,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256)))) at {125} in copy a

event endBtoA(GUID_1,sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),ChallengeB_3) at {127} in copy a

event B_1(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_1,a_2,make_algo(ID_G,DH_RSA),SHA256),a_3,a_4,dh_exp(a_4,dh_k(s_3))) at {130} in copy a (goal)

The event B_1(GUIDB_4,make_C_list(sign_cert(GUIDB_4,pk(PrivKB_1),SN_CI,SK_CI),sign_perm(GUIDB_4,DGB_2,PPB_2,SK_Perm),participant_data(GUIDB_4,Topic_bd_4,QosB_3,discoveryRegister),make_algo(ID_G,DH_RSA),SHA256),ChallengeB_3,dh_pub(ID_G,dh_k(s_3)),GUID_1,make_C_list(sign_cert(GUID_1,pk(PrivK_1),SN_CI,SK_CI),a_1,a_2,make_algo(ID_G,DH_RSA),SHA256),a_3,a_4,dh_exp(a_4,dh_k(s_3))) is executed at {130} in copy a.
A trace has been found.
RESULT event(B_1(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,SharedSecret_2)) ==> event(A_1(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,SharedSecret_2)) && event(B_0(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2)) is false.

--------------------------------------------------------------
Verification summary:

Query event(B_1(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,SharedSecret_2)) ==> event(A_1(GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2,GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,SharedSecret_2)) && event(B_0(GUIDB_4,CB_2,ChallengeB_2,gy_DHB_2,GUIDA_4,CA_2,ChallengeA_2,gx_DHA_2)) is false.

--------------------------------------------------------------

